// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: trade/Trd_Common.proto

package common

import (
	_ "github.com/qtopie/gofutuapi/gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 交易环境
type TrdEnv int32

const (
	TrdEnv_TrdEnv_Simulate TrdEnv = 0 //仿真环境(模拟环境)
	TrdEnv_TrdEnv_Real     TrdEnv = 1 //真实环境
)

// Enum value maps for TrdEnv.
var (
	TrdEnv_name = map[int32]string{
		0: "TrdEnv_Simulate",
		1: "TrdEnv_Real",
	}
	TrdEnv_value = map[string]int32{
		"TrdEnv_Simulate": 0,
		"TrdEnv_Real":     1,
	}
)

func (x TrdEnv) Enum() *TrdEnv {
	p := new(TrdEnv)
	*p = x
	return p
}

func (x TrdEnv) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrdEnv) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[0].Descriptor()
}

func (TrdEnv) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[0]
}

func (x TrdEnv) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrdEnv) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrdEnv(num)
	return nil
}

// Deprecated: Use TrdEnv.Descriptor instead.
func (TrdEnv) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{0}
}

// 交易品类
type TrdCategory int32

const (
	TrdCategory_TrdCategory_Unknown  TrdCategory = 0 //未知品类
	TrdCategory_TrdCategory_Security TrdCategory = 1 //证券
	TrdCategory_TrdCategory_Future   TrdCategory = 2 //期货
)

// Enum value maps for TrdCategory.
var (
	TrdCategory_name = map[int32]string{
		0: "TrdCategory_Unknown",
		1: "TrdCategory_Security",
		2: "TrdCategory_Future",
	}
	TrdCategory_value = map[string]int32{
		"TrdCategory_Unknown":  0,
		"TrdCategory_Security": 1,
		"TrdCategory_Future":   2,
	}
)

func (x TrdCategory) Enum() *TrdCategory {
	p := new(TrdCategory)
	*p = x
	return p
}

func (x TrdCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrdCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[1].Descriptor()
}

func (TrdCategory) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[1]
}

func (x TrdCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrdCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrdCategory(num)
	return nil
}

// Deprecated: Use TrdCategory.Descriptor instead.
func (TrdCategory) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{1}
}

// 交易市场，是大的市场，不是具体品种
type TrdMarket int32

const (
	TrdMarket_TrdMarket_Unknown             TrdMarket = 0  //未知市场
	TrdMarket_TrdMarket_HK                  TrdMarket = 1  //香港市场
	TrdMarket_TrdMarket_US                  TrdMarket = 2  //美国市场
	TrdMarket_TrdMarket_CN                  TrdMarket = 3  //大陆市场
	TrdMarket_TrdMarket_HKCC                TrdMarket = 4  //香港A股通市场
	TrdMarket_TrdMarket_Futures             TrdMarket = 5  //期货市场
	TrdMarket_TrdMarket_SG                  TrdMarket = 6  //期货市场
	TrdMarket_TrdMarket_AU                  TrdMarket = 8  //澳洲市场
	TrdMarket_TrdMarket_Futures_Simulate_HK TrdMarket = 10 // 模拟交易期货市场
	TrdMarket_TrdMarket_Futures_Simulate_US TrdMarket = 11
	TrdMarket_TrdMarket_Futures_Simulate_SG TrdMarket = 12
	TrdMarket_TrdMarket_Futures_Simulate_JP TrdMarket = 13
	TrdMarket_TrdMarket_JP                  TrdMarket = 15
	TrdMarket_TrdMarket_MY                  TrdMarket = 111
	TrdMarket_TrdMarket_CA                  TrdMarket = 112
	TrdMarket_TrdMarket_HK_Fund             TrdMarket = 113 //香港基金市场
	TrdMarket_TrdMarket_US_Fund             TrdMarket = 123 //美国基金市场
)

// Enum value maps for TrdMarket.
var (
	TrdMarket_name = map[int32]string{
		0:   "TrdMarket_Unknown",
		1:   "TrdMarket_HK",
		2:   "TrdMarket_US",
		3:   "TrdMarket_CN",
		4:   "TrdMarket_HKCC",
		5:   "TrdMarket_Futures",
		6:   "TrdMarket_SG",
		8:   "TrdMarket_AU",
		10:  "TrdMarket_Futures_Simulate_HK",
		11:  "TrdMarket_Futures_Simulate_US",
		12:  "TrdMarket_Futures_Simulate_SG",
		13:  "TrdMarket_Futures_Simulate_JP",
		15:  "TrdMarket_JP",
		111: "TrdMarket_MY",
		112: "TrdMarket_CA",
		113: "TrdMarket_HK_Fund",
		123: "TrdMarket_US_Fund",
	}
	TrdMarket_value = map[string]int32{
		"TrdMarket_Unknown":             0,
		"TrdMarket_HK":                  1,
		"TrdMarket_US":                  2,
		"TrdMarket_CN":                  3,
		"TrdMarket_HKCC":                4,
		"TrdMarket_Futures":             5,
		"TrdMarket_SG":                  6,
		"TrdMarket_AU":                  8,
		"TrdMarket_Futures_Simulate_HK": 10,
		"TrdMarket_Futures_Simulate_US": 11,
		"TrdMarket_Futures_Simulate_SG": 12,
		"TrdMarket_Futures_Simulate_JP": 13,
		"TrdMarket_JP":                  15,
		"TrdMarket_MY":                  111,
		"TrdMarket_CA":                  112,
		"TrdMarket_HK_Fund":             113,
		"TrdMarket_US_Fund":             123,
	}
)

func (x TrdMarket) Enum() *TrdMarket {
	p := new(TrdMarket)
	*p = x
	return p
}

func (x TrdMarket) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrdMarket) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[2].Descriptor()
}

func (TrdMarket) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[2]
}

func (x TrdMarket) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrdMarket) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrdMarket(num)
	return nil
}

// Deprecated: Use TrdMarket.Descriptor instead.
func (TrdMarket) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{2}
}

// 可交易证券所属市场，目前主要是区分A股的沪市和深市，香港和美国暂不需要细分
type TrdSecMarket int32

const (
	TrdSecMarket_TrdSecMarket_Unknown TrdSecMarket = 0  //未知市场
	TrdSecMarket_TrdSecMarket_HK      TrdSecMarket = 1  //香港市场(股票、窝轮、牛熊、期权、期货等)
	TrdSecMarket_TrdSecMarket_US      TrdSecMarket = 2  //美国市场(股票、期权、期货等)
	TrdSecMarket_TrdSecMarket_CN_SH   TrdSecMarket = 31 //沪股市场(股票)
	TrdSecMarket_TrdSecMarket_CN_SZ   TrdSecMarket = 32 //深股市场(股票)
	TrdSecMarket_TrdSecMarket_SG      TrdSecMarket = 41 //新加坡市场(期货)
	TrdSecMarket_TrdSecMarket_JP      TrdSecMarket = 51 //日本市场(期货)
	TrdSecMarket_TrdSecMarket_AU      TrdSecMarket = 61 // 澳大利亚
	TrdSecMarket_TrdSecMarket_MY      TrdSecMarket = 71 // 马来西亚
	TrdSecMarket_TrdSecMarket_CA      TrdSecMarket = 81 // 加拿大
	TrdSecMarket_TrdSecMarket_FX      TrdSecMarket = 91 // 外汇
)

// Enum value maps for TrdSecMarket.
var (
	TrdSecMarket_name = map[int32]string{
		0:  "TrdSecMarket_Unknown",
		1:  "TrdSecMarket_HK",
		2:  "TrdSecMarket_US",
		31: "TrdSecMarket_CN_SH",
		32: "TrdSecMarket_CN_SZ",
		41: "TrdSecMarket_SG",
		51: "TrdSecMarket_JP",
		61: "TrdSecMarket_AU",
		71: "TrdSecMarket_MY",
		81: "TrdSecMarket_CA",
		91: "TrdSecMarket_FX",
	}
	TrdSecMarket_value = map[string]int32{
		"TrdSecMarket_Unknown": 0,
		"TrdSecMarket_HK":      1,
		"TrdSecMarket_US":      2,
		"TrdSecMarket_CN_SH":   31,
		"TrdSecMarket_CN_SZ":   32,
		"TrdSecMarket_SG":      41,
		"TrdSecMarket_JP":      51,
		"TrdSecMarket_AU":      61,
		"TrdSecMarket_MY":      71,
		"TrdSecMarket_CA":      81,
		"TrdSecMarket_FX":      91,
	}
)

func (x TrdSecMarket) Enum() *TrdSecMarket {
	p := new(TrdSecMarket)
	*p = x
	return p
}

func (x TrdSecMarket) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrdSecMarket) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[3].Descriptor()
}

func (TrdSecMarket) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[3]
}

func (x TrdSecMarket) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrdSecMarket) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrdSecMarket(num)
	return nil
}

// Deprecated: Use TrdSecMarket.Descriptor instead.
func (TrdSecMarket) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{3}
}

// 交易方向
type TrdSide int32

const (
	// 客户端下单只传Buy或Sell即可，SellShort是美股订单时服务器返回有此方向，BuyBack目前不存在，但也不排除服务器会传
	TrdSide_TrdSide_Unknown   TrdSide = 0 //未知方向
	TrdSide_TrdSide_Buy       TrdSide = 1 //买入
	TrdSide_TrdSide_Sell      TrdSide = 2 //卖出
	TrdSide_TrdSide_SellShort TrdSide = 3 //卖空
	TrdSide_TrdSide_BuyBack   TrdSide = 4 //买回
)

// Enum value maps for TrdSide.
var (
	TrdSide_name = map[int32]string{
		0: "TrdSide_Unknown",
		1: "TrdSide_Buy",
		2: "TrdSide_Sell",
		3: "TrdSide_SellShort",
		4: "TrdSide_BuyBack",
	}
	TrdSide_value = map[string]int32{
		"TrdSide_Unknown":   0,
		"TrdSide_Buy":       1,
		"TrdSide_Sell":      2,
		"TrdSide_SellShort": 3,
		"TrdSide_BuyBack":   4,
	}
)

func (x TrdSide) Enum() *TrdSide {
	p := new(TrdSide)
	*p = x
	return p
}

func (x TrdSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrdSide) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[4].Descriptor()
}

func (TrdSide) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[4]
}

func (x TrdSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrdSide) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrdSide(num)
	return nil
}

// Deprecated: Use TrdSide.Descriptor instead.
func (TrdSide) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{4}
}

// 订单类型
type OrderType int32

const (
	OrderType_OrderType_Unknown           OrderType = 0  //未知类型
	OrderType_OrderType_Normal            OrderType = 1  //普通订单(港股的增强限价单、港股期权的限价单，A股限价委托、美股的限价单，港股期货的限价单，CME期货的限价单)。目前港股期权只能指定此订单类型。
	OrderType_OrderType_Market            OrderType = 2  //市价订单(目前支持美股、港股正股、涡轮、牛熊、界内证)
	OrderType_OrderType_AbsoluteLimit     OrderType = 5  //绝对限价订单(目前仅港股)，只有价格完全匹配才成交，否则下单失败，比如你下价格为5元的买单，卖单价格必须也要是5元才能成交，低于5元也不能成交，下单失败。卖出同理
	OrderType_OrderType_Auction           OrderType = 6  //竞价订单(目前仅港股)，仅港股早盘竞价和收盘竞价有效，A股的早盘竞价订单类型不变还是OrderType_Normal
	OrderType_OrderType_AuctionLimit      OrderType = 7  //竞价限价订单(目前仅港股)，仅早盘竞价和收盘竞价有效，参与竞价，且要求满足指定价格才会成交
	OrderType_OrderType_SpecialLimit      OrderType = 8  //特别限价订单(目前仅港股)，成交规则同增强限价订单，且部分成交后，交易所自动撤销订单
	OrderType_OrderType_SpecialLimit_All  OrderType = 9  //特别限价且要求全部成交订单(目前仅港股)，要么全部成交，要么自动撤单
	OrderType_OrderType_Stop              OrderType = 10 // 止损市价单
	OrderType_OrderType_StopLimit         OrderType = 11 // 止损限价单
	OrderType_OrderType_MarketifTouched   OrderType = 12 // 触及市价单（止盈）
	OrderType_OrderType_LimitifTouched    OrderType = 13 // 触及限价单（止盈）
	OrderType_OrderType_TrailingStop      OrderType = 14 // 跟踪止损市价单
	OrderType_OrderType_TrailingStopLimit OrderType = 15 // 跟踪止损限价单
	OrderType_OrderType_TWAP_MARKET       OrderType = 16 // TWAP 市价单
	OrderType_OrderType_TWAP_LIMIT        OrderType = 17 // TWAP 限订单
	OrderType_OrderType_VWAP_MARKET       OrderType = 18 // VWAP 市价单
	OrderType_OrderType_VWAP_LIMIT        OrderType = 19 // VWAP 限订单
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0:  "OrderType_Unknown",
		1:  "OrderType_Normal",
		2:  "OrderType_Market",
		5:  "OrderType_AbsoluteLimit",
		6:  "OrderType_Auction",
		7:  "OrderType_AuctionLimit",
		8:  "OrderType_SpecialLimit",
		9:  "OrderType_SpecialLimit_All",
		10: "OrderType_Stop",
		11: "OrderType_StopLimit",
		12: "OrderType_MarketifTouched",
		13: "OrderType_LimitifTouched",
		14: "OrderType_TrailingStop",
		15: "OrderType_TrailingStopLimit",
		16: "OrderType_TWAP_MARKET",
		17: "OrderType_TWAP_LIMIT",
		18: "OrderType_VWAP_MARKET",
		19: "OrderType_VWAP_LIMIT",
	}
	OrderType_value = map[string]int32{
		"OrderType_Unknown":           0,
		"OrderType_Normal":            1,
		"OrderType_Market":            2,
		"OrderType_AbsoluteLimit":     5,
		"OrderType_Auction":           6,
		"OrderType_AuctionLimit":      7,
		"OrderType_SpecialLimit":      8,
		"OrderType_SpecialLimit_All":  9,
		"OrderType_Stop":              10,
		"OrderType_StopLimit":         11,
		"OrderType_MarketifTouched":   12,
		"OrderType_LimitifTouched":    13,
		"OrderType_TrailingStop":      14,
		"OrderType_TrailingStopLimit": 15,
		"OrderType_TWAP_MARKET":       16,
		"OrderType_TWAP_LIMIT":        17,
		"OrderType_VWAP_MARKET":       18,
		"OrderType_VWAP_LIMIT":        19,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[5].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[5]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderType(num)
	return nil
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{5}
}

// 跟踪类型
type TrailType int32

const (
	TrailType_TrailType_Unknown TrailType = 0 //未知类型
	TrailType_TrailType_Ratio   TrailType = 1 //比例
	TrailType_TrailType_Amount  TrailType = 2 //金额
)

// Enum value maps for TrailType.
var (
	TrailType_name = map[int32]string{
		0: "TrailType_Unknown",
		1: "TrailType_Ratio",
		2: "TrailType_Amount",
	}
	TrailType_value = map[string]int32{
		"TrailType_Unknown": 0,
		"TrailType_Ratio":   1,
		"TrailType_Amount":  2,
	}
)

func (x TrailType) Enum() *TrailType {
	p := new(TrailType)
	*p = x
	return p
}

func (x TrailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrailType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[6].Descriptor()
}

func (TrailType) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[6]
}

func (x TrailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrailType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrailType(num)
	return nil
}

// Deprecated: Use TrailType.Descriptor instead.
func (TrailType) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{6}
}

// 订单状态
type OrderStatus int32

const (
	OrderStatus_OrderStatus_Unsubmitted     OrderStatus = 0  //未提交
	OrderStatus_OrderStatus_Unknown         OrderStatus = -1 //未知状态
	OrderStatus_OrderStatus_WaitingSubmit   OrderStatus = 1  //等待提交
	OrderStatus_OrderStatus_Submitting      OrderStatus = 2  //提交中
	OrderStatus_OrderStatus_SubmitFailed    OrderStatus = 3  //提交失败，下单失败
	OrderStatus_OrderStatus_TimeOut         OrderStatus = 4  //处理超时，结果未知
	OrderStatus_OrderStatus_Submitted       OrderStatus = 5  //已提交，等待成交
	OrderStatus_OrderStatus_Filled_Part     OrderStatus = 10 //部分成交
	OrderStatus_OrderStatus_Filled_All      OrderStatus = 11 //全部已成
	OrderStatus_OrderStatus_Cancelling_Part OrderStatus = 12 //正在撤单_部分(部分已成交，正在撤销剩余部分)
	OrderStatus_OrderStatus_Cancelling_All  OrderStatus = 13 //正在撤单_全部
	OrderStatus_OrderStatus_Cancelled_Part  OrderStatus = 14 //部分成交，剩余部分已撤单
	OrderStatus_OrderStatus_Cancelled_All   OrderStatus = 15 //全部已撤单，无成交
	OrderStatus_OrderStatus_Failed          OrderStatus = 21 //下单失败，服务拒绝
	OrderStatus_OrderStatus_Disabled        OrderStatus = 22 //已失效
	OrderStatus_OrderStatus_Deleted         OrderStatus = 23 //已删除，无成交的订单才能删除
	OrderStatus_OrderStatus_FillCancelled   OrderStatus = 24 //成交被撤销，一般遇不到，意思是已经成交的订单被回滚撤销，成交无效变为废单
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0:  "OrderStatus_Unsubmitted",
		-1: "OrderStatus_Unknown",
		1:  "OrderStatus_WaitingSubmit",
		2:  "OrderStatus_Submitting",
		3:  "OrderStatus_SubmitFailed",
		4:  "OrderStatus_TimeOut",
		5:  "OrderStatus_Submitted",
		10: "OrderStatus_Filled_Part",
		11: "OrderStatus_Filled_All",
		12: "OrderStatus_Cancelling_Part",
		13: "OrderStatus_Cancelling_All",
		14: "OrderStatus_Cancelled_Part",
		15: "OrderStatus_Cancelled_All",
		21: "OrderStatus_Failed",
		22: "OrderStatus_Disabled",
		23: "OrderStatus_Deleted",
		24: "OrderStatus_FillCancelled",
	}
	OrderStatus_value = map[string]int32{
		"OrderStatus_Unsubmitted":     0,
		"OrderStatus_Unknown":         -1,
		"OrderStatus_WaitingSubmit":   1,
		"OrderStatus_Submitting":      2,
		"OrderStatus_SubmitFailed":    3,
		"OrderStatus_TimeOut":         4,
		"OrderStatus_Submitted":       5,
		"OrderStatus_Filled_Part":     10,
		"OrderStatus_Filled_All":      11,
		"OrderStatus_Cancelling_Part": 12,
		"OrderStatus_Cancelling_All":  13,
		"OrderStatus_Cancelled_Part":  14,
		"OrderStatus_Cancelled_All":   15,
		"OrderStatus_Failed":          21,
		"OrderStatus_Disabled":        22,
		"OrderStatus_Deleted":         23,
		"OrderStatus_FillCancelled":   24,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[7].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[7]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderStatus(num)
	return nil
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{7}
}

// 一笔成交的状态
type OrderFillStatus int32

const (
	OrderFillStatus_OrderFillStatus_OK        OrderFillStatus = 0 //正常
	OrderFillStatus_OrderFillStatus_Cancelled OrderFillStatus = 1 //成交被取消
	OrderFillStatus_OrderFillStatus_Changed   OrderFillStatus = 2 //成交被更改
)

// Enum value maps for OrderFillStatus.
var (
	OrderFillStatus_name = map[int32]string{
		0: "OrderFillStatus_OK",
		1: "OrderFillStatus_Cancelled",
		2: "OrderFillStatus_Changed",
	}
	OrderFillStatus_value = map[string]int32{
		"OrderFillStatus_OK":        0,
		"OrderFillStatus_Cancelled": 1,
		"OrderFillStatus_Changed":   2,
	}
)

func (x OrderFillStatus) Enum() *OrderFillStatus {
	p := new(OrderFillStatus)
	*p = x
	return p
}

func (x OrderFillStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderFillStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[8].Descriptor()
}

func (OrderFillStatus) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[8]
}

func (x OrderFillStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderFillStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderFillStatus(num)
	return nil
}

// Deprecated: Use OrderFillStatus.Descriptor instead.
func (OrderFillStatus) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{8}
}

// 持仓方向类型
type PositionSide int32

const (
	PositionSide_PositionSide_Long    PositionSide = 0  //多仓，默认情况是多仓
	PositionSide_PositionSide_Unknown PositionSide = -1 //未知方向
	PositionSide_PositionSide_Short   PositionSide = 1  //空仓
)

// Enum value maps for PositionSide.
var (
	PositionSide_name = map[int32]string{
		0:  "PositionSide_Long",
		-1: "PositionSide_Unknown",
		1:  "PositionSide_Short",
	}
	PositionSide_value = map[string]int32{
		"PositionSide_Long":    0,
		"PositionSide_Unknown": -1,
		"PositionSide_Short":   1,
	}
)

func (x PositionSide) Enum() *PositionSide {
	p := new(PositionSide)
	*p = x
	return p
}

func (x PositionSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionSide) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[9].Descriptor()
}

func (PositionSide) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[9]
}

func (x PositionSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PositionSide) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PositionSide(num)
	return nil
}

// Deprecated: Use PositionSide.Descriptor instead.
func (PositionSide) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{9}
}

// 修改订单的操作类型
type ModifyOrderOp int32

const (
	// 港股支持全部操作，美股目前仅支持ModifyOrderOp_Normal和ModifyOrderOp_Cancel
	ModifyOrderOp_ModifyOrderOp_Unknown ModifyOrderOp = 0 //未知操作
	ModifyOrderOp_ModifyOrderOp_Normal  ModifyOrderOp = 1 //修改订单的价格、数量等，即以前的改单
	ModifyOrderOp_ModifyOrderOp_Cancel  ModifyOrderOp = 2 //撤单
	ModifyOrderOp_ModifyOrderOp_Disable ModifyOrderOp = 3 //失效
	ModifyOrderOp_ModifyOrderOp_Enable  ModifyOrderOp = 4 //生效
	ModifyOrderOp_ModifyOrderOp_Delete  ModifyOrderOp = 5 //删除
)

// Enum value maps for ModifyOrderOp.
var (
	ModifyOrderOp_name = map[int32]string{
		0: "ModifyOrderOp_Unknown",
		1: "ModifyOrderOp_Normal",
		2: "ModifyOrderOp_Cancel",
		3: "ModifyOrderOp_Disable",
		4: "ModifyOrderOp_Enable",
		5: "ModifyOrderOp_Delete",
	}
	ModifyOrderOp_value = map[string]int32{
		"ModifyOrderOp_Unknown": 0,
		"ModifyOrderOp_Normal":  1,
		"ModifyOrderOp_Cancel":  2,
		"ModifyOrderOp_Disable": 3,
		"ModifyOrderOp_Enable":  4,
		"ModifyOrderOp_Delete":  5,
	}
)

func (x ModifyOrderOp) Enum() *ModifyOrderOp {
	p := new(ModifyOrderOp)
	*p = x
	return p
}

func (x ModifyOrderOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyOrderOp) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[10].Descriptor()
}

func (ModifyOrderOp) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[10]
}

func (x ModifyOrderOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ModifyOrderOp) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ModifyOrderOp(num)
	return nil
}

// Deprecated: Use ModifyOrderOp.Descriptor instead.
func (ModifyOrderOp) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{10}
}

// 交易账户类型
type TrdAccType int32

const (
	TrdAccType_TrdAccType_Unknown TrdAccType = 0 //未知类型
	TrdAccType_TrdAccType_Cash    TrdAccType = 1 //现金账户
	TrdAccType_TrdAccType_Margin  TrdAccType = 2 //保证金账户
)

// Enum value maps for TrdAccType.
var (
	TrdAccType_name = map[int32]string{
		0: "TrdAccType_Unknown",
		1: "TrdAccType_Cash",
		2: "TrdAccType_Margin",
	}
	TrdAccType_value = map[string]int32{
		"TrdAccType_Unknown": 0,
		"TrdAccType_Cash":    1,
		"TrdAccType_Margin":  2,
	}
)

func (x TrdAccType) Enum() *TrdAccType {
	p := new(TrdAccType)
	*p = x
	return p
}

func (x TrdAccType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrdAccType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[11].Descriptor()
}

func (TrdAccType) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[11]
}

func (x TrdAccType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrdAccType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrdAccType(num)
	return nil
}

// Deprecated: Use TrdAccType.Descriptor instead.
func (TrdAccType) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{11}
}

// 交易账户状态
type TrdAccStatus int32

const (
	TrdAccStatus_TrdAccStatus_Active   TrdAccStatus = 0
	TrdAccStatus_TrdAccStatus_Disabled TrdAccStatus = 1
)

// Enum value maps for TrdAccStatus.
var (
	TrdAccStatus_name = map[int32]string{
		0: "TrdAccStatus_Active",
		1: "TrdAccStatus_Disabled",
	}
	TrdAccStatus_value = map[string]int32{
		"TrdAccStatus_Active":   0,
		"TrdAccStatus_Disabled": 1,
	}
)

func (x TrdAccStatus) Enum() *TrdAccStatus {
	p := new(TrdAccStatus)
	*p = x
	return p
}

func (x TrdAccStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrdAccStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[12].Descriptor()
}

func (TrdAccStatus) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[12]
}

func (x TrdAccStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrdAccStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrdAccStatus(num)
	return nil
}

// Deprecated: Use TrdAccStatus.Descriptor instead.
func (TrdAccStatus) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{12}
}

// 货币种类
type Currency int32

const (
	Currency_Currency_Unknown Currency = 0 //未知货币
	Currency_Currency_HKD     Currency = 1 // 港币
	Currency_Currency_USD     Currency = 2 // 美元
	Currency_Currency_CNH     Currency = 3 // 离岸人民币
	Currency_Currency_JPY     Currency = 4 // 日元
	Currency_Currency_SGD     Currency = 5 // 新币
	Currency_Currency_AUD     Currency = 6 // 澳元
	Currency_Currency_CAD     Currency = 7 // 加拿大元
	Currency_Currency_MYR     Currency = 8 // 马来西亚林吉特
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0: "Currency_Unknown",
		1: "Currency_HKD",
		2: "Currency_USD",
		3: "Currency_CNH",
		4: "Currency_JPY",
		5: "Currency_SGD",
		6: "Currency_AUD",
		7: "Currency_CAD",
		8: "Currency_MYR",
	}
	Currency_value = map[string]int32{
		"Currency_Unknown": 0,
		"Currency_HKD":     1,
		"Currency_USD":     2,
		"Currency_CNH":     3,
		"Currency_JPY":     4,
		"Currency_SGD":     5,
		"Currency_AUD":     6,
		"Currency_CAD":     7,
		"Currency_MYR":     8,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[13].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[13]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Currency) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Currency(num)
	return nil
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{13}
}

// 账户风险控制等级
type CltRiskLevel int32

const (
	CltRiskLevel_CltRiskLevel_Unknown      CltRiskLevel = -1 // 未知
	CltRiskLevel_CltRiskLevel_Safe         CltRiskLevel = 0  // 安全
	CltRiskLevel_CltRiskLevel_Warning      CltRiskLevel = 1  // 预警
	CltRiskLevel_CltRiskLevel_Danger       CltRiskLevel = 2  // 危险
	CltRiskLevel_CltRiskLevel_AbsoluteSafe CltRiskLevel = 3  // 绝对安全
	CltRiskLevel_CltRiskLevel_OptDanger    CltRiskLevel = 4  // 危险, 期权相关
)

// Enum value maps for CltRiskLevel.
var (
	CltRiskLevel_name = map[int32]string{
		-1: "CltRiskLevel_Unknown",
		0:  "CltRiskLevel_Safe",
		1:  "CltRiskLevel_Warning",
		2:  "CltRiskLevel_Danger",
		3:  "CltRiskLevel_AbsoluteSafe",
		4:  "CltRiskLevel_OptDanger",
	}
	CltRiskLevel_value = map[string]int32{
		"CltRiskLevel_Unknown":      -1,
		"CltRiskLevel_Safe":         0,
		"CltRiskLevel_Warning":      1,
		"CltRiskLevel_Danger":       2,
		"CltRiskLevel_AbsoluteSafe": 3,
		"CltRiskLevel_OptDanger":    4,
	}
)

func (x CltRiskLevel) Enum() *CltRiskLevel {
	p := new(CltRiskLevel)
	*p = x
	return p
}

func (x CltRiskLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CltRiskLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[14].Descriptor()
}

func (CltRiskLevel) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[14]
}

func (x CltRiskLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CltRiskLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CltRiskLevel(num)
	return nil
}

// Deprecated: Use CltRiskLevel.Descriptor instead.
func (CltRiskLevel) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{14}
}

// 订单有效期
type TimeInForce int32

const (
	TimeInForce_TimeInForce_DAY TimeInForce = 0 // 当日有效
	TimeInForce_TimeInForce_GTC TimeInForce = 1 // 撤单前有效，最多持续90自然日。
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "TimeInForce_DAY",
		1: "TimeInForce_GTC",
	}
	TimeInForce_value = map[string]int32{
		"TimeInForce_DAY": 0,
		"TimeInForce_GTC": 1,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[15].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[15]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TimeInForce) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TimeInForce(num)
	return nil
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{15}
}

// 券商
type SecurityFirm int32

const (
	SecurityFirm_SecurityFirm_Unknown        SecurityFirm = 0 //未知
	SecurityFirm_SecurityFirm_FutuSecurities SecurityFirm = 1 //富途证券（香港）
	SecurityFirm_SecurityFirm_FutuInc        SecurityFirm = 2 //富途证券（美国）
	SecurityFirm_SecurityFirm_FutuSG         SecurityFirm = 3 //富途证券（新加坡）
	SecurityFirm_SecurityFirm_FutuAU         SecurityFirm = 4 //富途证券（澳洲）
)

// Enum value maps for SecurityFirm.
var (
	SecurityFirm_name = map[int32]string{
		0: "SecurityFirm_Unknown",
		1: "SecurityFirm_FutuSecurities",
		2: "SecurityFirm_FutuInc",
		3: "SecurityFirm_FutuSG",
		4: "SecurityFirm_FutuAU",
	}
	SecurityFirm_value = map[string]int32{
		"SecurityFirm_Unknown":        0,
		"SecurityFirm_FutuSecurities": 1,
		"SecurityFirm_FutuInc":        2,
		"SecurityFirm_FutuSG":         3,
		"SecurityFirm_FutuAU":         4,
	}
)

func (x SecurityFirm) Enum() *SecurityFirm {
	p := new(SecurityFirm)
	*p = x
	return p
}

func (x SecurityFirm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityFirm) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[16].Descriptor()
}

func (SecurityFirm) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[16]
}

func (x SecurityFirm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SecurityFirm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SecurityFirm(num)
	return nil
}

// Deprecated: Use SecurityFirm.Descriptor instead.
func (SecurityFirm) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{16}
}

// 模拟交易账户类型
type SimAccType int32

const (
	SimAccType_SimAccType_Unknown SimAccType = 0 //未知
	SimAccType_SimAccType_Stock   SimAccType = 1 //股票模拟账户（仅用于交易证券类产品，不支持交易期权）
	SimAccType_SimAccType_Option  SimAccType = 2 //期权模拟账户（仅用于交易期权，不支持交易股票证券类产品）
	SimAccType_SimAccType_Futures SimAccType = 3 //期货模拟账户
)

// Enum value maps for SimAccType.
var (
	SimAccType_name = map[int32]string{
		0: "SimAccType_Unknown",
		1: "SimAccType_Stock",
		2: "SimAccType_Option",
		3: "SimAccType_Futures",
	}
	SimAccType_value = map[string]int32{
		"SimAccType_Unknown": 0,
		"SimAccType_Stock":   1,
		"SimAccType_Option":  2,
		"SimAccType_Futures": 3,
	}
)

func (x SimAccType) Enum() *SimAccType {
	p := new(SimAccType)
	*p = x
	return p
}

func (x SimAccType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimAccType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[17].Descriptor()
}

func (SimAccType) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[17]
}

func (x SimAccType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SimAccType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SimAccType(num)
	return nil
}

// Deprecated: Use SimAccType.Descriptor instead.
func (SimAccType) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{17}
}

// 风险状态，共分 9 个等级，LEVEL1是最安全，LEVEL9是最危险
type CltRiskStatus int32

const (
	CltRiskStatus_CltRiskStatus_Unknown CltRiskStatus = 0 //未知
	CltRiskStatus_CltRiskStatus_Level1  CltRiskStatus = 1 //非常安全
	CltRiskStatus_CltRiskStatus_Level2  CltRiskStatus = 2 //安全
	CltRiskStatus_CltRiskStatus_Level3  CltRiskStatus = 3 //较安全
	CltRiskStatus_CltRiskStatus_Level4  CltRiskStatus = 4 //较低风险
	CltRiskStatus_CltRiskStatus_Level5  CltRiskStatus = 5 //中等风险
	CltRiskStatus_CltRiskStatus_Level6  CltRiskStatus = 6 //较高风险
	CltRiskStatus_CltRiskStatus_Level7  CltRiskStatus = 7 //预警
	CltRiskStatus_CltRiskStatus_Level8  CltRiskStatus = 8 //预警
	CltRiskStatus_CltRiskStatus_Level9  CltRiskStatus = 9 //预警
)

// Enum value maps for CltRiskStatus.
var (
	CltRiskStatus_name = map[int32]string{
		0: "CltRiskStatus_Unknown",
		1: "CltRiskStatus_Level1",
		2: "CltRiskStatus_Level2",
		3: "CltRiskStatus_Level3",
		4: "CltRiskStatus_Level4",
		5: "CltRiskStatus_Level5",
		6: "CltRiskStatus_Level6",
		7: "CltRiskStatus_Level7",
		8: "CltRiskStatus_Level8",
		9: "CltRiskStatus_Level9",
	}
	CltRiskStatus_value = map[string]int32{
		"CltRiskStatus_Unknown": 0,
		"CltRiskStatus_Level1":  1,
		"CltRiskStatus_Level2":  2,
		"CltRiskStatus_Level3":  3,
		"CltRiskStatus_Level4":  4,
		"CltRiskStatus_Level5":  5,
		"CltRiskStatus_Level6":  6,
		"CltRiskStatus_Level7":  7,
		"CltRiskStatus_Level8":  8,
		"CltRiskStatus_Level9":  9,
	}
)

func (x CltRiskStatus) Enum() *CltRiskStatus {
	p := new(CltRiskStatus)
	*p = x
	return p
}

func (x CltRiskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CltRiskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[18].Descriptor()
}

func (CltRiskStatus) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[18]
}

func (x CltRiskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CltRiskStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CltRiskStatus(num)
	return nil
}

// Deprecated: Use CltRiskStatus.Descriptor instead.
func (CltRiskStatus) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{18}
}

// 日内交易限制情况
type DTStatus int32

const (
	DTStatus_DTStatus_Unknown   DTStatus = 0 //未知
	DTStatus_DTStatus_Unlimited DTStatus = 1 //无限次(当前可以无限次日内交易，注意留意剩余日内交易购买力)
	DTStatus_DTStatus_EMCall    DTStatus = 2 //EM Call(当前状态不能新建仓位，需要补充资产净值至$25000以上，否则会被禁止新建仓位90天)
	DTStatus_DTStatus_DTCall    DTStatus = 3 //DT Call(当前状态有未补平的日内交易追缴金额（DTCall），需要在5个交易日内足额入金来补平 DTCall，否则会被禁止新建仓位，直到足额存入资金才会解禁)
)

// Enum value maps for DTStatus.
var (
	DTStatus_name = map[int32]string{
		0: "DTStatus_Unknown",
		1: "DTStatus_Unlimited",
		2: "DTStatus_EMCall",
		3: "DTStatus_DTCall",
	}
	DTStatus_value = map[string]int32{
		"DTStatus_Unknown":   0,
		"DTStatus_Unlimited": 1,
		"DTStatus_EMCall":    2,
		"DTStatus_DTCall":    3,
	}
)

func (x DTStatus) Enum() *DTStatus {
	p := new(DTStatus)
	*p = x
	return p
}

func (x DTStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_Trd_Common_proto_enumTypes[19].Descriptor()
}

func (DTStatus) Type() protoreflect.EnumType {
	return &file_trade_Trd_Common_proto_enumTypes[19]
}

func (x DTStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DTStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DTStatus(num)
	return nil
}

// Deprecated: Use DTStatus.Descriptor instead.
func (DTStatus) EnumDescriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{19}
}

// 账户现金信息，目前仅用于期货账户
type AccCashInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Currency         *int32                 `protobuf:"varint,1,opt,name=currency" json:"currency,omitempty"`                  // 货币类型，取值参考 Currency
	Cash             *float64               `protobuf:"fixed64,2,opt,name=cash" json:"cash,omitempty"`                         // 现金结余
	AvailableBalance *float64               `protobuf:"fixed64,3,opt,name=availableBalance" json:"availableBalance,omitempty"` // 现金可提金额
	NetCashPower     *float64               `protobuf:"fixed64,4,opt,name=netCashPower" json:"netCashPower,omitempty"`         // 现金购买力
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AccCashInfo) Reset() {
	*x = AccCashInfo{}
	mi := &file_trade_Trd_Common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccCashInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccCashInfo) ProtoMessage() {}

func (x *AccCashInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccCashInfo.ProtoReflect.Descriptor instead.
func (*AccCashInfo) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{0}
}

func (x *AccCashInfo) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *AccCashInfo) GetCash() float64 {
	if x != nil && x.Cash != nil {
		return *x.Cash
	}
	return 0
}

func (x *AccCashInfo) GetAvailableBalance() float64 {
	if x != nil && x.AvailableBalance != nil {
		return *x.AvailableBalance
	}
	return 0
}

func (x *AccCashInfo) GetNetCashPower() float64 {
	if x != nil && x.NetCashPower != nil {
		return *x.NetCashPower
	}
	return 0
}

// 分市场资产信息
type AccMarketInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrdMarket     *int32                 `protobuf:"varint,1,opt,name=trdMarket" json:"trdMarket,omitempty"` // 交易市场, 参见TrdMarket的枚举定义
	Assets        *float64               `protobuf:"fixed64,2,opt,name=assets" json:"assets,omitempty"`      // 分市场资产信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccMarketInfo) Reset() {
	*x = AccMarketInfo{}
	mi := &file_trade_Trd_Common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccMarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccMarketInfo) ProtoMessage() {}

func (x *AccMarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccMarketInfo.ProtoReflect.Descriptor instead.
func (*AccMarketInfo) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{1}
}

func (x *AccMarketInfo) GetTrdMarket() int32 {
	if x != nil && x.TrdMarket != nil {
		return *x.TrdMarket
	}
	return 0
}

func (x *AccMarketInfo) GetAssets() float64 {
	if x != nil && x.Assets != nil {
		return *x.Assets
	}
	return 0
}

// 交易协议公共参数头
type TrdHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrdEnv        *int32                 `protobuf:"varint,1,req,name=trdEnv" json:"trdEnv,omitempty"`       //交易环境, 参见TrdEnv的枚举定义
	AccID         *uint64                `protobuf:"varint,2,req,name=accID" json:"accID,omitempty"`         //业务账号, 业务账号与交易环境、市场权限需要匹配，否则会返回错误
	TrdMarket     *int32                 `protobuf:"varint,3,req,name=trdMarket" json:"trdMarket,omitempty"` //交易市场, 参见TrdMarket的枚举定义
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrdHeader) Reset() {
	*x = TrdHeader{}
	mi := &file_trade_Trd_Common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrdHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrdHeader) ProtoMessage() {}

func (x *TrdHeader) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrdHeader.ProtoReflect.Descriptor instead.
func (*TrdHeader) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{2}
}

func (x *TrdHeader) GetTrdEnv() int32 {
	if x != nil && x.TrdEnv != nil {
		return *x.TrdEnv
	}
	return 0
}

func (x *TrdHeader) GetAccID() uint64 {
	if x != nil && x.AccID != nil {
		return *x.AccID
	}
	return 0
}

func (x *TrdHeader) GetTrdMarket() int32 {
	if x != nil && x.TrdMarket != nil {
		return *x.TrdMarket
	}
	return 0
}

// 交易业务账户结构
type TrdAcc struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TrdEnv            *int32                 `protobuf:"varint,1,req,name=trdEnv" json:"trdEnv,omitempty"`                       //交易环境，参见TrdEnv的枚举定义
	AccID             *uint64                `protobuf:"varint,2,req,name=accID" json:"accID,omitempty"`                         //业务账号
	TrdMarketAuthList []int32                `protobuf:"varint,3,rep,name=trdMarketAuthList" json:"trdMarketAuthList,omitempty"` //业务账户支持的交易市场权限，即此账户能交易那些市场, 可拥有多个交易市场权限，目前仅单个，取值参见TrdMarket的枚举定义
	AccType           *int32                 `protobuf:"varint,4,opt,name=accType" json:"accType,omitempty"`                     //账户类型，取值见TrdAccType
	CardNum           *string                `protobuf:"bytes,5,opt,name=cardNum" json:"cardNum,omitempty"`                      //卡号
	SecurityFirm      *int32                 `protobuf:"varint,6,opt,name=securityFirm" json:"securityFirm,omitempty"`           //所属券商，取值见SecurityFirm
	SimAccType        *int32                 `protobuf:"varint,7,opt,name=simAccType" json:"simAccType,omitempty"`               //模拟交易账号类型，取值见SimAccType
	UniCardNum        *string                `protobuf:"bytes,8,opt,name=uniCardNum" json:"uniCardNum,omitempty"`                //所属综合账户卡号
	AccStatus         *int32                 `protobuf:"varint,9,opt,name=accStatus" json:"accStatus,omitempty"`                 //账号状态，取值见TrdAccStatus
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TrdAcc) Reset() {
	*x = TrdAcc{}
	mi := &file_trade_Trd_Common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrdAcc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrdAcc) ProtoMessage() {}

func (x *TrdAcc) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrdAcc.ProtoReflect.Descriptor instead.
func (*TrdAcc) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{3}
}

func (x *TrdAcc) GetTrdEnv() int32 {
	if x != nil && x.TrdEnv != nil {
		return *x.TrdEnv
	}
	return 0
}

func (x *TrdAcc) GetAccID() uint64 {
	if x != nil && x.AccID != nil {
		return *x.AccID
	}
	return 0
}

func (x *TrdAcc) GetTrdMarketAuthList() []int32 {
	if x != nil {
		return x.TrdMarketAuthList
	}
	return nil
}

func (x *TrdAcc) GetAccType() int32 {
	if x != nil && x.AccType != nil {
		return *x.AccType
	}
	return 0
}

func (x *TrdAcc) GetCardNum() string {
	if x != nil && x.CardNum != nil {
		return *x.CardNum
	}
	return ""
}

func (x *TrdAcc) GetSecurityFirm() int32 {
	if x != nil && x.SecurityFirm != nil {
		return *x.SecurityFirm
	}
	return 0
}

func (x *TrdAcc) GetSimAccType() int32 {
	if x != nil && x.SimAccType != nil {
		return *x.SimAccType
	}
	return 0
}

func (x *TrdAcc) GetUniCardNum() string {
	if x != nil && x.UniCardNum != nil {
		return *x.UniCardNum
	}
	return ""
}

func (x *TrdAcc) GetAccStatus() int32 {
	if x != nil && x.AccStatus != nil {
		return *x.AccStatus
	}
	return 0
}

// 账户资金结构
type Funds struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Power             *float64               `protobuf:"fixed64,1,req,name=power" json:"power,omitempty"`                          //最大购买力（做多），3位精度，下同。
	TotalAssets       *float64               `protobuf:"fixed64,2,req,name=totalAssets" json:"totalAssets,omitempty"`              //资产净值
	Cash              *float64               `protobuf:"fixed64,3,req,name=cash" json:"cash,omitempty"`                            //现金
	MarketVal         *float64               `protobuf:"fixed64,4,req,name=marketVal" json:"marketVal,omitempty"`                  //证券市值, 仅证券账户适用
	FrozenCash        *float64               `protobuf:"fixed64,5,req,name=frozenCash" json:"frozenCash,omitempty"`                //冻结资金
	DebtCash          *float64               `protobuf:"fixed64,6,req,name=debtCash" json:"debtCash,omitempty"`                    //计息金额
	AvlWithdrawalCash *float64               `protobuf:"fixed64,7,req,name=avlWithdrawalCash" json:"avlWithdrawalCash,omitempty"`  //现金可提，仅证券账户适用
	Currency          *int32                 `protobuf:"varint,8,opt,name=currency" json:"currency,omitempty"`                     //币种，本结构体资金相关的货币类型，取值参见 Currency，期货适用
	AvailableFunds    *float64               `protobuf:"fixed64,9,opt,name=availableFunds" json:"availableFunds,omitempty"`        //可用资金，期货适用
	UnrealizedPL      *float64               `protobuf:"fixed64,10,opt,name=unrealizedPL" json:"unrealizedPL,omitempty"`           //未实现盈亏，期货适用
	RealizedPL        *float64               `protobuf:"fixed64,11,opt,name=realizedPL" json:"realizedPL,omitempty"`               //已实现盈亏，期货适用
	RiskLevel         *int32                 `protobuf:"varint,12,opt,name=riskLevel" json:"riskLevel,omitempty"`                  //风控状态，参见 CltRiskLevel, 期货适用
	InitialMargin     *float64               `protobuf:"fixed64,13,opt,name=initialMargin" json:"initialMargin,omitempty"`         //初始保证金
	MaintenanceMargin *float64               `protobuf:"fixed64,14,opt,name=maintenanceMargin" json:"maintenanceMargin,omitempty"` //维持保证金
	CashInfoList      []*AccCashInfo         `protobuf:"bytes,15,rep,name=cashInfoList" json:"cashInfoList,omitempty"`             //分币种的现金信息，期货适用
	MaxPowerShort     *float64               `protobuf:"fixed64,16,opt,name=maxPowerShort" json:"maxPowerShort,omitempty"`         //卖空购买力
	NetCashPower      *float64               `protobuf:"fixed64,17,opt,name=netCashPower" json:"netCashPower,omitempty"`           //现金购买力
	LongMv            *float64               `protobuf:"fixed64,18,opt,name=longMv" json:"longMv,omitempty"`                       //多头市值
	ShortMv           *float64               `protobuf:"fixed64,19,opt,name=shortMv" json:"shortMv,omitempty"`                     //空头市值
	PendingAsset      *float64               `protobuf:"fixed64,20,opt,name=pendingAsset" json:"pendingAsset,omitempty"`           //在途资产
	MaxWithdrawal     *float64               `protobuf:"fixed64,21,opt,name=maxWithdrawal" json:"maxWithdrawal,omitempty"`         //融资可提，仅证券账户适用
	RiskStatus        *int32                 `protobuf:"varint,22,opt,name=riskStatus" json:"riskStatus,omitempty"`                //风险状态，参见 [CltRiskStatus]，证券账户适用，共分 9 个等级，LEVEL1是最安全，LEVEL9是最危险
	MarginCallMargin  *float64               `protobuf:"fixed64,23,opt,name=marginCallMargin" json:"marginCallMargin,omitempty"`   //	Margin Call 保证金
	IsPdt             *bool                  `protobuf:"varint,24,opt,name=isPdt" json:"isPdt,omitempty"`                          //是否PDT账户，仅富途证券（美国）账户适用
	PdtSeq            *string                `protobuf:"bytes,25,opt,name=pdtSeq" json:"pdtSeq,omitempty"`                         //剩余日内交易次数
	BeginningDTBP     *float64               `protobuf:"fixed64,26,opt,name=beginningDTBP" json:"beginningDTBP,omitempty"`         //初始日内交易购买力
	RemainingDTBP     *float64               `protobuf:"fixed64,27,opt,name=remainingDTBP" json:"remainingDTBP,omitempty"`         //剩余日内交易购买力
	DtCallAmount      *float64               `protobuf:"fixed64,28,opt,name=dtCallAmount" json:"dtCallAmount,omitempty"`           //日内交易待缴金额
	DtStatus          *int32                 `protobuf:"varint,29,opt,name=dtStatus" json:"dtStatus,omitempty"`                    //日内交易限制情况，取值见DTStatus
	SecuritiesAssets  *float64               `protobuf:"fixed64,30,opt,name=securitiesAssets" json:"securitiesAssets,omitempty"`   // 证券资产净值
	FundAssets        *float64               `protobuf:"fixed64,31,opt,name=fundAssets" json:"fundAssets,omitempty"`               // 基金资产净值
	BondAssets        *float64               `protobuf:"fixed64,32,opt,name=bondAssets" json:"bondAssets,omitempty"`               // 债券资产净值
	MarketInfoList    []*AccMarketInfo       `protobuf:"bytes,33,rep,name=marketInfoList" json:"marketInfoList,omitempty"`         //分市场资产信息
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Funds) Reset() {
	*x = Funds{}
	mi := &file_trade_Trd_Common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Funds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Funds) ProtoMessage() {}

func (x *Funds) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Funds.ProtoReflect.Descriptor instead.
func (*Funds) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{4}
}

func (x *Funds) GetPower() float64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *Funds) GetTotalAssets() float64 {
	if x != nil && x.TotalAssets != nil {
		return *x.TotalAssets
	}
	return 0
}

func (x *Funds) GetCash() float64 {
	if x != nil && x.Cash != nil {
		return *x.Cash
	}
	return 0
}

func (x *Funds) GetMarketVal() float64 {
	if x != nil && x.MarketVal != nil {
		return *x.MarketVal
	}
	return 0
}

func (x *Funds) GetFrozenCash() float64 {
	if x != nil && x.FrozenCash != nil {
		return *x.FrozenCash
	}
	return 0
}

func (x *Funds) GetDebtCash() float64 {
	if x != nil && x.DebtCash != nil {
		return *x.DebtCash
	}
	return 0
}

func (x *Funds) GetAvlWithdrawalCash() float64 {
	if x != nil && x.AvlWithdrawalCash != nil {
		return *x.AvlWithdrawalCash
	}
	return 0
}

func (x *Funds) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *Funds) GetAvailableFunds() float64 {
	if x != nil && x.AvailableFunds != nil {
		return *x.AvailableFunds
	}
	return 0
}

func (x *Funds) GetUnrealizedPL() float64 {
	if x != nil && x.UnrealizedPL != nil {
		return *x.UnrealizedPL
	}
	return 0
}

func (x *Funds) GetRealizedPL() float64 {
	if x != nil && x.RealizedPL != nil {
		return *x.RealizedPL
	}
	return 0
}

func (x *Funds) GetRiskLevel() int32 {
	if x != nil && x.RiskLevel != nil {
		return *x.RiskLevel
	}
	return 0
}

func (x *Funds) GetInitialMargin() float64 {
	if x != nil && x.InitialMargin != nil {
		return *x.InitialMargin
	}
	return 0
}

func (x *Funds) GetMaintenanceMargin() float64 {
	if x != nil && x.MaintenanceMargin != nil {
		return *x.MaintenanceMargin
	}
	return 0
}

func (x *Funds) GetCashInfoList() []*AccCashInfo {
	if x != nil {
		return x.CashInfoList
	}
	return nil
}

func (x *Funds) GetMaxPowerShort() float64 {
	if x != nil && x.MaxPowerShort != nil {
		return *x.MaxPowerShort
	}
	return 0
}

func (x *Funds) GetNetCashPower() float64 {
	if x != nil && x.NetCashPower != nil {
		return *x.NetCashPower
	}
	return 0
}

func (x *Funds) GetLongMv() float64 {
	if x != nil && x.LongMv != nil {
		return *x.LongMv
	}
	return 0
}

func (x *Funds) GetShortMv() float64 {
	if x != nil && x.ShortMv != nil {
		return *x.ShortMv
	}
	return 0
}

func (x *Funds) GetPendingAsset() float64 {
	if x != nil && x.PendingAsset != nil {
		return *x.PendingAsset
	}
	return 0
}

func (x *Funds) GetMaxWithdrawal() float64 {
	if x != nil && x.MaxWithdrawal != nil {
		return *x.MaxWithdrawal
	}
	return 0
}

func (x *Funds) GetRiskStatus() int32 {
	if x != nil && x.RiskStatus != nil {
		return *x.RiskStatus
	}
	return 0
}

func (x *Funds) GetMarginCallMargin() float64 {
	if x != nil && x.MarginCallMargin != nil {
		return *x.MarginCallMargin
	}
	return 0
}

func (x *Funds) GetIsPdt() bool {
	if x != nil && x.IsPdt != nil {
		return *x.IsPdt
	}
	return false
}

func (x *Funds) GetPdtSeq() string {
	if x != nil && x.PdtSeq != nil {
		return *x.PdtSeq
	}
	return ""
}

func (x *Funds) GetBeginningDTBP() float64 {
	if x != nil && x.BeginningDTBP != nil {
		return *x.BeginningDTBP
	}
	return 0
}

func (x *Funds) GetRemainingDTBP() float64 {
	if x != nil && x.RemainingDTBP != nil {
		return *x.RemainingDTBP
	}
	return 0
}

func (x *Funds) GetDtCallAmount() float64 {
	if x != nil && x.DtCallAmount != nil {
		return *x.DtCallAmount
	}
	return 0
}

func (x *Funds) GetDtStatus() int32 {
	if x != nil && x.DtStatus != nil {
		return *x.DtStatus
	}
	return 0
}

func (x *Funds) GetSecuritiesAssets() float64 {
	if x != nil && x.SecuritiesAssets != nil {
		return *x.SecuritiesAssets
	}
	return 0
}

func (x *Funds) GetFundAssets() float64 {
	if x != nil && x.FundAssets != nil {
		return *x.FundAssets
	}
	return 0
}

func (x *Funds) GetBondAssets() float64 {
	if x != nil && x.BondAssets != nil {
		return *x.BondAssets
	}
	return 0
}

func (x *Funds) GetMarketInfoList() []*AccMarketInfo {
	if x != nil {
		return x.MarketInfoList
	}
	return nil
}

// 账户持仓结构
type Position struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	PositionID   *uint64                `protobuf:"varint,1,req,name=positionID" json:"positionID,omitempty"`     //持仓ID，一条持仓的唯一标识
	PositionSide *int32                 `protobuf:"varint,2,req,name=positionSide" json:"positionSide,omitempty"` //持仓方向，参见PositionSide的枚举定义
	Code         *string                `protobuf:"bytes,3,req,name=code" json:"code,omitempty"`                  //代码
	Name         *string                `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`                  //名称
	Qty          *float64               `protobuf:"fixed64,5,req,name=qty" json:"qty,omitempty"`                  //持有数量，2位精度，期权单位是"张"，下同
	CanSellQty   *float64               `protobuf:"fixed64,6,req,name=canSellQty" json:"canSellQty,omitempty"`    //可卖数量
	Price        *float64               `protobuf:"fixed64,7,req,name=price" json:"price,omitempty"`              //市价，3位精度，期货为2位精度
	CostPrice    *float64               `protobuf:"fixed64,8,opt,name=costPrice" json:"costPrice,omitempty"`      //成本价，无精度限制，期货为2位精度，如果没传，代表此时此值无效（已废弃，请使用 dilutedCostPrice 或 averageCostPrice）
	Val          *float64               `protobuf:"fixed64,9,req,name=val" json:"val,omitempty"`                  //市值，3位精度, 期货此字段值为0
	PlVal        *float64               `protobuf:"fixed64,10,req,name=plVal" json:"plVal,omitempty"`             //盈亏金额，3位精度，期货为2位精度
	PlRatio      *float64               `protobuf:"fixed64,11,opt,name=plRatio" json:"plRatio,omitempty"`         //摊薄成本价的盈亏百分比(如plRatio等于8.8代表涨8.8%)，无精度限制，如果没传，代表此时此值无效
	SecMarket    *int32                 `protobuf:"varint,12,opt,name=secMarket" json:"secMarket,omitempty"`      //证券所属市场，参见TrdSecMarket的枚举定义
	// 以下是此持仓今日统计
	TdPlVal          *float64 `protobuf:"fixed64,21,opt,name=td_plVal,json=tdPlVal" json:"td_plVal,omitempty"`       //今日盈亏金额，3位精度，下同, 期货为2位精度
	TdTrdVal         *float64 `protobuf:"fixed64,22,opt,name=td_trdVal,json=tdTrdVal" json:"td_trdVal,omitempty"`    //今日交易额，期货不适用
	TdBuyVal         *float64 `protobuf:"fixed64,23,opt,name=td_buyVal,json=tdBuyVal" json:"td_buyVal,omitempty"`    //今日买入总额，期货不适用
	TdBuyQty         *float64 `protobuf:"fixed64,24,opt,name=td_buyQty,json=tdBuyQty" json:"td_buyQty,omitempty"`    //今日买入总量，期货不适用
	TdSellVal        *float64 `protobuf:"fixed64,25,opt,name=td_sellVal,json=tdSellVal" json:"td_sellVal,omitempty"` //今日卖出总额，期货不适用
	TdSellQty        *float64 `protobuf:"fixed64,26,opt,name=td_sellQty,json=tdSellQty" json:"td_sellQty,omitempty"` //今日卖出总量，期货不适用
	UnrealizedPL     *float64 `protobuf:"fixed64,28,opt,name=unrealizedPL" json:"unrealizedPL,omitempty"`            //未实现盈亏，期货适用
	RealizedPL       *float64 `protobuf:"fixed64,29,opt,name=realizedPL" json:"realizedPL,omitempty"`                //已实现盈亏，期货适用
	Currency         *int32   `protobuf:"varint,30,opt,name=currency" json:"currency,omitempty"`                     // 货币类型，取值参考 Currency
	TrdMarket        *int32   `protobuf:"varint,31,opt,name=trdMarket" json:"trdMarket,omitempty"`                   //交易市场, 参见TrdMarket的枚举定义
	DilutedCostPrice *float64 `protobuf:"fixed64,32,opt,name=dilutedCostPrice" json:"dilutedCostPrice,omitempty"`    //摊薄成本价，仅支持证券账户使用
	AverageCostPrice *float64 `protobuf:"fixed64,33,opt,name=averageCostPrice" json:"averageCostPrice,omitempty"`    //平均成本价，模拟交易证券账户不适用
	AveragePlRatio   *float64 `protobuf:"fixed64,34,opt,name=averagePlRatio" json:"averagePlRatio,omitempty"`        //平均成本价的盈亏百分比(如plRatio等于8.8代表涨8.8%)，无精度限制，如果没传，代表此时此值无效
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_trade_Trd_Common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{5}
}

func (x *Position) GetPositionID() uint64 {
	if x != nil && x.PositionID != nil {
		return *x.PositionID
	}
	return 0
}

func (x *Position) GetPositionSide() int32 {
	if x != nil && x.PositionSide != nil {
		return *x.PositionSide
	}
	return 0
}

func (x *Position) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Position) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Position) GetQty() float64 {
	if x != nil && x.Qty != nil {
		return *x.Qty
	}
	return 0
}

func (x *Position) GetCanSellQty() float64 {
	if x != nil && x.CanSellQty != nil {
		return *x.CanSellQty
	}
	return 0
}

func (x *Position) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Position) GetCostPrice() float64 {
	if x != nil && x.CostPrice != nil {
		return *x.CostPrice
	}
	return 0
}

func (x *Position) GetVal() float64 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

func (x *Position) GetPlVal() float64 {
	if x != nil && x.PlVal != nil {
		return *x.PlVal
	}
	return 0
}

func (x *Position) GetPlRatio() float64 {
	if x != nil && x.PlRatio != nil {
		return *x.PlRatio
	}
	return 0
}

func (x *Position) GetSecMarket() int32 {
	if x != nil && x.SecMarket != nil {
		return *x.SecMarket
	}
	return 0
}

func (x *Position) GetTdPlVal() float64 {
	if x != nil && x.TdPlVal != nil {
		return *x.TdPlVal
	}
	return 0
}

func (x *Position) GetTdTrdVal() float64 {
	if x != nil && x.TdTrdVal != nil {
		return *x.TdTrdVal
	}
	return 0
}

func (x *Position) GetTdBuyVal() float64 {
	if x != nil && x.TdBuyVal != nil {
		return *x.TdBuyVal
	}
	return 0
}

func (x *Position) GetTdBuyQty() float64 {
	if x != nil && x.TdBuyQty != nil {
		return *x.TdBuyQty
	}
	return 0
}

func (x *Position) GetTdSellVal() float64 {
	if x != nil && x.TdSellVal != nil {
		return *x.TdSellVal
	}
	return 0
}

func (x *Position) GetTdSellQty() float64 {
	if x != nil && x.TdSellQty != nil {
		return *x.TdSellQty
	}
	return 0
}

func (x *Position) GetUnrealizedPL() float64 {
	if x != nil && x.UnrealizedPL != nil {
		return *x.UnrealizedPL
	}
	return 0
}

func (x *Position) GetRealizedPL() float64 {
	if x != nil && x.RealizedPL != nil {
		return *x.RealizedPL
	}
	return 0
}

func (x *Position) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *Position) GetTrdMarket() int32 {
	if x != nil && x.TrdMarket != nil {
		return *x.TrdMarket
	}
	return 0
}

func (x *Position) GetDilutedCostPrice() float64 {
	if x != nil && x.DilutedCostPrice != nil {
		return *x.DilutedCostPrice
	}
	return 0
}

func (x *Position) GetAverageCostPrice() float64 {
	if x != nil && x.AverageCostPrice != nil {
		return *x.AverageCostPrice
	}
	return 0
}

func (x *Position) GetAveragePlRatio() float64 {
	if x != nil && x.AveragePlRatio != nil {
		return *x.AveragePlRatio
	}
	return 0
}

// 订单结构
type Order struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TrdSide         *int32                 `protobuf:"varint,1,req,name=trdSide" json:"trdSide,omitempty"`                   //交易方向, 参见TrdSide的枚举定义
	OrderType       *int32                 `protobuf:"varint,2,req,name=orderType" json:"orderType,omitempty"`               //订单类型, 参见OrderType的枚举定义
	OrderStatus     *int32                 `protobuf:"varint,3,req,name=orderStatus" json:"orderStatus,omitempty"`           //订单状态, 参见OrderStatus的枚举定义
	OrderID         *uint64                `protobuf:"varint,4,req,name=orderID" json:"orderID,omitempty"`                   //订单号
	OrderIDEx       *string                `protobuf:"bytes,5,req,name=orderIDEx" json:"orderIDEx,omitempty"`                //扩展订单号(仅查问题时备用)
	Code            *string                `protobuf:"bytes,6,req,name=code" json:"code,omitempty"`                          //代码
	Name            *string                `protobuf:"bytes,7,req,name=name" json:"name,omitempty"`                          //名称
	Qty             *float64               `protobuf:"fixed64,8,req,name=qty" json:"qty,omitempty"`                          //订单数量，2位精度，期权单位是"张"
	Price           *float64               `protobuf:"fixed64,9,opt,name=price" json:"price,omitempty"`                      //订单价格，3位精度
	CreateTime      *string                `protobuf:"bytes,10,req,name=createTime" json:"createTime,omitempty"`             //创建时间，严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传
	UpdateTime      *string                `protobuf:"bytes,11,req,name=updateTime" json:"updateTime,omitempty"`             //最后更新时间，严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传
	FillQty         *float64               `protobuf:"fixed64,12,opt,name=fillQty" json:"fillQty,omitempty"`                 //成交数量，2位精度，期权单位是"张"
	FillAvgPrice    *float64               `protobuf:"fixed64,13,opt,name=fillAvgPrice" json:"fillAvgPrice,omitempty"`       //成交均价，无精度限制
	LastErrMsg      *string                `protobuf:"bytes,14,opt,name=lastErrMsg" json:"lastErrMsg,omitempty"`             //最后的错误描述，如果有错误，会有此描述最后一次错误的原因，无错误为空
	SecMarket       *int32                 `protobuf:"varint,15,opt,name=secMarket" json:"secMarket,omitempty"`              //证券所属市场，参见TrdSecMarket的枚举定义
	CreateTimestamp *float64               `protobuf:"fixed64,16,opt,name=createTimestamp" json:"createTimestamp,omitempty"` //创建时间戳
	UpdateTimestamp *float64               `protobuf:"fixed64,17,opt,name=updateTimestamp" json:"updateTimestamp,omitempty"` //最后更新时间戳
	Remark          *string                `protobuf:"bytes,18,opt,name=remark" json:"remark,omitempty"`                     //用户备注字符串，最大长度64字节
	TimeInForce     *int32                 `protobuf:"varint,19,opt,name=timeInForce" json:"timeInForce,omitempty"`          //订单期限，参考 TimeInForce 类的定义
	FillOutsideRTH  *bool                  `protobuf:"varint,20,opt,name=fillOutsideRTH" json:"fillOutsideRTH,omitempty"`    //是否允许美股订单盘前盘后成交
	AuxPrice        *float64               `protobuf:"fixed64,21,opt,name=auxPrice" json:"auxPrice,omitempty"`               //触发价格
	TrailType       *int32                 `protobuf:"varint,22,opt,name=trailType" json:"trailType,omitempty"`              //跟踪类型, 参见Trd_Common.TrailType的枚举定义
	TrailValue      *float64               `protobuf:"fixed64,23,opt,name=trailValue" json:"trailValue,omitempty"`           //跟踪金额/百分比
	TrailSpread     *float64               `protobuf:"fixed64,24,opt,name=trailSpread" json:"trailSpread,omitempty"`         //指定价差
	Currency        *int32                 `protobuf:"varint,25,opt,name=currency" json:"currency,omitempty"`                // 货币类型，取值参考 Currency
	TrdMarket       *int32                 `protobuf:"varint,26,opt,name=trdMarket" json:"trdMarket,omitempty"`              //交易市场, 参见TrdMarket的枚举定义
	Session         *int32                 `protobuf:"varint,27,opt,name=session" json:"session,omitempty"`                  //美股订单时段, 参见Common.Session的枚举定义
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_trade_Trd_Common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{6}
}

func (x *Order) GetTrdSide() int32 {
	if x != nil && x.TrdSide != nil {
		return *x.TrdSide
	}
	return 0
}

func (x *Order) GetOrderType() int32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *Order) GetOrderStatus() int32 {
	if x != nil && x.OrderStatus != nil {
		return *x.OrderStatus
	}
	return 0
}

func (x *Order) GetOrderID() uint64 {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return 0
}

func (x *Order) GetOrderIDEx() string {
	if x != nil && x.OrderIDEx != nil {
		return *x.OrderIDEx
	}
	return ""
}

func (x *Order) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Order) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Order) GetQty() float64 {
	if x != nil && x.Qty != nil {
		return *x.Qty
	}
	return 0
}

func (x *Order) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Order) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *Order) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *Order) GetFillQty() float64 {
	if x != nil && x.FillQty != nil {
		return *x.FillQty
	}
	return 0
}

func (x *Order) GetFillAvgPrice() float64 {
	if x != nil && x.FillAvgPrice != nil {
		return *x.FillAvgPrice
	}
	return 0
}

func (x *Order) GetLastErrMsg() string {
	if x != nil && x.LastErrMsg != nil {
		return *x.LastErrMsg
	}
	return ""
}

func (x *Order) GetSecMarket() int32 {
	if x != nil && x.SecMarket != nil {
		return *x.SecMarket
	}
	return 0
}

func (x *Order) GetCreateTimestamp() float64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

func (x *Order) GetUpdateTimestamp() float64 {
	if x != nil && x.UpdateTimestamp != nil {
		return *x.UpdateTimestamp
	}
	return 0
}

func (x *Order) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *Order) GetTimeInForce() int32 {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return 0
}

func (x *Order) GetFillOutsideRTH() bool {
	if x != nil && x.FillOutsideRTH != nil {
		return *x.FillOutsideRTH
	}
	return false
}

func (x *Order) GetAuxPrice() float64 {
	if x != nil && x.AuxPrice != nil {
		return *x.AuxPrice
	}
	return 0
}

func (x *Order) GetTrailType() int32 {
	if x != nil && x.TrailType != nil {
		return *x.TrailType
	}
	return 0
}

func (x *Order) GetTrailValue() float64 {
	if x != nil && x.TrailValue != nil {
		return *x.TrailValue
	}
	return 0
}

func (x *Order) GetTrailSpread() float64 {
	if x != nil && x.TrailSpread != nil {
		return *x.TrailSpread
	}
	return 0
}

func (x *Order) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *Order) GetTrdMarket() int32 {
	if x != nil && x.TrdMarket != nil {
		return *x.TrdMarket
	}
	return 0
}

func (x *Order) GetSession() int32 {
	if x != nil && x.Session != nil {
		return *x.Session
	}
	return 0
}

type OrderFeeItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         *string                `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`   //费用名字
	Value         *float64               `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"` //费用金额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderFeeItem) Reset() {
	*x = OrderFeeItem{}
	mi := &file_trade_Trd_Common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderFeeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFeeItem) ProtoMessage() {}

func (x *OrderFeeItem) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFeeItem.ProtoReflect.Descriptor instead.
func (*OrderFeeItem) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{7}
}

func (x *OrderFeeItem) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *OrderFeeItem) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type OrderFee struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderIDEx     *string                `protobuf:"bytes,1,req,name=orderIDEx" json:"orderIDEx,omitempty"`   //扩展订单号
	FeeAmount     *float64               `protobuf:"fixed64,2,opt,name=feeAmount" json:"feeAmount,omitempty"` //费用总额
	FeeList       []*OrderFeeItem        `protobuf:"bytes,3,rep,name=feeList" json:"feeList,omitempty"`       //费用明细
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderFee) Reset() {
	*x = OrderFee{}
	mi := &file_trade_Trd_Common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFee) ProtoMessage() {}

func (x *OrderFee) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFee.ProtoReflect.Descriptor instead.
func (*OrderFee) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{8}
}

func (x *OrderFee) GetOrderIDEx() string {
	if x != nil && x.OrderIDEx != nil {
		return *x.OrderIDEx
	}
	return ""
}

func (x *OrderFee) GetFeeAmount() float64 {
	if x != nil && x.FeeAmount != nil {
		return *x.FeeAmount
	}
	return 0
}

func (x *OrderFee) GetFeeList() []*OrderFeeItem {
	if x != nil {
		return x.FeeList
	}
	return nil
}

// 成交结构
type OrderFill struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TrdSide           *int32                 `protobuf:"varint,1,req,name=trdSide" json:"trdSide,omitempty"`                     //交易方向, 参见TrdSide的枚举定义
	FillID            *uint64                `protobuf:"varint,2,req,name=fillID" json:"fillID,omitempty"`                       //成交号
	FillIDEx          *string                `protobuf:"bytes,3,req,name=fillIDEx" json:"fillIDEx,omitempty"`                    //扩展成交号(仅查问题时备用)
	OrderID           *uint64                `protobuf:"varint,4,opt,name=orderID" json:"orderID,omitempty"`                     //订单号
	OrderIDEx         *string                `protobuf:"bytes,5,opt,name=orderIDEx" json:"orderIDEx,omitempty"`                  //扩展订单号(仅查问题时备用)
	Code              *string                `protobuf:"bytes,6,req,name=code" json:"code,omitempty"`                            //代码
	Name              *string                `protobuf:"bytes,7,req,name=name" json:"name,omitempty"`                            //名称
	Qty               *float64               `protobuf:"fixed64,8,req,name=qty" json:"qty,omitempty"`                            //成交数量，2位精度，期权单位是"张"
	Price             *float64               `protobuf:"fixed64,9,req,name=price" json:"price,omitempty"`                        //成交价格，3位精度
	CreateTime        *string                `protobuf:"bytes,10,req,name=createTime" json:"createTime,omitempty"`               //创建时间（成交时间），严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传
	CounterBrokerID   *int32                 `protobuf:"varint,11,opt,name=counterBrokerID" json:"counterBrokerID,omitempty"`    //对手经纪号，港股有效
	CounterBrokerName *string                `protobuf:"bytes,12,opt,name=counterBrokerName" json:"counterBrokerName,omitempty"` //对手经纪名称，港股有效
	SecMarket         *int32                 `protobuf:"varint,13,opt,name=secMarket" json:"secMarket,omitempty"`                //证券所属市场，参见TrdSecMarket的枚举定义
	CreateTimestamp   *float64               `protobuf:"fixed64,14,opt,name=createTimestamp" json:"createTimestamp,omitempty"`   //创建时间戳
	UpdateTimestamp   *float64               `protobuf:"fixed64,15,opt,name=updateTimestamp" json:"updateTimestamp,omitempty"`   //最后更新时间戳
	Status            *int32                 `protobuf:"varint,16,opt,name=status" json:"status,omitempty"`                      //成交状态, 参见OrderFillStatus的枚举定义
	TrdMarket         *int32                 `protobuf:"varint,17,opt,name=trdMarket" json:"trdMarket,omitempty"`                //交易市场, 参见TrdMarket的枚举定义
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OrderFill) Reset() {
	*x = OrderFill{}
	mi := &file_trade_Trd_Common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFill) ProtoMessage() {}

func (x *OrderFill) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFill.ProtoReflect.Descriptor instead.
func (*OrderFill) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{9}
}

func (x *OrderFill) GetTrdSide() int32 {
	if x != nil && x.TrdSide != nil {
		return *x.TrdSide
	}
	return 0
}

func (x *OrderFill) GetFillID() uint64 {
	if x != nil && x.FillID != nil {
		return *x.FillID
	}
	return 0
}

func (x *OrderFill) GetFillIDEx() string {
	if x != nil && x.FillIDEx != nil {
		return *x.FillIDEx
	}
	return ""
}

func (x *OrderFill) GetOrderID() uint64 {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return 0
}

func (x *OrderFill) GetOrderIDEx() string {
	if x != nil && x.OrderIDEx != nil {
		return *x.OrderIDEx
	}
	return ""
}

func (x *OrderFill) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *OrderFill) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OrderFill) GetQty() float64 {
	if x != nil && x.Qty != nil {
		return *x.Qty
	}
	return 0
}

func (x *OrderFill) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *OrderFill) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *OrderFill) GetCounterBrokerID() int32 {
	if x != nil && x.CounterBrokerID != nil {
		return *x.CounterBrokerID
	}
	return 0
}

func (x *OrderFill) GetCounterBrokerName() string {
	if x != nil && x.CounterBrokerName != nil {
		return *x.CounterBrokerName
	}
	return ""
}

func (x *OrderFill) GetSecMarket() int32 {
	if x != nil && x.SecMarket != nil {
		return *x.SecMarket
	}
	return 0
}

func (x *OrderFill) GetCreateTimestamp() float64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

func (x *OrderFill) GetUpdateTimestamp() float64 {
	if x != nil && x.UpdateTimestamp != nil {
		return *x.UpdateTimestamp
	}
	return 0
}

func (x *OrderFill) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *OrderFill) GetTrdMarket() int32 {
	if x != nil && x.TrdMarket != nil {
		return *x.TrdMarket
	}
	return 0
}

// 最大可交易数量
type MaxTrdQtys struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 因目前服务器实现的问题，卖空需要先卖掉持仓才能再卖空，是分开两步卖的，买回来同样是逆向两步；而看多的买是可以现金加融资一起一步买的，请注意这个差异
	MaxCashBuy          *float64 `protobuf:"fixed64,1,req,name=maxCashBuy" json:"maxCashBuy,omitempty"`                   //不使用融资，仅自己的现金最大可买整手股数，期货此字段值为0
	MaxCashAndMarginBuy *float64 `protobuf:"fixed64,2,opt,name=maxCashAndMarginBuy" json:"maxCashAndMarginBuy,omitempty"` //使用融资，自己的现金 + 融资资金总共的最大可买整手股数，期货不适用
	MaxPositionSell     *float64 `protobuf:"fixed64,3,req,name=maxPositionSell" json:"maxPositionSell,omitempty"`         //不使用融券(卖空)，仅自己的持仓最大可卖整手股数
	MaxSellShort        *float64 `protobuf:"fixed64,4,opt,name=maxSellShort" json:"maxSellShort,omitempty"`               //使用融券(卖空)，最大可卖空整手股数，不包括多仓，期货不适用
	MaxBuyBack          *float64 `protobuf:"fixed64,5,opt,name=maxBuyBack" json:"maxBuyBack,omitempty"`                   //卖空后，需要买回的最大整手股数。因为卖空后，必须先买回已卖空的股数，还掉股票，才能再继续买多。期货不适用
	LongRequiredIM      *float64 `protobuf:"fixed64,6,opt,name=longRequiredIM" json:"longRequiredIM,omitempty"`           //开多仓每张合约初始保证金。当前仅期货和期权适用（最低 FutuOpenD 版本要求：5.0.1310）
	ShortRequiredIM     *float64 `protobuf:"fixed64,7,opt,name=shortRequiredIM" json:"shortRequiredIM,omitempty"`         //开空仓每张合约初始保证金。当前仅期货和期权适用（最低 FutuOpenD 版本要求：5.0.1310）
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MaxTrdQtys) Reset() {
	*x = MaxTrdQtys{}
	mi := &file_trade_Trd_Common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaxTrdQtys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxTrdQtys) ProtoMessage() {}

func (x *MaxTrdQtys) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxTrdQtys.ProtoReflect.Descriptor instead.
func (*MaxTrdQtys) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{10}
}

func (x *MaxTrdQtys) GetMaxCashBuy() float64 {
	if x != nil && x.MaxCashBuy != nil {
		return *x.MaxCashBuy
	}
	return 0
}

func (x *MaxTrdQtys) GetMaxCashAndMarginBuy() float64 {
	if x != nil && x.MaxCashAndMarginBuy != nil {
		return *x.MaxCashAndMarginBuy
	}
	return 0
}

func (x *MaxTrdQtys) GetMaxPositionSell() float64 {
	if x != nil && x.MaxPositionSell != nil {
		return *x.MaxPositionSell
	}
	return 0
}

func (x *MaxTrdQtys) GetMaxSellShort() float64 {
	if x != nil && x.MaxSellShort != nil {
		return *x.MaxSellShort
	}
	return 0
}

func (x *MaxTrdQtys) GetMaxBuyBack() float64 {
	if x != nil && x.MaxBuyBack != nil {
		return *x.MaxBuyBack
	}
	return 0
}

func (x *MaxTrdQtys) GetLongRequiredIM() float64 {
	if x != nil && x.LongRequiredIM != nil {
		return *x.LongRequiredIM
	}
	return 0
}

func (x *MaxTrdQtys) GetShortRequiredIM() float64 {
	if x != nil && x.ShortRequiredIM != nil {
		return *x.ShortRequiredIM
	}
	return 0
}

// 过滤条件，条件组合是"与"不是"或"，用于获取订单、成交、持仓等时二次过滤
type TrdFilterConditions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CodeList      []string               `protobuf:"bytes,1,rep,name=codeList" json:"codeList,omitempty"`           //代码过滤，只返回包含这些代码的数据，没传不过滤
	IdList        []uint64               `protobuf:"varint,2,rep,name=idList" json:"idList,omitempty"`              //ID主键过滤，只返回包含这些ID的数据，没传不过滤，订单是orderID、成交是fillID、持仓是positionID
	BeginTime     *string                `protobuf:"bytes,3,opt,name=beginTime" json:"beginTime,omitempty"`         //开始时间，严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传，对持仓无效，拉历史数据必须填
	EndTime       *string                `protobuf:"bytes,4,opt,name=endTime" json:"endTime,omitempty"`             //结束时间，严格按YYYY-MM-DD HH:MM:SS或YYYY-MM-DD HH:MM:SS.MS格式传，对持仓无效，拉历史数据必须填
	OrderIDExList []string               `protobuf:"bytes,5,rep,name=orderIDExList" json:"orderIDExList,omitempty"` // 服务器订单ID，可以用来替代orderID，二选一
	FilterMarket  *int32                 `protobuf:"varint,6,opt,name=filterMarket" json:"filterMarket,omitempty"`  //指定交易市场, 参见TrdMarket的枚举定义
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrdFilterConditions) Reset() {
	*x = TrdFilterConditions{}
	mi := &file_trade_Trd_Common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrdFilterConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrdFilterConditions) ProtoMessage() {}

func (x *TrdFilterConditions) ProtoReflect() protoreflect.Message {
	mi := &file_trade_Trd_Common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrdFilterConditions.ProtoReflect.Descriptor instead.
func (*TrdFilterConditions) Descriptor() ([]byte, []int) {
	return file_trade_Trd_Common_proto_rawDescGZIP(), []int{11}
}

func (x *TrdFilterConditions) GetCodeList() []string {
	if x != nil {
		return x.CodeList
	}
	return nil
}

func (x *TrdFilterConditions) GetIdList() []uint64 {
	if x != nil {
		return x.IdList
	}
	return nil
}

func (x *TrdFilterConditions) GetBeginTime() string {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return ""
}

func (x *TrdFilterConditions) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *TrdFilterConditions) GetOrderIDExList() []string {
	if x != nil {
		return x.OrderIDExList
	}
	return nil
}

func (x *TrdFilterConditions) GetFilterMarket() int32 {
	if x != nil && x.FilterMarket != nil {
		return *x.FilterMarket
	}
	return 0
}

var File_trade_Trd_Common_proto protoreflect.FileDescriptor

const file_trade_Trd_Common_proto_rawDesc = "" +
	"\n" +
	"\x16trade/Trd_Common.proto\x12\n" +
	"Trd_Common\x1a\x13common/Common.proto\"\x8d\x01\n" +
	"\vAccCashInfo\x12\x1a\n" +
	"\bcurrency\x18\x01 \x01(\x05R\bcurrency\x12\x12\n" +
	"\x04cash\x18\x02 \x01(\x01R\x04cash\x12*\n" +
	"\x10availableBalance\x18\x03 \x01(\x01R\x10availableBalance\x12\"\n" +
	"\fnetCashPower\x18\x04 \x01(\x01R\fnetCashPower\"E\n" +
	"\rAccMarketInfo\x12\x1c\n" +
	"\ttrdMarket\x18\x01 \x01(\x05R\ttrdMarket\x12\x16\n" +
	"\x06assets\x18\x02 \x01(\x01R\x06assets\"W\n" +
	"\tTrdHeader\x12\x16\n" +
	"\x06trdEnv\x18\x01 \x02(\x05R\x06trdEnv\x12\x14\n" +
	"\x05accID\x18\x02 \x02(\x04R\x05accID\x12\x1c\n" +
	"\ttrdMarket\x18\x03 \x02(\x05R\ttrdMarket\"\x9a\x02\n" +
	"\x06TrdAcc\x12\x16\n" +
	"\x06trdEnv\x18\x01 \x02(\x05R\x06trdEnv\x12\x14\n" +
	"\x05accID\x18\x02 \x02(\x04R\x05accID\x12,\n" +
	"\x11trdMarketAuthList\x18\x03 \x03(\x05R\x11trdMarketAuthList\x12\x18\n" +
	"\aaccType\x18\x04 \x01(\x05R\aaccType\x12\x18\n" +
	"\acardNum\x18\x05 \x01(\tR\acardNum\x12\"\n" +
	"\fsecurityFirm\x18\x06 \x01(\x05R\fsecurityFirm\x12\x1e\n" +
	"\n" +
	"simAccType\x18\a \x01(\x05R\n" +
	"simAccType\x12\x1e\n" +
	"\n" +
	"uniCardNum\x18\b \x01(\tR\n" +
	"uniCardNum\x12\x1c\n" +
	"\taccStatus\x18\t \x01(\x05R\taccStatus\"\x8d\t\n" +
	"\x05Funds\x12\x14\n" +
	"\x05power\x18\x01 \x02(\x01R\x05power\x12 \n" +
	"\vtotalAssets\x18\x02 \x02(\x01R\vtotalAssets\x12\x12\n" +
	"\x04cash\x18\x03 \x02(\x01R\x04cash\x12\x1c\n" +
	"\tmarketVal\x18\x04 \x02(\x01R\tmarketVal\x12\x1e\n" +
	"\n" +
	"frozenCash\x18\x05 \x02(\x01R\n" +
	"frozenCash\x12\x1a\n" +
	"\bdebtCash\x18\x06 \x02(\x01R\bdebtCash\x12,\n" +
	"\x11avlWithdrawalCash\x18\a \x02(\x01R\x11avlWithdrawalCash\x12\x1a\n" +
	"\bcurrency\x18\b \x01(\x05R\bcurrency\x12&\n" +
	"\x0eavailableFunds\x18\t \x01(\x01R\x0eavailableFunds\x12\"\n" +
	"\funrealizedPL\x18\n" +
	" \x01(\x01R\funrealizedPL\x12\x1e\n" +
	"\n" +
	"realizedPL\x18\v \x01(\x01R\n" +
	"realizedPL\x12\x1c\n" +
	"\triskLevel\x18\f \x01(\x05R\triskLevel\x12$\n" +
	"\rinitialMargin\x18\r \x01(\x01R\rinitialMargin\x12,\n" +
	"\x11maintenanceMargin\x18\x0e \x01(\x01R\x11maintenanceMargin\x12;\n" +
	"\fcashInfoList\x18\x0f \x03(\v2\x17.Trd_Common.AccCashInfoR\fcashInfoList\x12$\n" +
	"\rmaxPowerShort\x18\x10 \x01(\x01R\rmaxPowerShort\x12\"\n" +
	"\fnetCashPower\x18\x11 \x01(\x01R\fnetCashPower\x12\x16\n" +
	"\x06longMv\x18\x12 \x01(\x01R\x06longMv\x12\x18\n" +
	"\ashortMv\x18\x13 \x01(\x01R\ashortMv\x12\"\n" +
	"\fpendingAsset\x18\x14 \x01(\x01R\fpendingAsset\x12$\n" +
	"\rmaxWithdrawal\x18\x15 \x01(\x01R\rmaxWithdrawal\x12\x1e\n" +
	"\n" +
	"riskStatus\x18\x16 \x01(\x05R\n" +
	"riskStatus\x12*\n" +
	"\x10marginCallMargin\x18\x17 \x01(\x01R\x10marginCallMargin\x12\x14\n" +
	"\x05isPdt\x18\x18 \x01(\bR\x05isPdt\x12\x16\n" +
	"\x06pdtSeq\x18\x19 \x01(\tR\x06pdtSeq\x12$\n" +
	"\rbeginningDTBP\x18\x1a \x01(\x01R\rbeginningDTBP\x12$\n" +
	"\rremainingDTBP\x18\x1b \x01(\x01R\rremainingDTBP\x12\"\n" +
	"\fdtCallAmount\x18\x1c \x01(\x01R\fdtCallAmount\x12\x1a\n" +
	"\bdtStatus\x18\x1d \x01(\x05R\bdtStatus\x12*\n" +
	"\x10securitiesAssets\x18\x1e \x01(\x01R\x10securitiesAssets\x12\x1e\n" +
	"\n" +
	"fundAssets\x18\x1f \x01(\x01R\n" +
	"fundAssets\x12\x1e\n" +
	"\n" +
	"bondAssets\x18  \x01(\x01R\n" +
	"bondAssets\x12A\n" +
	"\x0emarketInfoList\x18! \x03(\v2\x19.Trd_Common.AccMarketInfoR\x0emarketInfoList\"\xea\x05\n" +
	"\bPosition\x12\x1e\n" +
	"\n" +
	"positionID\x18\x01 \x02(\x04R\n" +
	"positionID\x12\"\n" +
	"\fpositionSide\x18\x02 \x02(\x05R\fpositionSide\x12\x12\n" +
	"\x04code\x18\x03 \x02(\tR\x04code\x12\x12\n" +
	"\x04name\x18\x04 \x02(\tR\x04name\x12\x10\n" +
	"\x03qty\x18\x05 \x02(\x01R\x03qty\x12\x1e\n" +
	"\n" +
	"canSellQty\x18\x06 \x02(\x01R\n" +
	"canSellQty\x12\x14\n" +
	"\x05price\x18\a \x02(\x01R\x05price\x12\x1c\n" +
	"\tcostPrice\x18\b \x01(\x01R\tcostPrice\x12\x10\n" +
	"\x03val\x18\t \x02(\x01R\x03val\x12\x14\n" +
	"\x05plVal\x18\n" +
	" \x02(\x01R\x05plVal\x12\x18\n" +
	"\aplRatio\x18\v \x01(\x01R\aplRatio\x12\x1c\n" +
	"\tsecMarket\x18\f \x01(\x05R\tsecMarket\x12\x19\n" +
	"\btd_plVal\x18\x15 \x01(\x01R\atdPlVal\x12\x1b\n" +
	"\ttd_trdVal\x18\x16 \x01(\x01R\btdTrdVal\x12\x1b\n" +
	"\ttd_buyVal\x18\x17 \x01(\x01R\btdBuyVal\x12\x1b\n" +
	"\ttd_buyQty\x18\x18 \x01(\x01R\btdBuyQty\x12\x1d\n" +
	"\n" +
	"td_sellVal\x18\x19 \x01(\x01R\ttdSellVal\x12\x1d\n" +
	"\n" +
	"td_sellQty\x18\x1a \x01(\x01R\ttdSellQty\x12\"\n" +
	"\funrealizedPL\x18\x1c \x01(\x01R\funrealizedPL\x12\x1e\n" +
	"\n" +
	"realizedPL\x18\x1d \x01(\x01R\n" +
	"realizedPL\x12\x1a\n" +
	"\bcurrency\x18\x1e \x01(\x05R\bcurrency\x12\x1c\n" +
	"\ttrdMarket\x18\x1f \x01(\x05R\ttrdMarket\x12*\n" +
	"\x10dilutedCostPrice\x18  \x01(\x01R\x10dilutedCostPrice\x12*\n" +
	"\x10averageCostPrice\x18! \x01(\x01R\x10averageCostPrice\x12&\n" +
	"\x0eaveragePlRatio\x18\" \x01(\x01R\x0eaveragePlRatio\"\xab\x06\n" +
	"\x05Order\x12\x18\n" +
	"\atrdSide\x18\x01 \x02(\x05R\atrdSide\x12\x1c\n" +
	"\torderType\x18\x02 \x02(\x05R\torderType\x12 \n" +
	"\vorderStatus\x18\x03 \x02(\x05R\vorderStatus\x12\x18\n" +
	"\aorderID\x18\x04 \x02(\x04R\aorderID\x12\x1c\n" +
	"\torderIDEx\x18\x05 \x02(\tR\torderIDEx\x12\x12\n" +
	"\x04code\x18\x06 \x02(\tR\x04code\x12\x12\n" +
	"\x04name\x18\a \x02(\tR\x04name\x12\x10\n" +
	"\x03qty\x18\b \x02(\x01R\x03qty\x12\x14\n" +
	"\x05price\x18\t \x01(\x01R\x05price\x12\x1e\n" +
	"\n" +
	"createTime\x18\n" +
	" \x02(\tR\n" +
	"createTime\x12\x1e\n" +
	"\n" +
	"updateTime\x18\v \x02(\tR\n" +
	"updateTime\x12\x18\n" +
	"\afillQty\x18\f \x01(\x01R\afillQty\x12\"\n" +
	"\ffillAvgPrice\x18\r \x01(\x01R\ffillAvgPrice\x12\x1e\n" +
	"\n" +
	"lastErrMsg\x18\x0e \x01(\tR\n" +
	"lastErrMsg\x12\x1c\n" +
	"\tsecMarket\x18\x0f \x01(\x05R\tsecMarket\x12(\n" +
	"\x0fcreateTimestamp\x18\x10 \x01(\x01R\x0fcreateTimestamp\x12(\n" +
	"\x0fupdateTimestamp\x18\x11 \x01(\x01R\x0fupdateTimestamp\x12\x16\n" +
	"\x06remark\x18\x12 \x01(\tR\x06remark\x12 \n" +
	"\vtimeInForce\x18\x13 \x01(\x05R\vtimeInForce\x12&\n" +
	"\x0efillOutsideRTH\x18\x14 \x01(\bR\x0efillOutsideRTH\x12\x1a\n" +
	"\bauxPrice\x18\x15 \x01(\x01R\bauxPrice\x12\x1c\n" +
	"\ttrailType\x18\x16 \x01(\x05R\ttrailType\x12\x1e\n" +
	"\n" +
	"trailValue\x18\x17 \x01(\x01R\n" +
	"trailValue\x12 \n" +
	"\vtrailSpread\x18\x18 \x01(\x01R\vtrailSpread\x12\x1a\n" +
	"\bcurrency\x18\x19 \x01(\x05R\bcurrency\x12\x1c\n" +
	"\ttrdMarket\x18\x1a \x01(\x05R\ttrdMarket\x12\x18\n" +
	"\asession\x18\x1b \x01(\x05R\asession\":\n" +
	"\fOrderFeeItem\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\"z\n" +
	"\bOrderFee\x12\x1c\n" +
	"\torderIDEx\x18\x01 \x02(\tR\torderIDEx\x12\x1c\n" +
	"\tfeeAmount\x18\x02 \x01(\x01R\tfeeAmount\x122\n" +
	"\afeeList\x18\x03 \x03(\v2\x18.Trd_Common.OrderFeeItemR\afeeList\"\x81\x04\n" +
	"\tOrderFill\x12\x18\n" +
	"\atrdSide\x18\x01 \x02(\x05R\atrdSide\x12\x16\n" +
	"\x06fillID\x18\x02 \x02(\x04R\x06fillID\x12\x1a\n" +
	"\bfillIDEx\x18\x03 \x02(\tR\bfillIDEx\x12\x18\n" +
	"\aorderID\x18\x04 \x01(\x04R\aorderID\x12\x1c\n" +
	"\torderIDEx\x18\x05 \x01(\tR\torderIDEx\x12\x12\n" +
	"\x04code\x18\x06 \x02(\tR\x04code\x12\x12\n" +
	"\x04name\x18\a \x02(\tR\x04name\x12\x10\n" +
	"\x03qty\x18\b \x02(\x01R\x03qty\x12\x14\n" +
	"\x05price\x18\t \x02(\x01R\x05price\x12\x1e\n" +
	"\n" +
	"createTime\x18\n" +
	" \x02(\tR\n" +
	"createTime\x12(\n" +
	"\x0fcounterBrokerID\x18\v \x01(\x05R\x0fcounterBrokerID\x12,\n" +
	"\x11counterBrokerName\x18\f \x01(\tR\x11counterBrokerName\x12\x1c\n" +
	"\tsecMarket\x18\r \x01(\x05R\tsecMarket\x12(\n" +
	"\x0fcreateTimestamp\x18\x0e \x01(\x01R\x0fcreateTimestamp\x12(\n" +
	"\x0fupdateTimestamp\x18\x0f \x01(\x01R\x0fupdateTimestamp\x12\x16\n" +
	"\x06status\x18\x10 \x01(\x05R\x06status\x12\x1c\n" +
	"\ttrdMarket\x18\x11 \x01(\x05R\ttrdMarket\"\x9e\x02\n" +
	"\n" +
	"MaxTrdQtys\x12\x1e\n" +
	"\n" +
	"maxCashBuy\x18\x01 \x02(\x01R\n" +
	"maxCashBuy\x120\n" +
	"\x13maxCashAndMarginBuy\x18\x02 \x01(\x01R\x13maxCashAndMarginBuy\x12(\n" +
	"\x0fmaxPositionSell\x18\x03 \x02(\x01R\x0fmaxPositionSell\x12\"\n" +
	"\fmaxSellShort\x18\x04 \x01(\x01R\fmaxSellShort\x12\x1e\n" +
	"\n" +
	"maxBuyBack\x18\x05 \x01(\x01R\n" +
	"maxBuyBack\x12&\n" +
	"\x0elongRequiredIM\x18\x06 \x01(\x01R\x0elongRequiredIM\x12(\n" +
	"\x0fshortRequiredIM\x18\a \x01(\x01R\x0fshortRequiredIM\"\xcb\x01\n" +
	"\x13TrdFilterConditions\x12\x1a\n" +
	"\bcodeList\x18\x01 \x03(\tR\bcodeList\x12\x16\n" +
	"\x06idList\x18\x02 \x03(\x04R\x06idList\x12\x1c\n" +
	"\tbeginTime\x18\x03 \x01(\tR\tbeginTime\x12\x18\n" +
	"\aendTime\x18\x04 \x01(\tR\aendTime\x12$\n" +
	"\rorderIDExList\x18\x05 \x03(\tR\rorderIDExList\x12\"\n" +
	"\ffilterMarket\x18\x06 \x01(\x05R\ffilterMarket*.\n" +
	"\x06TrdEnv\x12\x13\n" +
	"\x0fTrdEnv_Simulate\x10\x00\x12\x0f\n" +
	"\vTrdEnv_Real\x10\x01*X\n" +
	"\vTrdCategory\x12\x17\n" +
	"\x13TrdCategory_Unknown\x10\x00\x12\x18\n" +
	"\x14TrdCategory_Security\x10\x01\x12\x16\n" +
	"\x12TrdCategory_Future\x10\x02*\x97\x03\n" +
	"\tTrdMarket\x12\x15\n" +
	"\x11TrdMarket_Unknown\x10\x00\x12\x10\n" +
	"\fTrdMarket_HK\x10\x01\x12\x10\n" +
	"\fTrdMarket_US\x10\x02\x12\x10\n" +
	"\fTrdMarket_CN\x10\x03\x12\x12\n" +
	"\x0eTrdMarket_HKCC\x10\x04\x12\x15\n" +
	"\x11TrdMarket_Futures\x10\x05\x12\x10\n" +
	"\fTrdMarket_SG\x10\x06\x12\x10\n" +
	"\fTrdMarket_AU\x10\b\x12!\n" +
	"\x1dTrdMarket_Futures_Simulate_HK\x10\n" +
	"\x12!\n" +
	"\x1dTrdMarket_Futures_Simulate_US\x10\v\x12!\n" +
	"\x1dTrdMarket_Futures_Simulate_SG\x10\f\x12!\n" +
	"\x1dTrdMarket_Futures_Simulate_JP\x10\r\x12\x10\n" +
	"\fTrdMarket_JP\x10\x0f\x12\x10\n" +
	"\fTrdMarket_MY\x10o\x12\x10\n" +
	"\fTrdMarket_CA\x10p\x12\x15\n" +
	"\x11TrdMarket_HK_Fund\x10q\x12\x15\n" +
	"\x11TrdMarket_US_Fund\x10{*\x80\x02\n" +
	"\fTrdSecMarket\x12\x18\n" +
	"\x14TrdSecMarket_Unknown\x10\x00\x12\x13\n" +
	"\x0fTrdSecMarket_HK\x10\x01\x12\x13\n" +
	"\x0fTrdSecMarket_US\x10\x02\x12\x16\n" +
	"\x12TrdSecMarket_CN_SH\x10\x1f\x12\x16\n" +
	"\x12TrdSecMarket_CN_SZ\x10 \x12\x13\n" +
	"\x0fTrdSecMarket_SG\x10)\x12\x13\n" +
	"\x0fTrdSecMarket_JP\x103\x12\x13\n" +
	"\x0fTrdSecMarket_AU\x10=\x12\x13\n" +
	"\x0fTrdSecMarket_MY\x10G\x12\x13\n" +
	"\x0fTrdSecMarket_CA\x10Q\x12\x13\n" +
	"\x0fTrdSecMarket_FX\x10[*m\n" +
	"\aTrdSide\x12\x13\n" +
	"\x0fTrdSide_Unknown\x10\x00\x12\x0f\n" +
	"\vTrdSide_Buy\x10\x01\x12\x10\n" +
	"\fTrdSide_Sell\x10\x02\x12\x15\n" +
	"\x11TrdSide_SellShort\x10\x03\x12\x13\n" +
	"\x0fTrdSide_BuyBack\x10\x04*\xeb\x03\n" +
	"\tOrderType\x12\x15\n" +
	"\x11OrderType_Unknown\x10\x00\x12\x14\n" +
	"\x10OrderType_Normal\x10\x01\x12\x14\n" +
	"\x10OrderType_Market\x10\x02\x12\x1b\n" +
	"\x17OrderType_AbsoluteLimit\x10\x05\x12\x15\n" +
	"\x11OrderType_Auction\x10\x06\x12\x1a\n" +
	"\x16OrderType_AuctionLimit\x10\a\x12\x1a\n" +
	"\x16OrderType_SpecialLimit\x10\b\x12\x1e\n" +
	"\x1aOrderType_SpecialLimit_All\x10\t\x12\x12\n" +
	"\x0eOrderType_Stop\x10\n" +
	"\x12\x17\n" +
	"\x13OrderType_StopLimit\x10\v\x12\x1d\n" +
	"\x19OrderType_MarketifTouched\x10\f\x12\x1c\n" +
	"\x18OrderType_LimitifTouched\x10\r\x12\x1a\n" +
	"\x16OrderType_TrailingStop\x10\x0e\x12\x1f\n" +
	"\x1bOrderType_TrailingStopLimit\x10\x0f\x12\x19\n" +
	"\x15OrderType_TWAP_MARKET\x10\x10\x12\x18\n" +
	"\x14OrderType_TWAP_LIMIT\x10\x11\x12\x19\n" +
	"\x15OrderType_VWAP_MARKET\x10\x12\x12\x18\n" +
	"\x14OrderType_VWAP_LIMIT\x10\x13*M\n" +
	"\tTrailType\x12\x15\n" +
	"\x11TrailType_Unknown\x10\x00\x12\x13\n" +
	"\x0fTrailType_Ratio\x10\x01\x12\x14\n" +
	"\x10TrailType_Amount\x10\x02*\xfc\x03\n" +
	"\vOrderStatus\x12\x1b\n" +
	"\x17OrderStatus_Unsubmitted\x10\x00\x12 \n" +
	"\x13OrderStatus_Unknown\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x1d\n" +
	"\x19OrderStatus_WaitingSubmit\x10\x01\x12\x1a\n" +
	"\x16OrderStatus_Submitting\x10\x02\x12\x1c\n" +
	"\x18OrderStatus_SubmitFailed\x10\x03\x12\x17\n" +
	"\x13OrderStatus_TimeOut\x10\x04\x12\x19\n" +
	"\x15OrderStatus_Submitted\x10\x05\x12\x1b\n" +
	"\x17OrderStatus_Filled_Part\x10\n" +
	"\x12\x1a\n" +
	"\x16OrderStatus_Filled_All\x10\v\x12\x1f\n" +
	"\x1bOrderStatus_Cancelling_Part\x10\f\x12\x1e\n" +
	"\x1aOrderStatus_Cancelling_All\x10\r\x12\x1e\n" +
	"\x1aOrderStatus_Cancelled_Part\x10\x0e\x12\x1d\n" +
	"\x19OrderStatus_Cancelled_All\x10\x0f\x12\x16\n" +
	"\x12OrderStatus_Failed\x10\x15\x12\x18\n" +
	"\x14OrderStatus_Disabled\x10\x16\x12\x17\n" +
	"\x13OrderStatus_Deleted\x10\x17\x12\x1d\n" +
	"\x19OrderStatus_FillCancelled\x10\x18*e\n" +
	"\x0fOrderFillStatus\x12\x16\n" +
	"\x12OrderFillStatus_OK\x10\x00\x12\x1d\n" +
	"\x19OrderFillStatus_Cancelled\x10\x01\x12\x1b\n" +
	"\x17OrderFillStatus_Changed\x10\x02*`\n" +
	"\fPositionSide\x12\x15\n" +
	"\x11PositionSide_Long\x10\x00\x12!\n" +
	"\x14PositionSide_Unknown\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x16\n" +
	"\x12PositionSide_Short\x10\x01*\xad\x01\n" +
	"\rModifyOrderOp\x12\x19\n" +
	"\x15ModifyOrderOp_Unknown\x10\x00\x12\x18\n" +
	"\x14ModifyOrderOp_Normal\x10\x01\x12\x18\n" +
	"\x14ModifyOrderOp_Cancel\x10\x02\x12\x19\n" +
	"\x15ModifyOrderOp_Disable\x10\x03\x12\x18\n" +
	"\x14ModifyOrderOp_Enable\x10\x04\x12\x18\n" +
	"\x14ModifyOrderOp_Delete\x10\x05*P\n" +
	"\n" +
	"TrdAccType\x12\x16\n" +
	"\x12TrdAccType_Unknown\x10\x00\x12\x13\n" +
	"\x0fTrdAccType_Cash\x10\x01\x12\x15\n" +
	"\x11TrdAccType_Margin\x10\x02*B\n" +
	"\fTrdAccStatus\x12\x17\n" +
	"\x13TrdAccStatus_Active\x10\x00\x12\x19\n" +
	"\x15TrdAccStatus_Disabled\x10\x01*\xb0\x01\n" +
	"\bCurrency\x12\x14\n" +
	"\x10Currency_Unknown\x10\x00\x12\x10\n" +
	"\fCurrency_HKD\x10\x01\x12\x10\n" +
	"\fCurrency_USD\x10\x02\x12\x10\n" +
	"\fCurrency_CNH\x10\x03\x12\x10\n" +
	"\fCurrency_JPY\x10\x04\x12\x10\n" +
	"\fCurrency_SGD\x10\x05\x12\x10\n" +
	"\fCurrency_AUD\x10\x06\x12\x10\n" +
	"\fCurrency_CAD\x10\a\x12\x10\n" +
	"\fCurrency_MYR\x10\b*\xb6\x01\n" +
	"\fCltRiskLevel\x12!\n" +
	"\x14CltRiskLevel_Unknown\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x15\n" +
	"\x11CltRiskLevel_Safe\x10\x00\x12\x18\n" +
	"\x14CltRiskLevel_Warning\x10\x01\x12\x17\n" +
	"\x13CltRiskLevel_Danger\x10\x02\x12\x1d\n" +
	"\x19CltRiskLevel_AbsoluteSafe\x10\x03\x12\x1a\n" +
	"\x16CltRiskLevel_OptDanger\x10\x04*7\n" +
	"\vTimeInForce\x12\x13\n" +
	"\x0fTimeInForce_DAY\x10\x00\x12\x13\n" +
	"\x0fTimeInForce_GTC\x10\x01*\x95\x01\n" +
	"\fSecurityFirm\x12\x18\n" +
	"\x14SecurityFirm_Unknown\x10\x00\x12\x1f\n" +
	"\x1bSecurityFirm_FutuSecurities\x10\x01\x12\x18\n" +
	"\x14SecurityFirm_FutuInc\x10\x02\x12\x17\n" +
	"\x13SecurityFirm_FutuSG\x10\x03\x12\x17\n" +
	"\x13SecurityFirm_FutuAU\x10\x04*i\n" +
	"\n" +
	"SimAccType\x12\x16\n" +
	"\x12SimAccType_Unknown\x10\x00\x12\x14\n" +
	"\x10SimAccType_Stock\x10\x01\x12\x15\n" +
	"\x11SimAccType_Option\x10\x02\x12\x16\n" +
	"\x12SimAccType_Futures\x10\x03*\x94\x02\n" +
	"\rCltRiskStatus\x12\x19\n" +
	"\x15CltRiskStatus_Unknown\x10\x00\x12\x18\n" +
	"\x14CltRiskStatus_Level1\x10\x01\x12\x18\n" +
	"\x14CltRiskStatus_Level2\x10\x02\x12\x18\n" +
	"\x14CltRiskStatus_Level3\x10\x03\x12\x18\n" +
	"\x14CltRiskStatus_Level4\x10\x04\x12\x18\n" +
	"\x14CltRiskStatus_Level5\x10\x05\x12\x18\n" +
	"\x14CltRiskStatus_Level6\x10\x06\x12\x18\n" +
	"\x14CltRiskStatus_Level7\x10\a\x12\x18\n" +
	"\x14CltRiskStatus_Level8\x10\b\x12\x18\n" +
	"\x14CltRiskStatus_Level9\x10\t*b\n" +
	"\bDTStatus\x12\x14\n" +
	"\x10DTStatus_Unknown\x10\x00\x12\x16\n" +
	"\x12DTStatus_Unlimited\x10\x01\x12\x13\n" +
	"\x0fDTStatus_EMCall\x10\x02\x12\x13\n" +
	"\x0fDTStatus_DTCall\x10\x03B#\n" +
	"\x13com.futu.openapi.pbZ\f./trd/common"

var (
	file_trade_Trd_Common_proto_rawDescOnce sync.Once
	file_trade_Trd_Common_proto_rawDescData []byte
)

func file_trade_Trd_Common_proto_rawDescGZIP() []byte {
	file_trade_Trd_Common_proto_rawDescOnce.Do(func() {
		file_trade_Trd_Common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trade_Trd_Common_proto_rawDesc), len(file_trade_Trd_Common_proto_rawDesc)))
	})
	return file_trade_Trd_Common_proto_rawDescData
}

var file_trade_Trd_Common_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_trade_Trd_Common_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_trade_Trd_Common_proto_goTypes = []any{
	(TrdEnv)(0),                 // 0: Trd_Common.TrdEnv
	(TrdCategory)(0),            // 1: Trd_Common.TrdCategory
	(TrdMarket)(0),              // 2: Trd_Common.TrdMarket
	(TrdSecMarket)(0),           // 3: Trd_Common.TrdSecMarket
	(TrdSide)(0),                // 4: Trd_Common.TrdSide
	(OrderType)(0),              // 5: Trd_Common.OrderType
	(TrailType)(0),              // 6: Trd_Common.TrailType
	(OrderStatus)(0),            // 7: Trd_Common.OrderStatus
	(OrderFillStatus)(0),        // 8: Trd_Common.OrderFillStatus
	(PositionSide)(0),           // 9: Trd_Common.PositionSide
	(ModifyOrderOp)(0),          // 10: Trd_Common.ModifyOrderOp
	(TrdAccType)(0),             // 11: Trd_Common.TrdAccType
	(TrdAccStatus)(0),           // 12: Trd_Common.TrdAccStatus
	(Currency)(0),               // 13: Trd_Common.Currency
	(CltRiskLevel)(0),           // 14: Trd_Common.CltRiskLevel
	(TimeInForce)(0),            // 15: Trd_Common.TimeInForce
	(SecurityFirm)(0),           // 16: Trd_Common.SecurityFirm
	(SimAccType)(0),             // 17: Trd_Common.SimAccType
	(CltRiskStatus)(0),          // 18: Trd_Common.CltRiskStatus
	(DTStatus)(0),               // 19: Trd_Common.DTStatus
	(*AccCashInfo)(nil),         // 20: Trd_Common.AccCashInfo
	(*AccMarketInfo)(nil),       // 21: Trd_Common.AccMarketInfo
	(*TrdHeader)(nil),           // 22: Trd_Common.TrdHeader
	(*TrdAcc)(nil),              // 23: Trd_Common.TrdAcc
	(*Funds)(nil),               // 24: Trd_Common.Funds
	(*Position)(nil),            // 25: Trd_Common.Position
	(*Order)(nil),               // 26: Trd_Common.Order
	(*OrderFeeItem)(nil),        // 27: Trd_Common.OrderFeeItem
	(*OrderFee)(nil),            // 28: Trd_Common.OrderFee
	(*OrderFill)(nil),           // 29: Trd_Common.OrderFill
	(*MaxTrdQtys)(nil),          // 30: Trd_Common.MaxTrdQtys
	(*TrdFilterConditions)(nil), // 31: Trd_Common.TrdFilterConditions
}
var file_trade_Trd_Common_proto_depIdxs = []int32{
	20, // 0: Trd_Common.Funds.cashInfoList:type_name -> Trd_Common.AccCashInfo
	21, // 1: Trd_Common.Funds.marketInfoList:type_name -> Trd_Common.AccMarketInfo
	27, // 2: Trd_Common.OrderFee.feeList:type_name -> Trd_Common.OrderFeeItem
	3,  // [3:3] is the sub-list for method output_type
	3,  // [3:3] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_trade_Trd_Common_proto_init() }
func file_trade_Trd_Common_proto_init() {
	if File_trade_Trd_Common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trade_Trd_Common_proto_rawDesc), len(file_trade_Trd_Common_proto_rawDesc)),
			NumEnums:      20,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trade_Trd_Common_proto_goTypes,
		DependencyIndexes: file_trade_Trd_Common_proto_depIdxs,
		EnumInfos:         file_trade_Trd_Common_proto_enumTypes,
		MessageInfos:      file_trade_Trd_Common_proto_msgTypes,
	}.Build()
	File_trade_Trd_Common_proto = out.File
	file_trade_Trd_Common_proto_goTypes = nil
	file_trade_Trd_Common_proto_depIdxs = nil
}
