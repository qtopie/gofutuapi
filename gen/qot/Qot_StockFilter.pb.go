// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: qot/Qot_StockFilter.proto

package qotstockfilter

import (
	common "./qot/common"
	_ "github.com/qtopie/gofutuapi/gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 简单属性
type StockField int32

const (
	StockField_StockField_Unknown                        StockField = 0  // 未知
	StockField_StockField_StockCode                      StockField = 1  // 股票代码，不能填区间上下限值。
	StockField_StockField_StockName                      StockField = 2  // 股票名称，不能填区间上下限值。
	StockField_StockField_CurPrice                       StockField = 3  // 最新价（精确到小数点后 3 位，超出部分会被舍弃）例如填写[10,20]值区间
	StockField_StockField_CurPriceToHighest52WeeksRatio  StockField = 4  // (现价 - 52周最高)/52周最高，对应PC端离52周高点百分比（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-30,-10]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%，如20实际对应20%）
	StockField_StockField_CurPriceToLowest52WeeksRatio   StockField = 5  // (现价 - 52周最低)/52周最低，对应PC端离52周低点百分比（精确到小数点后 3 位，超出部分会被舍弃）例如填写[20,40]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	StockField_StockField_HighPriceToHighest52WeeksRatio StockField = 6  // (今日最高 - 52周最高)/52周最高（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-3,-1]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	StockField_StockField_LowPriceToLowest52WeeksRatio   StockField = 7  // (今日最低 - 52周最低)/52周最低（精确到小数点后 3 位，超出部分会被舍弃）例如填写[10,70]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	StockField_StockField_VolumeRatio                    StockField = 8  // 量比（精确到小数点后 3 位，超出部分会被舍弃）例如填写[0.5,30]值区间
	StockField_StockField_BidAskRatio                    StockField = 9  // 委比（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-20,80.5]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	StockField_StockField_LotPrice                       StockField = 10 // 每手价格（精确到小数点后 3 位，超出部分会被舍弃）例如填写[40,100]值区间
	StockField_StockField_MarketVal                      StockField = 11 // 市值（精确到小数点后 3 位，超出部分会被舍弃）例如填写[50000000,3000000000]值区间
	StockField_StockField_PeAnnual                       StockField = 12 // 市盈率(静态)（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-8,65.3]值区间
	StockField_StockField_PeTTM                          StockField = 13 // 市盈率 TTM（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-10,20.5]值区间
	StockField_StockField_PbRate                         StockField = 14 // 市净率（精确到小数点后 3 位，超出部分会被舍弃）例如填写[0.5,20]值区间
	StockField_StockField_ChangeRate5min                 StockField = 15 // 五分钟价格涨跌幅（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-5,6.3]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	StockField_StockField_ChangeRateBeginYear            StockField = 16 // 年初至今价格涨跌幅（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-50.1,400.7]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	// 基础量价属性
	StockField_StockField_PSTTM          StockField = 17 // 市销率 TTM（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [100, 500] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	StockField_StockField_PCFTTM         StockField = 18 // 市现率 TTM（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [100, 1000] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	StockField_StockField_TotalShare     StockField = 19 // 总股数（精确到小数点后 0 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间 (单位：股)（精确到小数点后 0 位，超出部分会被舍弃）
	StockField_StockField_FloatShare     StockField = 20 // 流通股数（精确到小数点后 0 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间 (单位：股)（精确到小数点后 0 位，超出部分会被舍弃）
	StockField_StockField_FloatMarketVal StockField = 21 // 流通市值（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间 (单位：元)
)

// Enum value maps for StockField.
var (
	StockField_name = map[int32]string{
		0:  "StockField_Unknown",
		1:  "StockField_StockCode",
		2:  "StockField_StockName",
		3:  "StockField_CurPrice",
		4:  "StockField_CurPriceToHighest52WeeksRatio",
		5:  "StockField_CurPriceToLowest52WeeksRatio",
		6:  "StockField_HighPriceToHighest52WeeksRatio",
		7:  "StockField_LowPriceToLowest52WeeksRatio",
		8:  "StockField_VolumeRatio",
		9:  "StockField_BidAskRatio",
		10: "StockField_LotPrice",
		11: "StockField_MarketVal",
		12: "StockField_PeAnnual",
		13: "StockField_PeTTM",
		14: "StockField_PbRate",
		15: "StockField_ChangeRate5min",
		16: "StockField_ChangeRateBeginYear",
		17: "StockField_PSTTM",
		18: "StockField_PCFTTM",
		19: "StockField_TotalShare",
		20: "StockField_FloatShare",
		21: "StockField_FloatMarketVal",
	}
	StockField_value = map[string]int32{
		"StockField_Unknown":                        0,
		"StockField_StockCode":                      1,
		"StockField_StockName":                      2,
		"StockField_CurPrice":                       3,
		"StockField_CurPriceToHighest52WeeksRatio":  4,
		"StockField_CurPriceToLowest52WeeksRatio":   5,
		"StockField_HighPriceToHighest52WeeksRatio": 6,
		"StockField_LowPriceToLowest52WeeksRatio":   7,
		"StockField_VolumeRatio":                    8,
		"StockField_BidAskRatio":                    9,
		"StockField_LotPrice":                       10,
		"StockField_MarketVal":                      11,
		"StockField_PeAnnual":                       12,
		"StockField_PeTTM":                          13,
		"StockField_PbRate":                         14,
		"StockField_ChangeRate5min":                 15,
		"StockField_ChangeRateBeginYear":            16,
		"StockField_PSTTM":                          17,
		"StockField_PCFTTM":                         18,
		"StockField_TotalShare":                     19,
		"StockField_FloatShare":                     20,
		"StockField_FloatMarketVal":                 21,
	}
)

func (x StockField) Enum() *StockField {
	p := new(StockField)
	*p = x
	return p
}

func (x StockField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockField) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_Qot_StockFilter_proto_enumTypes[0].Descriptor()
}

func (StockField) Type() protoreflect.EnumType {
	return &file_qot_Qot_StockFilter_proto_enumTypes[0]
}

func (x StockField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StockField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StockField(num)
	return nil
}

// Deprecated: Use StockField.Descriptor instead.
func (StockField) EnumDescriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{0}
}

// 累积属性
type AccumulateField int32

const (
	AccumulateField_AccumulateField_Unknown      AccumulateField = 0 // 未知
	AccumulateField_AccumulateField_ChangeRate   AccumulateField = 1 // 涨跌幅（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-10.2,20.4]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	AccumulateField_AccumulateField_Amplitude    AccumulateField = 2 // 振幅（精确到小数点后 3 位，超出部分会被舍弃）例如填写[0.5,20.6]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	AccumulateField_AccumulateField_Volume       AccumulateField = 3 // 日均成交量（精确到小数点后 0 位，超出部分会被舍弃）例如填写[2000,70000]值区间（精确到小数点后 0 位，超出部分会被舍弃）
	AccumulateField_AccumulateField_Turnover     AccumulateField = 4 // 日均成交额（精确到小数点后 3 位，超出部分会被舍弃）例如填写[1400,890000]值区间
	AccumulateField_AccumulateField_TurnoverRate AccumulateField = 5 // 换手率（精确到小数点后 3 位，超出部分会被舍弃）例如填写[2,30]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
)

// Enum value maps for AccumulateField.
var (
	AccumulateField_name = map[int32]string{
		0: "AccumulateField_Unknown",
		1: "AccumulateField_ChangeRate",
		2: "AccumulateField_Amplitude",
		3: "AccumulateField_Volume",
		4: "AccumulateField_Turnover",
		5: "AccumulateField_TurnoverRate",
	}
	AccumulateField_value = map[string]int32{
		"AccumulateField_Unknown":      0,
		"AccumulateField_ChangeRate":   1,
		"AccumulateField_Amplitude":    2,
		"AccumulateField_Volume":       3,
		"AccumulateField_Turnover":     4,
		"AccumulateField_TurnoverRate": 5,
	}
)

func (x AccumulateField) Enum() *AccumulateField {
	p := new(AccumulateField)
	*p = x
	return p
}

func (x AccumulateField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccumulateField) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_Qot_StockFilter_proto_enumTypes[1].Descriptor()
}

func (AccumulateField) Type() protoreflect.EnumType {
	return &file_qot_Qot_StockFilter_proto_enumTypes[1]
}

func (x AccumulateField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccumulateField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccumulateField(num)
	return nil
}

// Deprecated: Use AccumulateField.Descriptor instead.
func (AccumulateField) EnumDescriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{1}
}

// 财务属性
type FinancialField int32

const (
	// 基础财务属性
	FinancialField_FinancialField_Unknown             FinancialField = 0 // 未知
	FinancialField_FinancialField_NetProfit           FinancialField = 1 // 净利润（精确到小数点后 3 位，超出部分会被舍弃）例如填写[100000000,2500000000]值区间
	FinancialField_FinancialField_NetProfitGrowth     FinancialField = 2 // 净利润增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-10,300]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_SumOfBusiness       FinancialField = 3 // 营业收入（精确到小数点后 3 位，超出部分会被舍弃）例如填写[100000000,6400000000]值区间
	FinancialField_FinancialField_SumOfBusinessGrowth FinancialField = 4 // 营收同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写[-5,200]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_NetProfitRate       FinancialField = 5 // 净利率（精确到小数点后 3 位，超出部分会被舍弃）例如填写[10,113]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_GrossProfitRate     FinancialField = 6 // 毛利率（精确到小数点后 3 位，超出部分会被舍弃）例如填写[4,65]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_DebtAssetsRate      FinancialField = 7 // 资产负债率（精确到小数点后 3 位，超出部分会被舍弃）例如填写[5,470]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_ReturnOnEquityRate  FinancialField = 8 // 净资产收益率（精确到小数点后 3 位，超出部分会被舍弃）例如填写[20,230]值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	// 盈利能力属性
	FinancialField_FinancialField_ROIC                    FinancialField = 9  // 投入资本回报率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_ROATTM                  FinancialField = 10 // 资产回报率 TTM（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%。仅适用于年报。）
	FinancialField_FinancialField_EBITTTM                 FinancialField = 11 // 息税前利润 TTM（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间（单位：元。仅适用于年报。）
	FinancialField_FinancialField_EBITDA                  FinancialField = 12 // 税息折旧及摊销前利润（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间（单位：元）
	FinancialField_FinancialField_OperatingMarginTTM      FinancialField = 13 // 营业利润率 TTM（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%。仅适用于年报。）
	FinancialField_FinancialField_EBITMargin              FinancialField = 14 // EBIT利润率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_EBITDAMargin            FinancialField = 15 // EBITDA利润率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_FinancialCostRate       FinancialField = 16 // 财务成本率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_OperatingProfitTTM      FinancialField = 17 // 营业利润 TTM（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间 （单位：元。仅适用于年报。）
	FinancialField_FinancialField_ShareholderNetProfitTTM FinancialField = 18 // 归属于母公司的净利润（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间 （单位：元。仅适用于年报。）
	FinancialField_FinancialField_NetProfitCashCoverTTM   FinancialField = 19 // 盈利中的现金收入比例（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,60.0] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%。仅适用于年报。）
	// 偿债能力属性
	FinancialField_FinancialField_CurrentRatio FinancialField = 20 // 流动比率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [100,250] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_QuickRatio   FinancialField = 21 // 速动比率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [100,250] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	// 清债能力属性
	FinancialField_FinancialField_CurrentAssetRatio      FinancialField = 22 // 流动资产率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [10,100] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_CurrentDebtRatio       FinancialField = 23 // 流动负债率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [10,100] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_EquityMultiplier       FinancialField = 24 // 权益乘数（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [100,180] 值区间
	FinancialField_FinancialField_PropertyRatio          FinancialField = 25 // 产权比率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [50,100] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_CashAndCashEquivalents FinancialField = 26 // 现金和现金等价（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间（单位：元）
	// 运营能力属性
	FinancialField_FinancialField_TotalAssetTurnover   FinancialField = 27 // 总资产周转率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [50,100] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_FixedAssetTurnover   FinancialField = 28 // 固定资产周转率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [50,100] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_InventoryTurnover    FinancialField = 29 // 存货周转率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [50,100] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_OperatingCashFlowTTM FinancialField = 30 // 经营活动现金流 TTM（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间（单位：元。仅适用于年报。）
	FinancialField_FinancialField_AccountsReceivable   FinancialField = 31 // 应收账款净额（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1000000000,1000000000] 值区间 例如填写 [1000000000,1000000000] 值区间 （单位：元）
	// 成长能力属性
	FinancialField_FinancialField_EBITGrowthRate                 FinancialField = 32 // EBIT同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_OperatingProfitGrowthRate      FinancialField = 33 // 营业利润同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_TotalAssetsGrowthRate          FinancialField = 34 // 总资产同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_ProfitToShareholdersGrowthRate FinancialField = 35 // 归母净利润同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_ProfitBeforeTaxGrowthRate      FinancialField = 36 // 总利润同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_EPSGrowthRate                  FinancialField = 37 // EPS同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_ROEGrowthRate                  FinancialField = 38 // ROE同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_ROICGrowthRate                 FinancialField = 39 // ROIC同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_NOCFGrowthRate                 FinancialField = 40 // 经营现金流同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_NOCFPerShareGrowthRate         FinancialField = 41 // 每股经营现金流同比增长率（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [1.0,10.0] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	// 现金流属性
	FinancialField_FinancialField_OperatingRevenueCashCover    FinancialField = 42 // 经营现金收入比（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [10,100] 值区间（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	FinancialField_FinancialField_OperatingProfitToTotalProfit FinancialField = 43 // 营业利润占比（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [10,100] 值区间 （该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	// 市场表现属性
	FinancialField_FinancialField_BasicEPS     FinancialField = 44 // 基本每股收益（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [0.1,10] 值区间 (单位：元)
	FinancialField_FinancialField_DilutedEPS   FinancialField = 45 // 稀释每股收益（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [0.1,10] 值区间 (单位：元)
	FinancialField_FinancialField_NOCFPerShare FinancialField = 46 // 每股经营现金净流量（精确到小数点后 3 位，超出部分会被舍弃）例如填写 [0.1,10] 值区间 (单位：元)
)

// Enum value maps for FinancialField.
var (
	FinancialField_name = map[int32]string{
		0:  "FinancialField_Unknown",
		1:  "FinancialField_NetProfit",
		2:  "FinancialField_NetProfitGrowth",
		3:  "FinancialField_SumOfBusiness",
		4:  "FinancialField_SumOfBusinessGrowth",
		5:  "FinancialField_NetProfitRate",
		6:  "FinancialField_GrossProfitRate",
		7:  "FinancialField_DebtAssetsRate",
		8:  "FinancialField_ReturnOnEquityRate",
		9:  "FinancialField_ROIC",
		10: "FinancialField_ROATTM",
		11: "FinancialField_EBITTTM",
		12: "FinancialField_EBITDA",
		13: "FinancialField_OperatingMarginTTM",
		14: "FinancialField_EBITMargin",
		15: "FinancialField_EBITDAMargin",
		16: "FinancialField_FinancialCostRate",
		17: "FinancialField_OperatingProfitTTM",
		18: "FinancialField_ShareholderNetProfitTTM",
		19: "FinancialField_NetProfitCashCoverTTM",
		20: "FinancialField_CurrentRatio",
		21: "FinancialField_QuickRatio",
		22: "FinancialField_CurrentAssetRatio",
		23: "FinancialField_CurrentDebtRatio",
		24: "FinancialField_EquityMultiplier",
		25: "FinancialField_PropertyRatio",
		26: "FinancialField_CashAndCashEquivalents",
		27: "FinancialField_TotalAssetTurnover",
		28: "FinancialField_FixedAssetTurnover",
		29: "FinancialField_InventoryTurnover",
		30: "FinancialField_OperatingCashFlowTTM",
		31: "FinancialField_AccountsReceivable",
		32: "FinancialField_EBITGrowthRate",
		33: "FinancialField_OperatingProfitGrowthRate",
		34: "FinancialField_TotalAssetsGrowthRate",
		35: "FinancialField_ProfitToShareholdersGrowthRate",
		36: "FinancialField_ProfitBeforeTaxGrowthRate",
		37: "FinancialField_EPSGrowthRate",
		38: "FinancialField_ROEGrowthRate",
		39: "FinancialField_ROICGrowthRate",
		40: "FinancialField_NOCFGrowthRate",
		41: "FinancialField_NOCFPerShareGrowthRate",
		42: "FinancialField_OperatingRevenueCashCover",
		43: "FinancialField_OperatingProfitToTotalProfit",
		44: "FinancialField_BasicEPS",
		45: "FinancialField_DilutedEPS",
		46: "FinancialField_NOCFPerShare",
	}
	FinancialField_value = map[string]int32{
		"FinancialField_Unknown":                        0,
		"FinancialField_NetProfit":                      1,
		"FinancialField_NetProfitGrowth":                2,
		"FinancialField_SumOfBusiness":                  3,
		"FinancialField_SumOfBusinessGrowth":            4,
		"FinancialField_NetProfitRate":                  5,
		"FinancialField_GrossProfitRate":                6,
		"FinancialField_DebtAssetsRate":                 7,
		"FinancialField_ReturnOnEquityRate":             8,
		"FinancialField_ROIC":                           9,
		"FinancialField_ROATTM":                         10,
		"FinancialField_EBITTTM":                        11,
		"FinancialField_EBITDA":                         12,
		"FinancialField_OperatingMarginTTM":             13,
		"FinancialField_EBITMargin":                     14,
		"FinancialField_EBITDAMargin":                   15,
		"FinancialField_FinancialCostRate":              16,
		"FinancialField_OperatingProfitTTM":             17,
		"FinancialField_ShareholderNetProfitTTM":        18,
		"FinancialField_NetProfitCashCoverTTM":          19,
		"FinancialField_CurrentRatio":                   20,
		"FinancialField_QuickRatio":                     21,
		"FinancialField_CurrentAssetRatio":              22,
		"FinancialField_CurrentDebtRatio":               23,
		"FinancialField_EquityMultiplier":               24,
		"FinancialField_PropertyRatio":                  25,
		"FinancialField_CashAndCashEquivalents":         26,
		"FinancialField_TotalAssetTurnover":             27,
		"FinancialField_FixedAssetTurnover":             28,
		"FinancialField_InventoryTurnover":              29,
		"FinancialField_OperatingCashFlowTTM":           30,
		"FinancialField_AccountsReceivable":             31,
		"FinancialField_EBITGrowthRate":                 32,
		"FinancialField_OperatingProfitGrowthRate":      33,
		"FinancialField_TotalAssetsGrowthRate":          34,
		"FinancialField_ProfitToShareholdersGrowthRate": 35,
		"FinancialField_ProfitBeforeTaxGrowthRate":      36,
		"FinancialField_EPSGrowthRate":                  37,
		"FinancialField_ROEGrowthRate":                  38,
		"FinancialField_ROICGrowthRate":                 39,
		"FinancialField_NOCFGrowthRate":                 40,
		"FinancialField_NOCFPerShareGrowthRate":         41,
		"FinancialField_OperatingRevenueCashCover":      42,
		"FinancialField_OperatingProfitToTotalProfit":   43,
		"FinancialField_BasicEPS":                       44,
		"FinancialField_DilutedEPS":                     45,
		"FinancialField_NOCFPerShare":                   46,
	}
)

func (x FinancialField) Enum() *FinancialField {
	p := new(FinancialField)
	*p = x
	return p
}

func (x FinancialField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialField) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_Qot_StockFilter_proto_enumTypes[2].Descriptor()
}

func (FinancialField) Type() protoreflect.EnumType {
	return &file_qot_Qot_StockFilter_proto_enumTypes[2]
}

func (x FinancialField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FinancialField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FinancialField(num)
	return nil
}

// Deprecated: Use FinancialField.Descriptor instead.
func (FinancialField) EnumDescriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{2}
}

// 自定义技术指标属性
type CustomIndicatorField int32

const (
	CustomIndicatorField_CustomIndicatorField_Unknown      CustomIndicatorField = 0  // 未知
	CustomIndicatorField_CustomIndicatorField_Price        CustomIndicatorField = 1  // 最新价格
	CustomIndicatorField_CustomIndicatorField_MA5          CustomIndicatorField = 2  // 5日简单均线（不建议使用）
	CustomIndicatorField_CustomIndicatorField_MA10         CustomIndicatorField = 3  // 10日简单均线 （不建议使用）
	CustomIndicatorField_CustomIndicatorField_MA20         CustomIndicatorField = 4  // 20日简单均线 （不建议使用）
	CustomIndicatorField_CustomIndicatorField_MA30         CustomIndicatorField = 5  // 30日简单均线 （不建议使用）
	CustomIndicatorField_CustomIndicatorField_MA60         CustomIndicatorField = 6  // 60日简单均线 （不建议使用）
	CustomIndicatorField_CustomIndicatorField_MA120        CustomIndicatorField = 7  // 120日简单均线（不建议使用）
	CustomIndicatorField_CustomIndicatorField_MA250        CustomIndicatorField = 8  // 250日简单均线（不建议使用）
	CustomIndicatorField_CustomIndicatorField_RSI          CustomIndicatorField = 9  // RSI 指标参数的默认值为12
	CustomIndicatorField_CustomIndicatorField_EMA5         CustomIndicatorField = 10 // 5日指数移动均线 （不建议使用）
	CustomIndicatorField_CustomIndicatorField_EMA10        CustomIndicatorField = 11 // 10日指数移动均线 （不建议使用）
	CustomIndicatorField_CustomIndicatorField_EMA20        CustomIndicatorField = 12 // 20日指数移动均线 （不建议使用）
	CustomIndicatorField_CustomIndicatorField_EMA30        CustomIndicatorField = 13 // 30日指数移动均线 （不建议使用）
	CustomIndicatorField_CustomIndicatorField_EMA60        CustomIndicatorField = 14 // 60日指数移动均线 （不建议使用）
	CustomIndicatorField_CustomIndicatorField_EMA120       CustomIndicatorField = 15 // 120日指数移动均线（不建议使用）
	CustomIndicatorField_CustomIndicatorField_EMA250       CustomIndicatorField = 16 // 250日指数移动均线（不建议使用）
	CustomIndicatorField_CustomIndicatorField_Value        CustomIndicatorField = 17 // 自定义数值（stock_field1 不支持此字段）
	CustomIndicatorField_CustomIndicatorField_MA           CustomIndicatorField = 30 // 简单均线
	CustomIndicatorField_CustomIndicatorField_EMA          CustomIndicatorField = 40 // 指数移动均线
	CustomIndicatorField_CustomIndicatorField_KDJ_K        CustomIndicatorField = 50 // KDJ 指标的 K 值。指标参数需要根据 KDJ 进行传参。不传则默认为 [9,3,3]
	CustomIndicatorField_CustomIndicatorField_KDJ_D        CustomIndicatorField = 51 // KDJ 指标的 D 值。指标参数需要根据 KDJ 进行传参。不传则默认为 [9,3,3]
	CustomIndicatorField_CustomIndicatorField_KDJ_J        CustomIndicatorField = 52 // KDJ 指标的 J 值。指标参数需要根据 KDJ 进行传参。不传则默认为 [9,3,3]
	CustomIndicatorField_CustomIndicatorField_MACD_DIFF    CustomIndicatorField = 60 // MACD 指标的 DIFF 值。指标参数需要根据 MACD 进行传参。不传则默认为 [12,26,9]
	CustomIndicatorField_CustomIndicatorField_MACD_DEA     CustomIndicatorField = 61 // MACD 指标的 DEA 值。指标参数需要根据 MACD 进行传参。不传则默认为 [12,26,9]
	CustomIndicatorField_CustomIndicatorField_MACD         CustomIndicatorField = 62 // MACD 指标的 MACD 值。指标参数需要根据 MACD 进行传参。不传则默认为 [12,26,9]
	CustomIndicatorField_CustomIndicatorField_BOLL_UPPER   CustomIndicatorField = 70 // BOLL 指标的 UPPER 值。指标参数需要根据 BOLL 进行传参。不传则默认为 [20,2]
	CustomIndicatorField_CustomIndicatorField_BOLL_MIDDLER CustomIndicatorField = 71 // BOLL 指标的 MIDDLER 值。指标参数需要根据 BOLL 进行传参。不传则默认为 [20,2]
	CustomIndicatorField_CustomIndicatorField_BOLL_LOWER   CustomIndicatorField = 72 // BOLL 指标的 LOWER 值。指标参数需要根据 BOLL 进行传参。不传则默认为 [20,2]
)

// Enum value maps for CustomIndicatorField.
var (
	CustomIndicatorField_name = map[int32]string{
		0:  "CustomIndicatorField_Unknown",
		1:  "CustomIndicatorField_Price",
		2:  "CustomIndicatorField_MA5",
		3:  "CustomIndicatorField_MA10",
		4:  "CustomIndicatorField_MA20",
		5:  "CustomIndicatorField_MA30",
		6:  "CustomIndicatorField_MA60",
		7:  "CustomIndicatorField_MA120",
		8:  "CustomIndicatorField_MA250",
		9:  "CustomIndicatorField_RSI",
		10: "CustomIndicatorField_EMA5",
		11: "CustomIndicatorField_EMA10",
		12: "CustomIndicatorField_EMA20",
		13: "CustomIndicatorField_EMA30",
		14: "CustomIndicatorField_EMA60",
		15: "CustomIndicatorField_EMA120",
		16: "CustomIndicatorField_EMA250",
		17: "CustomIndicatorField_Value",
		30: "CustomIndicatorField_MA",
		40: "CustomIndicatorField_EMA",
		50: "CustomIndicatorField_KDJ_K",
		51: "CustomIndicatorField_KDJ_D",
		52: "CustomIndicatorField_KDJ_J",
		60: "CustomIndicatorField_MACD_DIFF",
		61: "CustomIndicatorField_MACD_DEA",
		62: "CustomIndicatorField_MACD",
		70: "CustomIndicatorField_BOLL_UPPER",
		71: "CustomIndicatorField_BOLL_MIDDLER",
		72: "CustomIndicatorField_BOLL_LOWER",
	}
	CustomIndicatorField_value = map[string]int32{
		"CustomIndicatorField_Unknown":      0,
		"CustomIndicatorField_Price":        1,
		"CustomIndicatorField_MA5":          2,
		"CustomIndicatorField_MA10":         3,
		"CustomIndicatorField_MA20":         4,
		"CustomIndicatorField_MA30":         5,
		"CustomIndicatorField_MA60":         6,
		"CustomIndicatorField_MA120":        7,
		"CustomIndicatorField_MA250":        8,
		"CustomIndicatorField_RSI":          9,
		"CustomIndicatorField_EMA5":         10,
		"CustomIndicatorField_EMA10":        11,
		"CustomIndicatorField_EMA20":        12,
		"CustomIndicatorField_EMA30":        13,
		"CustomIndicatorField_EMA60":        14,
		"CustomIndicatorField_EMA120":       15,
		"CustomIndicatorField_EMA250":       16,
		"CustomIndicatorField_Value":        17,
		"CustomIndicatorField_MA":           30,
		"CustomIndicatorField_EMA":          40,
		"CustomIndicatorField_KDJ_K":        50,
		"CustomIndicatorField_KDJ_D":        51,
		"CustomIndicatorField_KDJ_J":        52,
		"CustomIndicatorField_MACD_DIFF":    60,
		"CustomIndicatorField_MACD_DEA":     61,
		"CustomIndicatorField_MACD":         62,
		"CustomIndicatorField_BOLL_UPPER":   70,
		"CustomIndicatorField_BOLL_MIDDLER": 71,
		"CustomIndicatorField_BOLL_LOWER":   72,
	}
)

func (x CustomIndicatorField) Enum() *CustomIndicatorField {
	p := new(CustomIndicatorField)
	*p = x
	return p
}

func (x CustomIndicatorField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomIndicatorField) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_Qot_StockFilter_proto_enumTypes[3].Descriptor()
}

func (CustomIndicatorField) Type() protoreflect.EnumType {
	return &file_qot_Qot_StockFilter_proto_enumTypes[3]
}

func (x CustomIndicatorField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CustomIndicatorField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CustomIndicatorField(num)
	return nil
}

// Deprecated: Use CustomIndicatorField.Descriptor instead.
func (CustomIndicatorField) EnumDescriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{3}
}

// 形态技术指标属性
type PatternField int32

const (
	PatternField_PatternField_Unknown              PatternField = 0  // 未知
	PatternField_PatternField_MAAlignmentLong      PatternField = 1  // MA多头排列（连续两天MA5>MA10>MA20>MA30>MA60，且当日收盘价大于前一天收盘价）
	PatternField_PatternField_MAAlignmentShort     PatternField = 2  // MA空头排列（连续两天MA5 <MA10 <MA20 <MA30 <MA60，且当日收盘价小于前一天收盘价）
	PatternField_PatternField_EMAAlignmentLong     PatternField = 3  // EMA多头排列（连续两天EMA5>EMA10>EMA20>EMA30>EMA60，且当日收盘价大于前一天收盘价）
	PatternField_PatternField_EMAAlignmentShort    PatternField = 4  // EMA空头排列（连续两天EMA5 <EMA10 <EMA20 <EMA30 <EMA60，且当日收盘价小于前一天收盘价）
	PatternField_PatternField_RSIGoldCrossLow      PatternField = 5  // RSI低位金叉（50以下，短线RSI上穿长线RSI（前一日短线RSI小于长线RSI，当日短线RSI大于长线RSI））
	PatternField_PatternField_RSIDeathCrossHigh    PatternField = 6  // RSI高位死叉（50以上，短线RSI下穿长线RSI（前一日短线RSI大于长线RSI，当日短线RSI小于长线RSI））
	PatternField_PatternField_RSITopDivergence     PatternField = 7  // RSI顶背离（相邻的两个K线波峰，后面的波峰对应的CLOSE>前面的波峰对应的CLOSE，后面波峰的RSI12值 <前面波峰的RSI12值）
	PatternField_PatternField_RSIBottomDivergence  PatternField = 8  // RSI底背离（相邻的两个K线波谷，后面的波谷对应的CLOSE <前面的波谷对应的CLOSE，后面波谷的RSI12值>前面波谷的RSI12值）
	PatternField_PatternField_KDJGoldCrossLow      PatternField = 9  // KDJ低位金叉（KDJ的值都小于或等于30，且前一日K,J值分别小于D值，当日K,J值分别大于D值）
	PatternField_PatternField_KDJDeathCrossHigh    PatternField = 10 // KDJ高位死叉（KDJ的值都大于或等于70，且前一日K,J值分别大于D值，当日K,J值分别小于D值）
	PatternField_PatternField_KDJTopDivergence     PatternField = 11 // KDJ顶背离（相邻的两个K线波峰，后面的波峰对应的CLOSE>前面的波峰对应的CLOSE，后面波峰的J值 <前面波峰的J值）
	PatternField_PatternField_KDJBottomDivergence  PatternField = 12 // KDJ底背离（相邻的两个K线波谷，后面的波谷对应的CLOSE <前面的波谷对应的CLOSE，后面波谷的J值>前面波谷的J值）
	PatternField_PatternField_MACDGoldCrossLow     PatternField = 13 // MACD低位金叉（DIFF上穿DEA（前一日DIFF小于DEA，当日DIFF大于DEA））
	PatternField_PatternField_MACDDeathCrossHigh   PatternField = 14 // MACD高位死叉（DIFF下穿DEA（前一日DIFF大于DEA，当日DIFF小于DEA））
	PatternField_PatternField_MACDTopDivergence    PatternField = 15 // MACD顶背离（相邻的两个K线波峰，后面的波峰对应的CLOSE>前面的波峰对应的CLOSE，后面波峰的macd值 <前面波峰的macd值）
	PatternField_PatternField_MACDBottomDivergence PatternField = 16 // MACD底背离（相邻的两个K线波谷，后面的波谷对应的CLOSE <前面的波谷对应的CLOSE，后面波谷的macd值>前面波谷的macd值）
	PatternField_PatternField_BOLLBreakUpper       PatternField = 17 // BOLL突破上轨（前一日股价低于上轨值，当日股价大于上轨值）
	PatternField_PatternField_BOLLLower            PatternField = 18 // BOLL突破下轨（前一日股价高于下轨值，当日股价小于下轨值）
	PatternField_PatternField_BOLLCrossMiddleUp    PatternField = 19 // BOLL向上破中轨（前一日股价低于中轨值，当日股价大于中轨值）
	PatternField_PatternField_BOLLCrossMiddleDown  PatternField = 20 // BOLL向下破中轨（前一日股价大于中轨值，当日股价小于中轨值）
)

// Enum value maps for PatternField.
var (
	PatternField_name = map[int32]string{
		0:  "PatternField_Unknown",
		1:  "PatternField_MAAlignmentLong",
		2:  "PatternField_MAAlignmentShort",
		3:  "PatternField_EMAAlignmentLong",
		4:  "PatternField_EMAAlignmentShort",
		5:  "PatternField_RSIGoldCrossLow",
		6:  "PatternField_RSIDeathCrossHigh",
		7:  "PatternField_RSITopDivergence",
		8:  "PatternField_RSIBottomDivergence",
		9:  "PatternField_KDJGoldCrossLow",
		10: "PatternField_KDJDeathCrossHigh",
		11: "PatternField_KDJTopDivergence",
		12: "PatternField_KDJBottomDivergence",
		13: "PatternField_MACDGoldCrossLow",
		14: "PatternField_MACDDeathCrossHigh",
		15: "PatternField_MACDTopDivergence",
		16: "PatternField_MACDBottomDivergence",
		17: "PatternField_BOLLBreakUpper",
		18: "PatternField_BOLLLower",
		19: "PatternField_BOLLCrossMiddleUp",
		20: "PatternField_BOLLCrossMiddleDown",
	}
	PatternField_value = map[string]int32{
		"PatternField_Unknown":              0,
		"PatternField_MAAlignmentLong":      1,
		"PatternField_MAAlignmentShort":     2,
		"PatternField_EMAAlignmentLong":     3,
		"PatternField_EMAAlignmentShort":    4,
		"PatternField_RSIGoldCrossLow":      5,
		"PatternField_RSIDeathCrossHigh":    6,
		"PatternField_RSITopDivergence":     7,
		"PatternField_RSIBottomDivergence":  8,
		"PatternField_KDJGoldCrossLow":      9,
		"PatternField_KDJDeathCrossHigh":    10,
		"PatternField_KDJTopDivergence":     11,
		"PatternField_KDJBottomDivergence":  12,
		"PatternField_MACDGoldCrossLow":     13,
		"PatternField_MACDDeathCrossHigh":   14,
		"PatternField_MACDTopDivergence":    15,
		"PatternField_MACDBottomDivergence": 16,
		"PatternField_BOLLBreakUpper":       17,
		"PatternField_BOLLLower":            18,
		"PatternField_BOLLCrossMiddleUp":    19,
		"PatternField_BOLLCrossMiddleDown":  20,
	}
)

func (x PatternField) Enum() *PatternField {
	p := new(PatternField)
	*p = x
	return p
}

func (x PatternField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternField) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_Qot_StockFilter_proto_enumTypes[4].Descriptor()
}

func (PatternField) Type() protoreflect.EnumType {
	return &file_qot_Qot_StockFilter_proto_enumTypes[4]
}

func (x PatternField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PatternField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PatternField(num)
	return nil
}

// Deprecated: Use PatternField.Descriptor instead.
func (PatternField) EnumDescriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{4}
}

// 财务时间周期
type FinancialQuarter int32

const (
	FinancialQuarter_FinancialQuarter_Unknown           FinancialQuarter = 0 // 未知
	FinancialQuarter_FinancialQuarter_Annual            FinancialQuarter = 1 // 年报
	FinancialQuarter_FinancialQuarter_FirstQuarter      FinancialQuarter = 2 // 一季报
	FinancialQuarter_FinancialQuarter_Interim           FinancialQuarter = 3 // 中报
	FinancialQuarter_FinancialQuarter_ThirdQuarter      FinancialQuarter = 4 // 三季报
	FinancialQuarter_FinancialQuarter_MostRecentQuarter FinancialQuarter = 5 // 最近季报
)

// Enum value maps for FinancialQuarter.
var (
	FinancialQuarter_name = map[int32]string{
		0: "FinancialQuarter_Unknown",
		1: "FinancialQuarter_Annual",
		2: "FinancialQuarter_FirstQuarter",
		3: "FinancialQuarter_Interim",
		4: "FinancialQuarter_ThirdQuarter",
		5: "FinancialQuarter_MostRecentQuarter",
	}
	FinancialQuarter_value = map[string]int32{
		"FinancialQuarter_Unknown":           0,
		"FinancialQuarter_Annual":            1,
		"FinancialQuarter_FirstQuarter":      2,
		"FinancialQuarter_Interim":           3,
		"FinancialQuarter_ThirdQuarter":      4,
		"FinancialQuarter_MostRecentQuarter": 5,
	}
)

func (x FinancialQuarter) Enum() *FinancialQuarter {
	p := new(FinancialQuarter)
	*p = x
	return p
}

func (x FinancialQuarter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialQuarter) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_Qot_StockFilter_proto_enumTypes[5].Descriptor()
}

func (FinancialQuarter) Type() protoreflect.EnumType {
	return &file_qot_Qot_StockFilter_proto_enumTypes[5]
}

func (x FinancialQuarter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FinancialQuarter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FinancialQuarter(num)
	return nil
}

// Deprecated: Use FinancialQuarter.Descriptor instead.
func (FinancialQuarter) EnumDescriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{5}
}

// 相对位置比较
type RelativePosition int32

const (
	RelativePosition_RelativePosition_Unknown   RelativePosition = 0 // 未知
	RelativePosition_RelativePosition_More      RelativePosition = 1 // 大于，first位于second的上方
	RelativePosition_RelativePosition_Less      RelativePosition = 2 // 小于，first位于second的下方
	RelativePosition_RelativePosition_CrossUp   RelativePosition = 3 // 升穿，first从下往上穿second
	RelativePosition_RelativePosition_CrossDown RelativePosition = 4 // 跌穿，first从上往下穿second
)

// Enum value maps for RelativePosition.
var (
	RelativePosition_name = map[int32]string{
		0: "RelativePosition_Unknown",
		1: "RelativePosition_More",
		2: "RelativePosition_Less",
		3: "RelativePosition_CrossUp",
		4: "RelativePosition_CrossDown",
	}
	RelativePosition_value = map[string]int32{
		"RelativePosition_Unknown":   0,
		"RelativePosition_More":      1,
		"RelativePosition_Less":      2,
		"RelativePosition_CrossUp":   3,
		"RelativePosition_CrossDown": 4,
	}
)

func (x RelativePosition) Enum() *RelativePosition {
	p := new(RelativePosition)
	*p = x
	return p
}

func (x RelativePosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelativePosition) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_Qot_StockFilter_proto_enumTypes[6].Descriptor()
}

func (RelativePosition) Type() protoreflect.EnumType {
	return &file_qot_Qot_StockFilter_proto_enumTypes[6]
}

func (x RelativePosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RelativePosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RelativePosition(num)
	return nil
}

// Deprecated: Use RelativePosition.Descriptor instead.
func (RelativePosition) EnumDescriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{6}
}

// 排序方向
type SortDir int32

const (
	SortDir_SortDir_No      SortDir = 0 // 不排序
	SortDir_SortDir_Ascend  SortDir = 1 // 升序
	SortDir_SortDir_Descend SortDir = 2 // 降序
)

// Enum value maps for SortDir.
var (
	SortDir_name = map[int32]string{
		0: "SortDir_No",
		1: "SortDir_Ascend",
		2: "SortDir_Descend",
	}
	SortDir_value = map[string]int32{
		"SortDir_No":      0,
		"SortDir_Ascend":  1,
		"SortDir_Descend": 2,
	}
)

func (x SortDir) Enum() *SortDir {
	p := new(SortDir)
	*p = x
	return p
}

func (x SortDir) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDir) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_Qot_StockFilter_proto_enumTypes[7].Descriptor()
}

func (SortDir) Type() protoreflect.EnumType {
	return &file_qot_Qot_StockFilter_proto_enumTypes[7]
}

func (x SortDir) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SortDir) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SortDir(num)
	return nil
}

// Deprecated: Use SortDir.Descriptor instead.
func (SortDir) EnumDescriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{7}
}

// 简单属性筛选
type BaseFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     *int32                 `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"`   // StockField 简单属性
	FilterMin     *float64               `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin,omitempty"`  // 区间下限（闭区间），不传代表下限为 -∞
	FilterMax     *float64               `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax,omitempty"`  // 区间上限（闭区间），不传代表上限为 +∞
	IsNoFilter    *bool                  `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter,omitempty"` // 该字段是否不需要筛选，True：不筛选，False：筛选。不传默认不筛选
	SortDir       *int32                 `protobuf:"varint,5,opt,name=sortDir" json:"sortDir,omitempty"`       // SortDir 排序方向，默认不排序。
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseFilter) Reset() {
	*x = BaseFilter{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseFilter) ProtoMessage() {}

func (x *BaseFilter) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseFilter.ProtoReflect.Descriptor instead.
func (*BaseFilter) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{0}
}

func (x *BaseFilter) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *BaseFilter) GetFilterMin() float64 {
	if x != nil && x.FilterMin != nil {
		return *x.FilterMin
	}
	return 0
}

func (x *BaseFilter) GetFilterMax() float64 {
	if x != nil && x.FilterMax != nil {
		return *x.FilterMax
	}
	return 0
}

func (x *BaseFilter) GetIsNoFilter() bool {
	if x != nil && x.IsNoFilter != nil {
		return *x.IsNoFilter
	}
	return false
}

func (x *BaseFilter) GetSortDir() int32 {
	if x != nil && x.SortDir != nil {
		return *x.SortDir
	}
	return 0
}

// 累积属性筛选
type AccumulateFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     *int32                 `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"`   // AccumulateField 累积属性
	FilterMin     *float64               `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin,omitempty"`  // 区间下限（闭区间），不传代表下限为 -∞
	FilterMax     *float64               `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax,omitempty"`  // 区间上限（闭区间），不传代表上限为 +∞
	IsNoFilter    *bool                  `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter,omitempty"` // 该字段是否不需要筛选，True：不筛选，False：筛选。不传默认不筛选
	SortDir       *int32                 `protobuf:"varint,5,opt,name=sortDir" json:"sortDir,omitempty"`       // SortDir 排序方向，默认不排序。
	Days          *int32                 `protobuf:"varint,6,req,name=days" json:"days,omitempty"`             // 近几日，累积时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccumulateFilter) Reset() {
	*x = AccumulateFilter{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccumulateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccumulateFilter) ProtoMessage() {}

func (x *AccumulateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccumulateFilter.ProtoReflect.Descriptor instead.
func (*AccumulateFilter) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{1}
}

func (x *AccumulateFilter) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *AccumulateFilter) GetFilterMin() float64 {
	if x != nil && x.FilterMin != nil {
		return *x.FilterMin
	}
	return 0
}

func (x *AccumulateFilter) GetFilterMax() float64 {
	if x != nil && x.FilterMax != nil {
		return *x.FilterMax
	}
	return 0
}

func (x *AccumulateFilter) GetIsNoFilter() bool {
	if x != nil && x.IsNoFilter != nil {
		return *x.IsNoFilter
	}
	return false
}

func (x *AccumulateFilter) GetSortDir() int32 {
	if x != nil && x.SortDir != nil {
		return *x.SortDir
	}
	return 0
}

func (x *AccumulateFilter) GetDays() int32 {
	if x != nil && x.Days != nil {
		return *x.Days
	}
	return 0
}

// 财务属性筛选
type FinancialFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     *int32                 `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"`   // FinancialField 财务属性
	FilterMin     *float64               `protobuf:"fixed64,2,opt,name=filterMin" json:"filterMin,omitempty"`  // 区间下限（闭区间），不传代表下限为 -∞
	FilterMax     *float64               `protobuf:"fixed64,3,opt,name=filterMax" json:"filterMax,omitempty"`  // 区间上限（闭区间），不传代表上限为 +∞
	IsNoFilter    *bool                  `protobuf:"varint,4,opt,name=isNoFilter" json:"isNoFilter,omitempty"` // 该字段是否不需要筛选，True：不筛选，False：筛选。不传默认不筛选
	SortDir       *int32                 `protobuf:"varint,5,opt,name=sortDir" json:"sortDir,omitempty"`       // SortDir 排序方向，默认不排序。
	Quarter       *int32                 `protobuf:"varint,6,req,name=quarter" json:"quarter,omitempty"`       // FinancialQuarter 财报累积时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinancialFilter) Reset() {
	*x = FinancialFilter{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinancialFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialFilter) ProtoMessage() {}

func (x *FinancialFilter) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialFilter.ProtoReflect.Descriptor instead.
func (*FinancialFilter) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{2}
}

func (x *FinancialFilter) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *FinancialFilter) GetFilterMin() float64 {
	if x != nil && x.FilterMin != nil {
		return *x.FilterMin
	}
	return 0
}

func (x *FinancialFilter) GetFilterMax() float64 {
	if x != nil && x.FilterMax != nil {
		return *x.FilterMax
	}
	return 0
}

func (x *FinancialFilter) GetIsNoFilter() bool {
	if x != nil && x.IsNoFilter != nil {
		return *x.IsNoFilter
	}
	return false
}

func (x *FinancialFilter) GetSortDir() int32 {
	if x != nil && x.SortDir != nil {
		return *x.SortDir
	}
	return 0
}

func (x *FinancialFilter) GetQuarter() int32 {
	if x != nil && x.Quarter != nil {
		return *x.Quarter
	}
	return 0
}

// 形态技术指标属性筛选
type PatternFilter struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FieldName         *int32                 `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"`                 // PatternField 形态技术指标属性
	KlType            *int32                 `protobuf:"varint,2,req,name=klType" json:"klType,omitempty"`                       // Qot_Common.KLType，K线类型，仅支持K_60M，K_DAY，K_WEEK，K_MON 四种时间周期
	IsNoFilter        *bool                  `protobuf:"varint,3,opt,name=isNoFilter" json:"isNoFilter,omitempty"`               // 该字段是否不需要筛选，True代表不筛选，False代表筛选。不传默认为不筛选
	ConsecutivePeriod *int32                 `protobuf:"varint,4,opt,name=consecutivePeriod" json:"consecutivePeriod,omitempty"` // 筛选连续周期都符合条件的数据，填写范围为[1,12]
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PatternFilter) Reset() {
	*x = PatternFilter{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatternFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFilter) ProtoMessage() {}

func (x *PatternFilter) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFilter.ProtoReflect.Descriptor instead.
func (*PatternFilter) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{3}
}

func (x *PatternFilter) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *PatternFilter) GetKlType() int32 {
	if x != nil && x.KlType != nil {
		return *x.KlType
	}
	return 0
}

func (x *PatternFilter) GetIsNoFilter() bool {
	if x != nil && x.IsNoFilter != nil {
		return *x.IsNoFilter
	}
	return false
}

func (x *PatternFilter) GetConsecutivePeriod() int32 {
	if x != nil && x.ConsecutivePeriod != nil {
		return *x.ConsecutivePeriod
	}
	return 0
}

// 自定义技术指标属性筛选
type CustomIndicatorFilter struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	FirstFieldName      *int32                 `protobuf:"varint,1,req,name=firstFieldName" json:"firstFieldName,omitempty"`           // CustomIndicatorField 自定义技术指标属性
	SecondFieldName     *int32                 `protobuf:"varint,2,req,name=secondFieldName" json:"secondFieldName,omitempty"`         // CustomIndicatorField 自定义技术指标属性
	RelativePosition    *int32                 `protobuf:"varint,3,req,name=relativePosition" json:"relativePosition,omitempty"`       // RelativePosition 相对位置
	FieldValue          *float64               `protobuf:"fixed64,4,opt,name=fieldValue" json:"fieldValue,omitempty"`                  // 自定义数值。当 stock_field2 选择自定义数值时，value 为必传参数。支持与KDJ_K，KDJ_D，KDJ_J，MACD_DIFF，MACD_DEA，MACD，BOLL_UPPER，BOLL_MIDDLER，BOLL_LOWER 进行比较（stock_field1 不支持此字段）
	KlType              *int32                 `protobuf:"varint,5,req,name=klType" json:"klType,omitempty"`                           // Qot_Common.KLType，K线类型，仅支持K_60M，K_DAY，K_WEEK，K_MON 四种时间周期
	IsNoFilter          *bool                  `protobuf:"varint,6,opt,name=isNoFilter" json:"isNoFilter,omitempty"`                   // 该字段是否不需要筛选，True代表不筛选，False代表筛选。不传默认为不筛选
	FirstFieldParaList  []int32                `protobuf:"varint,7,rep,name=firstFieldParaList" json:"firstFieldParaList,omitempty"`   // 自定义指标参数 根据指标类型进行传参：1. MA：[平均移动周期] 2.EMA：[指数移动平均周期] 3.RSI：[RSI 指标周期] 4.MACD：[快速平均线值, 慢速平均线值, DIF值] 5.BOLL：[均线周期, 偏移值] 6.KDJ：[RSV 周期, K 值计算周期, D 值计算周期]
	SecondFieldParaList []int32                `protobuf:"varint,8,rep,name=secondFieldParaList" json:"secondFieldParaList,omitempty"` // 自定义指标参数 根据指标类型进行传参：1. MA：[平均移动周期] 2.EMA：[指数移动平均周期] 3.RSI：[RSI 指标周期] 4.MACD：[快速平均线值, 慢速平均线值, DIF值] 5.BOLL：[均线周期, 偏移值] 6.KDJ：[RSV 周期, K 值计算周期, D 值计算周期]
	ConsecutivePeriod   *int32                 `protobuf:"varint,9,opt,name=consecutivePeriod" json:"consecutivePeriod,omitempty"`     // 筛选连续周期都符合条件的数据，填写范围为[1,12]
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CustomIndicatorFilter) Reset() {
	*x = CustomIndicatorFilter{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomIndicatorFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomIndicatorFilter) ProtoMessage() {}

func (x *CustomIndicatorFilter) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomIndicatorFilter.ProtoReflect.Descriptor instead.
func (*CustomIndicatorFilter) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{4}
}

func (x *CustomIndicatorFilter) GetFirstFieldName() int32 {
	if x != nil && x.FirstFieldName != nil {
		return *x.FirstFieldName
	}
	return 0
}

func (x *CustomIndicatorFilter) GetSecondFieldName() int32 {
	if x != nil && x.SecondFieldName != nil {
		return *x.SecondFieldName
	}
	return 0
}

func (x *CustomIndicatorFilter) GetRelativePosition() int32 {
	if x != nil && x.RelativePosition != nil {
		return *x.RelativePosition
	}
	return 0
}

func (x *CustomIndicatorFilter) GetFieldValue() float64 {
	if x != nil && x.FieldValue != nil {
		return *x.FieldValue
	}
	return 0
}

func (x *CustomIndicatorFilter) GetKlType() int32 {
	if x != nil && x.KlType != nil {
		return *x.KlType
	}
	return 0
}

func (x *CustomIndicatorFilter) GetIsNoFilter() bool {
	if x != nil && x.IsNoFilter != nil {
		return *x.IsNoFilter
	}
	return false
}

func (x *CustomIndicatorFilter) GetFirstFieldParaList() []int32 {
	if x != nil {
		return x.FirstFieldParaList
	}
	return nil
}

func (x *CustomIndicatorFilter) GetSecondFieldParaList() []int32 {
	if x != nil {
		return x.SecondFieldParaList
	}
	return nil
}

func (x *CustomIndicatorFilter) GetConsecutivePeriod() int32 {
	if x != nil && x.ConsecutivePeriod != nil {
		return *x.ConsecutivePeriod
	}
	return 0
}

// 简单属性数据
type BaseData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     *int32                 `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"` // StockField 简单属性
	Value         *float64               `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseData) Reset() {
	*x = BaseData{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseData) ProtoMessage() {}

func (x *BaseData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseData.ProtoReflect.Descriptor instead.
func (*BaseData) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{5}
}

func (x *BaseData) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *BaseData) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// 累积属性数据
type AccumulateData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     *int32                 `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"` // AccumulateField 累积属性
	Value         *float64               `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	Days          *int32                 `protobuf:"varint,3,req,name=days" json:"days,omitempty"` // 近几日，累积时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccumulateData) Reset() {
	*x = AccumulateData{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccumulateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccumulateData) ProtoMessage() {}

func (x *AccumulateData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccumulateData.ProtoReflect.Descriptor instead.
func (*AccumulateData) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{6}
}

func (x *AccumulateData) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *AccumulateData) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *AccumulateData) GetDays() int32 {
	if x != nil && x.Days != nil {
		return *x.Days
	}
	return 0
}

// 财务属性数据
type FinancialData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     *int32                 `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"` // FinancialField 财务属性
	Value         *float64               `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	Quarter       *int32                 `protobuf:"varint,3,req,name=quarter" json:"quarter,omitempty"` // FinancialQuarter 财报累积时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinancialData) Reset() {
	*x = FinancialData{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinancialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialData) ProtoMessage() {}

func (x *FinancialData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialData.ProtoReflect.Descriptor instead.
func (*FinancialData) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{7}
}

func (x *FinancialData) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *FinancialData) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *FinancialData) GetQuarter() int32 {
	if x != nil && x.Quarter != nil {
		return *x.Quarter
	}
	return 0
}

// 自定义技术指标属性数据
type CustomIndicatorData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FieldName     *int32                 `protobuf:"varint,1,req,name=fieldName" json:"fieldName,omitempty"` // CustomIndicatorField 自定义技术指标属性
	Value         *float64               `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	KlType        *int32                 `protobuf:"varint,3,req,name=klType" json:"klType,omitempty"`               // Qot_Common.KLType，K线类型，仅支持K_60M，K_DAY，K_WEEK，K_MON 四种时间周期
	FieldParaList []int32                `protobuf:"varint,4,rep,name=fieldParaList" json:"fieldParaList,omitempty"` // 自定义指标参数 根据指标类型进行传参：1. MA：[平均移动周期] 2.EMA：[指数移动平均周期] 3.RSI：[RSI 指标周期] 4.MACD：[快速平均线值, 慢速平均线值, DIF值] 5.BOLL：[均线周期, 偏移值] 6.KDJ：[RSV 周期, K 值计算周期, D 值计算周期]
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomIndicatorData) Reset() {
	*x = CustomIndicatorData{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomIndicatorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomIndicatorData) ProtoMessage() {}

func (x *CustomIndicatorData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomIndicatorData.ProtoReflect.Descriptor instead.
func (*CustomIndicatorData) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{8}
}

func (x *CustomIndicatorData) GetFieldName() int32 {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return 0
}

func (x *CustomIndicatorData) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CustomIndicatorData) GetKlType() int32 {
	if x != nil && x.KlType != nil {
		return *x.KlType
	}
	return 0
}

func (x *CustomIndicatorData) GetFieldParaList() []int32 {
	if x != nil {
		return x.FieldParaList
	}
	return nil
}

// 返回的股票数据
type StockData struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Security                *common.Security       `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`                               // 股票
	Name                    *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`                                       // 股票名称
	BaseDataList            []*BaseData            `protobuf:"bytes,3,rep,name=baseDataList" json:"baseDataList,omitempty"`                       // 筛选后的简单指标属性数据
	AccumulateDataList      []*AccumulateData      `protobuf:"bytes,4,rep,name=accumulateDataList" json:"accumulateDataList,omitempty"`           // 筛选后的累积指标属性数据
	FinancialDataList       []*FinancialData       `protobuf:"bytes,5,rep,name=financialDataList" json:"financialDataList,omitempty"`             // 筛选后的财务指标属性数据
	CustomIndicatorDataList []*CustomIndicatorData `protobuf:"bytes,6,rep,name=customIndicatorDataList" json:"customIndicatorDataList,omitempty"` // 自定义技术指标属性数据
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *StockData) Reset() {
	*x = StockData{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockData) ProtoMessage() {}

func (x *StockData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockData.ProtoReflect.Descriptor instead.
func (*StockData) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{9}
}

func (x *StockData) GetSecurity() *common.Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *StockData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StockData) GetBaseDataList() []*BaseData {
	if x != nil {
		return x.BaseDataList
	}
	return nil
}

func (x *StockData) GetAccumulateDataList() []*AccumulateData {
	if x != nil {
		return x.AccumulateDataList
	}
	return nil
}

func (x *StockData) GetFinancialDataList() []*FinancialData {
	if x != nil {
		return x.FinancialDataList
	}
	return nil
}

func (x *StockData) GetCustomIndicatorDataList() []*CustomIndicatorData {
	if x != nil {
		return x.CustomIndicatorDataList
	}
	return nil
}

type C2S struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Begin  *int32                 `protobuf:"varint,1,req,name=begin" json:"begin,omitempty"`   // 数据起始点
	Num    *int32                 `protobuf:"varint,2,req,name=num" json:"num,omitempty"`       // 请求数据个数，最大200
	Market *int32                 `protobuf:"varint,3,req,name=market" json:"market,omitempty"` // Qot_Common::QotMarket股票市场，支持沪股和深股，且沪股和深股不做区分都代表A股市场。
	// 以下为筛选条件，可选字段，不填表示不过滤
	Plate                     *common.Security         `protobuf:"bytes,4,opt,name=plate" json:"plate,omitempty"`                                         // 板块
	BaseFilterList            []*BaseFilter            `protobuf:"bytes,5,rep,name=baseFilterList" json:"baseFilterList,omitempty"`                       // 简单指标过滤器
	AccumulateFilterList      []*AccumulateFilter      `protobuf:"bytes,6,rep,name=accumulateFilterList" json:"accumulateFilterList,omitempty"`           // 累积指标过滤器
	FinancialFilterList       []*FinancialFilter       `protobuf:"bytes,7,rep,name=financialFilterList" json:"financialFilterList,omitempty"`             // 财务指标过滤器
	PatternFilterList         []*PatternFilter         `protobuf:"bytes,8,rep,name=patternFilterList" json:"patternFilterList,omitempty"`                 // 形态技术指标过滤器
	CustomIndicatorFilterList []*CustomIndicatorFilter `protobuf:"bytes,9,rep,name=customIndicatorFilterList" json:"customIndicatorFilterList,omitempty"` // 自定义技术指标过滤器
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *C2S) Reset() {
	*x = C2S{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S) ProtoMessage() {}

func (x *C2S) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S.ProtoReflect.Descriptor instead.
func (*C2S) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{10}
}

func (x *C2S) GetBegin() int32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *C2S) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *C2S) GetMarket() int32 {
	if x != nil && x.Market != nil {
		return *x.Market
	}
	return 0
}

func (x *C2S) GetPlate() *common.Security {
	if x != nil {
		return x.Plate
	}
	return nil
}

func (x *C2S) GetBaseFilterList() []*BaseFilter {
	if x != nil {
		return x.BaseFilterList
	}
	return nil
}

func (x *C2S) GetAccumulateFilterList() []*AccumulateFilter {
	if x != nil {
		return x.AccumulateFilterList
	}
	return nil
}

func (x *C2S) GetFinancialFilterList() []*FinancialFilter {
	if x != nil {
		return x.FinancialFilterList
	}
	return nil
}

func (x *C2S) GetPatternFilterList() []*PatternFilter {
	if x != nil {
		return x.PatternFilterList
	}
	return nil
}

func (x *C2S) GetCustomIndicatorFilterList() []*CustomIndicatorFilter {
	if x != nil {
		return x.CustomIndicatorFilterList
	}
	return nil
}

type S2C struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastPage      *bool                  `protobuf:"varint,1,req,name=lastPage" json:"lastPage,omitempty"` // 是否最后一页了,false:非最后一页,还有窝轮记录未返回; true:已是最后一页
	AllCount      *int32                 `protobuf:"varint,2,req,name=allCount" json:"allCount,omitempty"` // 该条件请求所有数据的个数
	DataList      []*StockData           `protobuf:"bytes,3,rep,name=dataList" json:"dataList,omitempty"`  // 返回的股票数据列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S2C) Reset() {
	*x = S2C{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C) ProtoMessage() {}

func (x *S2C) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C.ProtoReflect.Descriptor instead.
func (*S2C) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{11}
}

func (x *S2C) GetLastPage() bool {
	if x != nil && x.LastPage != nil {
		return *x.LastPage
	}
	return false
}

func (x *S2C) GetAllCount() int32 {
	if x != nil && x.AllCount != nil {
		return *x.AllCount
	}
	return 0
}

func (x *S2C) GetDataList() []*StockData {
	if x != nil {
		return x.DataList
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	C2S           *C2S                   `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{12}
}

func (x *Request) GetC2S() *C2S {
	if x != nil {
		return x.C2S
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RetType       *int32                 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"` // RetType,返回结果
	RetMsg        *string                `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg,omitempty"`
	ErrCode       *int32                 `protobuf:"varint,3,opt,name=errCode" json:"errCode,omitempty"`
	S2C           *S2C                   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for Response fields.
const (
	Default_Response_RetType = int32(-400)
)

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_StockFilter_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_qot_Qot_StockFilter_proto_rawDescGZIP(), []int{13}
}

func (x *Response) GetRetType() int32 {
	if x != nil && x.RetType != nil {
		return *x.RetType
	}
	return Default_Response_RetType
}

func (x *Response) GetRetMsg() string {
	if x != nil && x.RetMsg != nil {
		return *x.RetMsg
	}
	return ""
}

func (x *Response) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *Response) GetS2C() *S2C {
	if x != nil {
		return x.S2C
	}
	return nil
}

var File_qot_Qot_StockFilter_proto protoreflect.FileDescriptor

const file_qot_Qot_StockFilter_proto_rawDesc = "" +
	"\n" +
	"\x19qot/Qot_StockFilter.proto\x12\x0fQot_StockFilter\x1a\x13common/Common.proto\x1a\x14qot/Qot_Common.proto\"\xa0\x01\n" +
	"\n" +
	"BaseFilter\x12\x1c\n" +
	"\tfieldName\x18\x01 \x02(\x05R\tfieldName\x12\x1c\n" +
	"\tfilterMin\x18\x02 \x01(\x01R\tfilterMin\x12\x1c\n" +
	"\tfilterMax\x18\x03 \x01(\x01R\tfilterMax\x12\x1e\n" +
	"\n" +
	"isNoFilter\x18\x04 \x01(\bR\n" +
	"isNoFilter\x12\x18\n" +
	"\asortDir\x18\x05 \x01(\x05R\asortDir\"\xba\x01\n" +
	"\x10AccumulateFilter\x12\x1c\n" +
	"\tfieldName\x18\x01 \x02(\x05R\tfieldName\x12\x1c\n" +
	"\tfilterMin\x18\x02 \x01(\x01R\tfilterMin\x12\x1c\n" +
	"\tfilterMax\x18\x03 \x01(\x01R\tfilterMax\x12\x1e\n" +
	"\n" +
	"isNoFilter\x18\x04 \x01(\bR\n" +
	"isNoFilter\x12\x18\n" +
	"\asortDir\x18\x05 \x01(\x05R\asortDir\x12\x12\n" +
	"\x04days\x18\x06 \x02(\x05R\x04days\"\xbf\x01\n" +
	"\x0fFinancialFilter\x12\x1c\n" +
	"\tfieldName\x18\x01 \x02(\x05R\tfieldName\x12\x1c\n" +
	"\tfilterMin\x18\x02 \x01(\x01R\tfilterMin\x12\x1c\n" +
	"\tfilterMax\x18\x03 \x01(\x01R\tfilterMax\x12\x1e\n" +
	"\n" +
	"isNoFilter\x18\x04 \x01(\bR\n" +
	"isNoFilter\x12\x18\n" +
	"\asortDir\x18\x05 \x01(\x05R\asortDir\x12\x18\n" +
	"\aquarter\x18\x06 \x02(\x05R\aquarter\"\x93\x01\n" +
	"\rPatternFilter\x12\x1c\n" +
	"\tfieldName\x18\x01 \x02(\x05R\tfieldName\x12\x16\n" +
	"\x06klType\x18\x02 \x02(\x05R\x06klType\x12\x1e\n" +
	"\n" +
	"isNoFilter\x18\x03 \x01(\bR\n" +
	"isNoFilter\x12,\n" +
	"\x11consecutivePeriod\x18\x04 \x01(\x05R\x11consecutivePeriod\"\xfd\x02\n" +
	"\x15CustomIndicatorFilter\x12&\n" +
	"\x0efirstFieldName\x18\x01 \x02(\x05R\x0efirstFieldName\x12(\n" +
	"\x0fsecondFieldName\x18\x02 \x02(\x05R\x0fsecondFieldName\x12*\n" +
	"\x10relativePosition\x18\x03 \x02(\x05R\x10relativePosition\x12\x1e\n" +
	"\n" +
	"fieldValue\x18\x04 \x01(\x01R\n" +
	"fieldValue\x12\x16\n" +
	"\x06klType\x18\x05 \x02(\x05R\x06klType\x12\x1e\n" +
	"\n" +
	"isNoFilter\x18\x06 \x01(\bR\n" +
	"isNoFilter\x12.\n" +
	"\x12firstFieldParaList\x18\a \x03(\x05R\x12firstFieldParaList\x120\n" +
	"\x13secondFieldParaList\x18\b \x03(\x05R\x13secondFieldParaList\x12,\n" +
	"\x11consecutivePeriod\x18\t \x01(\x05R\x11consecutivePeriod\">\n" +
	"\bBaseData\x12\x1c\n" +
	"\tfieldName\x18\x01 \x02(\x05R\tfieldName\x12\x14\n" +
	"\x05value\x18\x02 \x02(\x01R\x05value\"X\n" +
	"\x0eAccumulateData\x12\x1c\n" +
	"\tfieldName\x18\x01 \x02(\x05R\tfieldName\x12\x14\n" +
	"\x05value\x18\x02 \x02(\x01R\x05value\x12\x12\n" +
	"\x04days\x18\x03 \x02(\x05R\x04days\"]\n" +
	"\rFinancialData\x12\x1c\n" +
	"\tfieldName\x18\x01 \x02(\x05R\tfieldName\x12\x14\n" +
	"\x05value\x18\x02 \x02(\x01R\x05value\x12\x18\n" +
	"\aquarter\x18\x03 \x02(\x05R\aquarter\"\x87\x01\n" +
	"\x13CustomIndicatorData\x12\x1c\n" +
	"\tfieldName\x18\x01 \x02(\x05R\tfieldName\x12\x14\n" +
	"\x05value\x18\x02 \x02(\x01R\x05value\x12\x16\n" +
	"\x06klType\x18\x03 \x02(\x05R\x06klType\x12$\n" +
	"\rfieldParaList\x18\x04 \x03(\x05R\rfieldParaList\"\x8f\x03\n" +
	"\tStockData\x120\n" +
	"\bsecurity\x18\x01 \x02(\v2\x14.Qot_Common.SecurityR\bsecurity\x12\x12\n" +
	"\x04name\x18\x02 \x02(\tR\x04name\x12=\n" +
	"\fbaseDataList\x18\x03 \x03(\v2\x19.Qot_StockFilter.BaseDataR\fbaseDataList\x12O\n" +
	"\x12accumulateDataList\x18\x04 \x03(\v2\x1f.Qot_StockFilter.AccumulateDataR\x12accumulateDataList\x12L\n" +
	"\x11financialDataList\x18\x05 \x03(\v2\x1e.Qot_StockFilter.FinancialDataR\x11financialDataList\x12^\n" +
	"\x17customIndicatorDataList\x18\x06 \x03(\v2$.Qot_StockFilter.CustomIndicatorDataR\x17customIndicatorDataList\"\x95\x04\n" +
	"\x03C2S\x12\x14\n" +
	"\x05begin\x18\x01 \x02(\x05R\x05begin\x12\x10\n" +
	"\x03num\x18\x02 \x02(\x05R\x03num\x12\x16\n" +
	"\x06market\x18\x03 \x02(\x05R\x06market\x12*\n" +
	"\x05plate\x18\x04 \x01(\v2\x14.Qot_Common.SecurityR\x05plate\x12C\n" +
	"\x0ebaseFilterList\x18\x05 \x03(\v2\x1b.Qot_StockFilter.BaseFilterR\x0ebaseFilterList\x12U\n" +
	"\x14accumulateFilterList\x18\x06 \x03(\v2!.Qot_StockFilter.AccumulateFilterR\x14accumulateFilterList\x12R\n" +
	"\x13financialFilterList\x18\a \x03(\v2 .Qot_StockFilter.FinancialFilterR\x13financialFilterList\x12L\n" +
	"\x11patternFilterList\x18\b \x03(\v2\x1e.Qot_StockFilter.PatternFilterR\x11patternFilterList\x12d\n" +
	"\x19customIndicatorFilterList\x18\t \x03(\v2&.Qot_StockFilter.CustomIndicatorFilterR\x19customIndicatorFilterList\"u\n" +
	"\x03S2C\x12\x1a\n" +
	"\blastPage\x18\x01 \x02(\bR\blastPage\x12\x1a\n" +
	"\ballCount\x18\x02 \x02(\x05R\ballCount\x126\n" +
	"\bdataList\x18\x03 \x03(\v2\x1a.Qot_StockFilter.StockDataR\bdataList\"1\n" +
	"\aRequest\x12&\n" +
	"\x03c2s\x18\x01 \x02(\v2\x14.Qot_StockFilter.C2SR\x03c2s\"\x84\x01\n" +
	"\bResponse\x12\x1e\n" +
	"\aretType\x18\x01 \x02(\x05:\x04-400R\aretType\x12\x16\n" +
	"\x06retMsg\x18\x02 \x01(\tR\x06retMsg\x12\x18\n" +
	"\aerrCode\x18\x03 \x01(\x05R\aerrCode\x12&\n" +
	"\x03s2c\x18\x04 \x01(\v2\x14.Qot_StockFilter.S2CR\x03s2c*\x9e\x05\n" +
	"\n" +
	"StockField\x12\x16\n" +
	"\x12StockField_Unknown\x10\x00\x12\x18\n" +
	"\x14StockField_StockCode\x10\x01\x12\x18\n" +
	"\x14StockField_StockName\x10\x02\x12\x17\n" +
	"\x13StockField_CurPrice\x10\x03\x12,\n" +
	"(StockField_CurPriceToHighest52WeeksRatio\x10\x04\x12+\n" +
	"'StockField_CurPriceToLowest52WeeksRatio\x10\x05\x12-\n" +
	")StockField_HighPriceToHighest52WeeksRatio\x10\x06\x12+\n" +
	"'StockField_LowPriceToLowest52WeeksRatio\x10\a\x12\x1a\n" +
	"\x16StockField_VolumeRatio\x10\b\x12\x1a\n" +
	"\x16StockField_BidAskRatio\x10\t\x12\x17\n" +
	"\x13StockField_LotPrice\x10\n" +
	"\x12\x18\n" +
	"\x14StockField_MarketVal\x10\v\x12\x17\n" +
	"\x13StockField_PeAnnual\x10\f\x12\x14\n" +
	"\x10StockField_PeTTM\x10\r\x12\x15\n" +
	"\x11StockField_PbRate\x10\x0e\x12\x1d\n" +
	"\x19StockField_ChangeRate5min\x10\x0f\x12\"\n" +
	"\x1eStockField_ChangeRateBeginYear\x10\x10\x12\x14\n" +
	"\x10StockField_PSTTM\x10\x11\x12\x15\n" +
	"\x11StockField_PCFTTM\x10\x12\x12\x19\n" +
	"\x15StockField_TotalShare\x10\x13\x12\x19\n" +
	"\x15StockField_FloatShare\x10\x14\x12\x1d\n" +
	"\x19StockField_FloatMarketVal\x10\x15*\xc9\x01\n" +
	"\x0fAccumulateField\x12\x1b\n" +
	"\x17AccumulateField_Unknown\x10\x00\x12\x1e\n" +
	"\x1aAccumulateField_ChangeRate\x10\x01\x12\x1d\n" +
	"\x19AccumulateField_Amplitude\x10\x02\x12\x1a\n" +
	"\x16AccumulateField_Volume\x10\x03\x12\x1c\n" +
	"\x18AccumulateField_Turnover\x10\x04\x12 \n" +
	"\x1cAccumulateField_TurnoverRate\x10\x05*\xcb\r\n" +
	"\x0eFinancialField\x12\x1a\n" +
	"\x16FinancialField_Unknown\x10\x00\x12\x1c\n" +
	"\x18FinancialField_NetProfit\x10\x01\x12\"\n" +
	"\x1eFinancialField_NetProfitGrowth\x10\x02\x12 \n" +
	"\x1cFinancialField_SumOfBusiness\x10\x03\x12&\n" +
	"\"FinancialField_SumOfBusinessGrowth\x10\x04\x12 \n" +
	"\x1cFinancialField_NetProfitRate\x10\x05\x12\"\n" +
	"\x1eFinancialField_GrossProfitRate\x10\x06\x12!\n" +
	"\x1dFinancialField_DebtAssetsRate\x10\a\x12%\n" +
	"!FinancialField_ReturnOnEquityRate\x10\b\x12\x17\n" +
	"\x13FinancialField_ROIC\x10\t\x12\x19\n" +
	"\x15FinancialField_ROATTM\x10\n" +
	"\x12\x1a\n" +
	"\x16FinancialField_EBITTTM\x10\v\x12\x19\n" +
	"\x15FinancialField_EBITDA\x10\f\x12%\n" +
	"!FinancialField_OperatingMarginTTM\x10\r\x12\x1d\n" +
	"\x19FinancialField_EBITMargin\x10\x0e\x12\x1f\n" +
	"\x1bFinancialField_EBITDAMargin\x10\x0f\x12$\n" +
	" FinancialField_FinancialCostRate\x10\x10\x12%\n" +
	"!FinancialField_OperatingProfitTTM\x10\x11\x12*\n" +
	"&FinancialField_ShareholderNetProfitTTM\x10\x12\x12(\n" +
	"$FinancialField_NetProfitCashCoverTTM\x10\x13\x12\x1f\n" +
	"\x1bFinancialField_CurrentRatio\x10\x14\x12\x1d\n" +
	"\x19FinancialField_QuickRatio\x10\x15\x12$\n" +
	" FinancialField_CurrentAssetRatio\x10\x16\x12#\n" +
	"\x1fFinancialField_CurrentDebtRatio\x10\x17\x12#\n" +
	"\x1fFinancialField_EquityMultiplier\x10\x18\x12 \n" +
	"\x1cFinancialField_PropertyRatio\x10\x19\x12)\n" +
	"%FinancialField_CashAndCashEquivalents\x10\x1a\x12%\n" +
	"!FinancialField_TotalAssetTurnover\x10\x1b\x12%\n" +
	"!FinancialField_FixedAssetTurnover\x10\x1c\x12$\n" +
	" FinancialField_InventoryTurnover\x10\x1d\x12'\n" +
	"#FinancialField_OperatingCashFlowTTM\x10\x1e\x12%\n" +
	"!FinancialField_AccountsReceivable\x10\x1f\x12!\n" +
	"\x1dFinancialField_EBITGrowthRate\x10 \x12,\n" +
	"(FinancialField_OperatingProfitGrowthRate\x10!\x12(\n" +
	"$FinancialField_TotalAssetsGrowthRate\x10\"\x121\n" +
	"-FinancialField_ProfitToShareholdersGrowthRate\x10#\x12,\n" +
	"(FinancialField_ProfitBeforeTaxGrowthRate\x10$\x12 \n" +
	"\x1cFinancialField_EPSGrowthRate\x10%\x12 \n" +
	"\x1cFinancialField_ROEGrowthRate\x10&\x12!\n" +
	"\x1dFinancialField_ROICGrowthRate\x10'\x12!\n" +
	"\x1dFinancialField_NOCFGrowthRate\x10(\x12)\n" +
	"%FinancialField_NOCFPerShareGrowthRate\x10)\x12,\n" +
	"(FinancialField_OperatingRevenueCashCover\x10*\x12/\n" +
	"+FinancialField_OperatingProfitToTotalProfit\x10+\x12\x1b\n" +
	"\x17FinancialField_BasicEPS\x10,\x12\x1d\n" +
	"\x19FinancialField_DilutedEPS\x10-\x12\x1f\n" +
	"\x1bFinancialField_NOCFPerShare\x10.*\xc3\a\n" +
	"\x14CustomIndicatorField\x12 \n" +
	"\x1cCustomIndicatorField_Unknown\x10\x00\x12\x1e\n" +
	"\x1aCustomIndicatorField_Price\x10\x01\x12\x1c\n" +
	"\x18CustomIndicatorField_MA5\x10\x02\x12\x1d\n" +
	"\x19CustomIndicatorField_MA10\x10\x03\x12\x1d\n" +
	"\x19CustomIndicatorField_MA20\x10\x04\x12\x1d\n" +
	"\x19CustomIndicatorField_MA30\x10\x05\x12\x1d\n" +
	"\x19CustomIndicatorField_MA60\x10\x06\x12\x1e\n" +
	"\x1aCustomIndicatorField_MA120\x10\a\x12\x1e\n" +
	"\x1aCustomIndicatorField_MA250\x10\b\x12\x1c\n" +
	"\x18CustomIndicatorField_RSI\x10\t\x12\x1d\n" +
	"\x19CustomIndicatorField_EMA5\x10\n" +
	"\x12\x1e\n" +
	"\x1aCustomIndicatorField_EMA10\x10\v\x12\x1e\n" +
	"\x1aCustomIndicatorField_EMA20\x10\f\x12\x1e\n" +
	"\x1aCustomIndicatorField_EMA30\x10\r\x12\x1e\n" +
	"\x1aCustomIndicatorField_EMA60\x10\x0e\x12\x1f\n" +
	"\x1bCustomIndicatorField_EMA120\x10\x0f\x12\x1f\n" +
	"\x1bCustomIndicatorField_EMA250\x10\x10\x12\x1e\n" +
	"\x1aCustomIndicatorField_Value\x10\x11\x12\x1b\n" +
	"\x17CustomIndicatorField_MA\x10\x1e\x12\x1c\n" +
	"\x18CustomIndicatorField_EMA\x10(\x12\x1e\n" +
	"\x1aCustomIndicatorField_KDJ_K\x102\x12\x1e\n" +
	"\x1aCustomIndicatorField_KDJ_D\x103\x12\x1e\n" +
	"\x1aCustomIndicatorField_KDJ_J\x104\x12\"\n" +
	"\x1eCustomIndicatorField_MACD_DIFF\x10<\x12!\n" +
	"\x1dCustomIndicatorField_MACD_DEA\x10=\x12\x1d\n" +
	"\x19CustomIndicatorField_MACD\x10>\x12#\n" +
	"\x1fCustomIndicatorField_BOLL_UPPER\x10F\x12%\n" +
	"!CustomIndicatorField_BOLL_MIDDLER\x10G\x12#\n" +
	"\x1fCustomIndicatorField_BOLL_LOWER\x10H*\xec\x05\n" +
	"\fPatternField\x12\x18\n" +
	"\x14PatternField_Unknown\x10\x00\x12 \n" +
	"\x1cPatternField_MAAlignmentLong\x10\x01\x12!\n" +
	"\x1dPatternField_MAAlignmentShort\x10\x02\x12!\n" +
	"\x1dPatternField_EMAAlignmentLong\x10\x03\x12\"\n" +
	"\x1ePatternField_EMAAlignmentShort\x10\x04\x12 \n" +
	"\x1cPatternField_RSIGoldCrossLow\x10\x05\x12\"\n" +
	"\x1ePatternField_RSIDeathCrossHigh\x10\x06\x12!\n" +
	"\x1dPatternField_RSITopDivergence\x10\a\x12$\n" +
	" PatternField_RSIBottomDivergence\x10\b\x12 \n" +
	"\x1cPatternField_KDJGoldCrossLow\x10\t\x12\"\n" +
	"\x1ePatternField_KDJDeathCrossHigh\x10\n" +
	"\x12!\n" +
	"\x1dPatternField_KDJTopDivergence\x10\v\x12$\n" +
	" PatternField_KDJBottomDivergence\x10\f\x12!\n" +
	"\x1dPatternField_MACDGoldCrossLow\x10\r\x12#\n" +
	"\x1fPatternField_MACDDeathCrossHigh\x10\x0e\x12\"\n" +
	"\x1ePatternField_MACDTopDivergence\x10\x0f\x12%\n" +
	"!PatternField_MACDBottomDivergence\x10\x10\x12\x1f\n" +
	"\x1bPatternField_BOLLBreakUpper\x10\x11\x12\x1a\n" +
	"\x16PatternField_BOLLLower\x10\x12\x12\"\n" +
	"\x1ePatternField_BOLLCrossMiddleUp\x10\x13\x12$\n" +
	" PatternField_BOLLCrossMiddleDown\x10\x14*\xd9\x01\n" +
	"\x10FinancialQuarter\x12\x1c\n" +
	"\x18FinancialQuarter_Unknown\x10\x00\x12\x1b\n" +
	"\x17FinancialQuarter_Annual\x10\x01\x12!\n" +
	"\x1dFinancialQuarter_FirstQuarter\x10\x02\x12\x1c\n" +
	"\x18FinancialQuarter_Interim\x10\x03\x12!\n" +
	"\x1dFinancialQuarter_ThirdQuarter\x10\x04\x12&\n" +
	"\"FinancialQuarter_MostRecentQuarter\x10\x05*\xa4\x01\n" +
	"\x10RelativePosition\x12\x1c\n" +
	"\x18RelativePosition_Unknown\x10\x00\x12\x19\n" +
	"\x15RelativePosition_More\x10\x01\x12\x19\n" +
	"\x15RelativePosition_Less\x10\x02\x12\x1c\n" +
	"\x18RelativePosition_CrossUp\x10\x03\x12\x1e\n" +
	"\x1aRelativePosition_CrossDown\x10\x04*B\n" +
	"\aSortDir\x12\x0e\n" +
	"\n" +
	"SortDir_No\x10\x00\x12\x12\n" +
	"\x0eSortDir_Ascend\x10\x01\x12\x13\n" +
	"\x0fSortDir_Descend\x10\x02BI\n" +
	"\x13com.futu.openapi.pbZ2github.com/qtopie/gofutuapi/gen/qot/qotstockfilter"

var (
	file_qot_Qot_StockFilter_proto_rawDescOnce sync.Once
	file_qot_Qot_StockFilter_proto_rawDescData []byte
)

func file_qot_Qot_StockFilter_proto_rawDescGZIP() []byte {
	file_qot_Qot_StockFilter_proto_rawDescOnce.Do(func() {
		file_qot_Qot_StockFilter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qot_Qot_StockFilter_proto_rawDesc), len(file_qot_Qot_StockFilter_proto_rawDesc)))
	})
	return file_qot_Qot_StockFilter_proto_rawDescData
}

var file_qot_Qot_StockFilter_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_qot_Qot_StockFilter_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_qot_Qot_StockFilter_proto_goTypes = []any{
	(StockField)(0),               // 0: Qot_StockFilter.StockField
	(AccumulateField)(0),          // 1: Qot_StockFilter.AccumulateField
	(FinancialField)(0),           // 2: Qot_StockFilter.FinancialField
	(CustomIndicatorField)(0),     // 3: Qot_StockFilter.CustomIndicatorField
	(PatternField)(0),             // 4: Qot_StockFilter.PatternField
	(FinancialQuarter)(0),         // 5: Qot_StockFilter.FinancialQuarter
	(RelativePosition)(0),         // 6: Qot_StockFilter.RelativePosition
	(SortDir)(0),                  // 7: Qot_StockFilter.SortDir
	(*BaseFilter)(nil),            // 8: Qot_StockFilter.BaseFilter
	(*AccumulateFilter)(nil),      // 9: Qot_StockFilter.AccumulateFilter
	(*FinancialFilter)(nil),       // 10: Qot_StockFilter.FinancialFilter
	(*PatternFilter)(nil),         // 11: Qot_StockFilter.PatternFilter
	(*CustomIndicatorFilter)(nil), // 12: Qot_StockFilter.CustomIndicatorFilter
	(*BaseData)(nil),              // 13: Qot_StockFilter.BaseData
	(*AccumulateData)(nil),        // 14: Qot_StockFilter.AccumulateData
	(*FinancialData)(nil),         // 15: Qot_StockFilter.FinancialData
	(*CustomIndicatorData)(nil),   // 16: Qot_StockFilter.CustomIndicatorData
	(*StockData)(nil),             // 17: Qot_StockFilter.StockData
	(*C2S)(nil),                   // 18: Qot_StockFilter.C2S
	(*S2C)(nil),                   // 19: Qot_StockFilter.S2C
	(*Request)(nil),               // 20: Qot_StockFilter.Request
	(*Response)(nil),              // 21: Qot_StockFilter.Response
	(*common.Security)(nil),       // 22: Qot_Common.Security
}
var file_qot_Qot_StockFilter_proto_depIdxs = []int32{
	22, // 0: Qot_StockFilter.StockData.security:type_name -> Qot_Common.Security
	13, // 1: Qot_StockFilter.StockData.baseDataList:type_name -> Qot_StockFilter.BaseData
	14, // 2: Qot_StockFilter.StockData.accumulateDataList:type_name -> Qot_StockFilter.AccumulateData
	15, // 3: Qot_StockFilter.StockData.financialDataList:type_name -> Qot_StockFilter.FinancialData
	16, // 4: Qot_StockFilter.StockData.customIndicatorDataList:type_name -> Qot_StockFilter.CustomIndicatorData
	22, // 5: Qot_StockFilter.C2S.plate:type_name -> Qot_Common.Security
	8,  // 6: Qot_StockFilter.C2S.baseFilterList:type_name -> Qot_StockFilter.BaseFilter
	9,  // 7: Qot_StockFilter.C2S.accumulateFilterList:type_name -> Qot_StockFilter.AccumulateFilter
	10, // 8: Qot_StockFilter.C2S.financialFilterList:type_name -> Qot_StockFilter.FinancialFilter
	11, // 9: Qot_StockFilter.C2S.patternFilterList:type_name -> Qot_StockFilter.PatternFilter
	12, // 10: Qot_StockFilter.C2S.customIndicatorFilterList:type_name -> Qot_StockFilter.CustomIndicatorFilter
	17, // 11: Qot_StockFilter.S2C.dataList:type_name -> Qot_StockFilter.StockData
	18, // 12: Qot_StockFilter.Request.c2s:type_name -> Qot_StockFilter.C2S
	19, // 13: Qot_StockFilter.Response.s2c:type_name -> Qot_StockFilter.S2C
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_qot_Qot_StockFilter_proto_init() }
func file_qot_Qot_StockFilter_proto_init() {
	if File_qot_Qot_StockFilter_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qot_Qot_StockFilter_proto_rawDesc), len(file_qot_Qot_StockFilter_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qot_Qot_StockFilter_proto_goTypes,
		DependencyIndexes: file_qot_Qot_StockFilter_proto_depIdxs,
		EnumInfos:         file_qot_Qot_StockFilter_proto_enumTypes,
		MessageInfos:      file_qot_Qot_StockFilter_proto_msgTypes,
	}.Build()
	File_qot_Qot_StockFilter_proto = out.File
	file_qot_Qot_StockFilter_proto_goTypes = nil
	file_qot_Qot_StockFilter_proto_depIdxs = nil
}
