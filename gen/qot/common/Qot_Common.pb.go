// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: qot/common/Qot_Common.proto

package common

import (
	_ "github.com/qtopie/gofutuapi/gen/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QotMarket int32

const (
	QotMarket_QotMarket_Unknown       QotMarket = 0  //未知市场
	QotMarket_QotMarket_HK_Security   QotMarket = 1  //香港市场
	QotMarket_QotMarket_HK_Future     QotMarket = 2  //港期货(已废弃，使用QotMarket_HK_Security即可)
	QotMarket_QotMarket_US_Security   QotMarket = 11 //美国市场
	QotMarket_QotMarket_CNSH_Security QotMarket = 21 //沪股市场
	QotMarket_QotMarket_CNSZ_Security QotMarket = 22 //深股市场
	QotMarket_QotMarket_SG_Security   QotMarket = 31 //新加坡市场
	QotMarket_QotMarket_JP_Security   QotMarket = 41 //日本市场
	QotMarket_QotMarket_AU_Security   QotMarket = 51 //澳大利亚市场
	QotMarket_QotMarket_MY_Security   QotMarket = 61 //马来西亚市场
	QotMarket_QotMarket_CA_Security   QotMarket = 71 // 加拿大市场
	QotMarket_QotMarket_FX_Security   QotMarket = 81 // 外汇市场
)

// Enum value maps for QotMarket.
var (
	QotMarket_name = map[int32]string{
		0:  "QotMarket_Unknown",
		1:  "QotMarket_HK_Security",
		2:  "QotMarket_HK_Future",
		11: "QotMarket_US_Security",
		21: "QotMarket_CNSH_Security",
		22: "QotMarket_CNSZ_Security",
		31: "QotMarket_SG_Security",
		41: "QotMarket_JP_Security",
		51: "QotMarket_AU_Security",
		61: "QotMarket_MY_Security",
		71: "QotMarket_CA_Security",
		81: "QotMarket_FX_Security",
	}
	QotMarket_value = map[string]int32{
		"QotMarket_Unknown":       0,
		"QotMarket_HK_Security":   1,
		"QotMarket_HK_Future":     2,
		"QotMarket_US_Security":   11,
		"QotMarket_CNSH_Security": 21,
		"QotMarket_CNSZ_Security": 22,
		"QotMarket_SG_Security":   31,
		"QotMarket_JP_Security":   41,
		"QotMarket_AU_Security":   51,
		"QotMarket_MY_Security":   61,
		"QotMarket_CA_Security":   71,
		"QotMarket_FX_Security":   81,
	}
)

func (x QotMarket) Enum() *QotMarket {
	p := new(QotMarket)
	*p = x
	return p
}

func (x QotMarket) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QotMarket) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[0].Descriptor()
}

func (QotMarket) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[0]
}

func (x QotMarket) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QotMarket) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QotMarket(num)
	return nil
}

// Deprecated: Use QotMarket.Descriptor instead.
func (QotMarket) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{0}
}

type SecurityType int32

const (
	SecurityType_SecurityType_Unknown  SecurityType = 0  //未知
	SecurityType_SecurityType_Bond     SecurityType = 1  //债券
	SecurityType_SecurityType_Bwrt     SecurityType = 2  //一揽子权证
	SecurityType_SecurityType_Eqty     SecurityType = 3  //正股
	SecurityType_SecurityType_Trust    SecurityType = 4  //信托,基金
	SecurityType_SecurityType_Warrant  SecurityType = 5  //窝轮
	SecurityType_SecurityType_Index    SecurityType = 6  //指数
	SecurityType_SecurityType_Plate    SecurityType = 7  //板块
	SecurityType_SecurityType_Drvt     SecurityType = 8  //期权
	SecurityType_SecurityType_PlateSet SecurityType = 9  //板块集
	SecurityType_SecurityType_Future   SecurityType = 10 //期货
)

// Enum value maps for SecurityType.
var (
	SecurityType_name = map[int32]string{
		0:  "SecurityType_Unknown",
		1:  "SecurityType_Bond",
		2:  "SecurityType_Bwrt",
		3:  "SecurityType_Eqty",
		4:  "SecurityType_Trust",
		5:  "SecurityType_Warrant",
		6:  "SecurityType_Index",
		7:  "SecurityType_Plate",
		8:  "SecurityType_Drvt",
		9:  "SecurityType_PlateSet",
		10: "SecurityType_Future",
	}
	SecurityType_value = map[string]int32{
		"SecurityType_Unknown":  0,
		"SecurityType_Bond":     1,
		"SecurityType_Bwrt":     2,
		"SecurityType_Eqty":     3,
		"SecurityType_Trust":    4,
		"SecurityType_Warrant":  5,
		"SecurityType_Index":    6,
		"SecurityType_Plate":    7,
		"SecurityType_Drvt":     8,
		"SecurityType_PlateSet": 9,
		"SecurityType_Future":   10,
	}
)

func (x SecurityType) Enum() *SecurityType {
	p := new(SecurityType)
	*p = x
	return p
}

func (x SecurityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[1].Descriptor()
}

func (SecurityType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[1]
}

func (x SecurityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SecurityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SecurityType(num)
	return nil
}

// Deprecated: Use SecurityType.Descriptor instead.
func (SecurityType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{1}
}

type PlateSetType int32

const (
	PlateSetType_PlateSetType_All      PlateSetType = 0 //所有板块
	PlateSetType_PlateSetType_Industry PlateSetType = 1 //行业板块
	PlateSetType_PlateSetType_Region   PlateSetType = 2 //地域板块,港美股市场的地域分类数据暂为空
	PlateSetType_PlateSetType_Concept  PlateSetType = 3 //概念板块
	PlateSetType_PlateSetType_Other    PlateSetType = 4 //其他板块, 仅用于3207（获取股票所属板块）协议返回,不可作为其他协议的请求参数
)

// Enum value maps for PlateSetType.
var (
	PlateSetType_name = map[int32]string{
		0: "PlateSetType_All",
		1: "PlateSetType_Industry",
		2: "PlateSetType_Region",
		3: "PlateSetType_Concept",
		4: "PlateSetType_Other",
	}
	PlateSetType_value = map[string]int32{
		"PlateSetType_All":      0,
		"PlateSetType_Industry": 1,
		"PlateSetType_Region":   2,
		"PlateSetType_Concept":  3,
		"PlateSetType_Other":    4,
	}
)

func (x PlateSetType) Enum() *PlateSetType {
	p := new(PlateSetType)
	*p = x
	return p
}

func (x PlateSetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlateSetType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[2].Descriptor()
}

func (PlateSetType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[2]
}

func (x PlateSetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlateSetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlateSetType(num)
	return nil
}

// Deprecated: Use PlateSetType.Descriptor instead.
func (PlateSetType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{2}
}

type WarrantType int32

const (
	WarrantType_WarrantType_Unknown WarrantType = 0 //未知
	WarrantType_WarrantType_Buy     WarrantType = 1 //认购
	WarrantType_WarrantType_Sell    WarrantType = 2 //认沽
	WarrantType_WarrantType_Bull    WarrantType = 3 //牛
	WarrantType_WarrantType_Bear    WarrantType = 4 //熊
	WarrantType_WarrantType_InLine  WarrantType = 5 //界内证
)

// Enum value maps for WarrantType.
var (
	WarrantType_name = map[int32]string{
		0: "WarrantType_Unknown",
		1: "WarrantType_Buy",
		2: "WarrantType_Sell",
		3: "WarrantType_Bull",
		4: "WarrantType_Bear",
		5: "WarrantType_InLine",
	}
	WarrantType_value = map[string]int32{
		"WarrantType_Unknown": 0,
		"WarrantType_Buy":     1,
		"WarrantType_Sell":    2,
		"WarrantType_Bull":    3,
		"WarrantType_Bear":    4,
		"WarrantType_InLine":  5,
	}
)

func (x WarrantType) Enum() *WarrantType {
	p := new(WarrantType)
	*p = x
	return p
}

func (x WarrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WarrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[3].Descriptor()
}

func (WarrantType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[3]
}

func (x WarrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WarrantType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WarrantType(num)
	return nil
}

// Deprecated: Use WarrantType.Descriptor instead.
func (WarrantType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{3}
}

type OptionType int32

const (
	OptionType_OptionType_Unknown OptionType = 0 //未知
	OptionType_OptionType_Call    OptionType = 1 //涨
	OptionType_OptionType_Put     OptionType = 2 //跌
)

// Enum value maps for OptionType.
var (
	OptionType_name = map[int32]string{
		0: "OptionType_Unknown",
		1: "OptionType_Call",
		2: "OptionType_Put",
	}
	OptionType_value = map[string]int32{
		"OptionType_Unknown": 0,
		"OptionType_Call":    1,
		"OptionType_Put":     2,
	}
)

func (x OptionType) Enum() *OptionType {
	p := new(OptionType)
	*p = x
	return p
}

func (x OptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[4].Descriptor()
}

func (OptionType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[4]
}

func (x OptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OptionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OptionType(num)
	return nil
}

// Deprecated: Use OptionType.Descriptor instead.
func (OptionType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{4}
}

type IndexOptionType int32

const (
	IndexOptionType_IndexOptionType_Unknown IndexOptionType = 0 //未知
	IndexOptionType_IndexOptionType_Normal  IndexOptionType = 1 //正常普通的指数期权
	IndexOptionType_IndexOptionType_Small   IndexOptionType = 2 //小型指数期权
)

// Enum value maps for IndexOptionType.
var (
	IndexOptionType_name = map[int32]string{
		0: "IndexOptionType_Unknown",
		1: "IndexOptionType_Normal",
		2: "IndexOptionType_Small",
	}
	IndexOptionType_value = map[string]int32{
		"IndexOptionType_Unknown": 0,
		"IndexOptionType_Normal":  1,
		"IndexOptionType_Small":   2,
	}
)

func (x IndexOptionType) Enum() *IndexOptionType {
	p := new(IndexOptionType)
	*p = x
	return p
}

func (x IndexOptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexOptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[5].Descriptor()
}

func (IndexOptionType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[5]
}

func (x IndexOptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IndexOptionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IndexOptionType(num)
	return nil
}

// Deprecated: Use IndexOptionType.Descriptor instead.
func (IndexOptionType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{5}
}

type OptionAreaType int32

const (
	OptionAreaType_OptionAreaType_Unknown  OptionAreaType = 0 //未知
	OptionAreaType_OptionAreaType_American OptionAreaType = 1 //美式
	OptionAreaType_OptionAreaType_European OptionAreaType = 2 //欧式
	OptionAreaType_OptionAreaType_Bermuda  OptionAreaType = 3 //百慕大
)

// Enum value maps for OptionAreaType.
var (
	OptionAreaType_name = map[int32]string{
		0: "OptionAreaType_Unknown",
		1: "OptionAreaType_American",
		2: "OptionAreaType_European",
		3: "OptionAreaType_Bermuda",
	}
	OptionAreaType_value = map[string]int32{
		"OptionAreaType_Unknown":  0,
		"OptionAreaType_American": 1,
		"OptionAreaType_European": 2,
		"OptionAreaType_Bermuda":  3,
	}
)

func (x OptionAreaType) Enum() *OptionAreaType {
	p := new(OptionAreaType)
	*p = x
	return p
}

func (x OptionAreaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionAreaType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[6].Descriptor()
}

func (OptionAreaType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[6]
}

func (x OptionAreaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OptionAreaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OptionAreaType(num)
	return nil
}

// Deprecated: Use OptionAreaType.Descriptor instead.
func (OptionAreaType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{6}
}

type QotMarketState int32

const (
	QotMarketState_QotMarketState_None                 QotMarketState = 0  // 无交易
	QotMarketState_QotMarketState_Auction              QotMarketState = 1  // 竞价
	QotMarketState_QotMarketState_WaitingOpen          QotMarketState = 2  // 早盘前等待开盘
	QotMarketState_QotMarketState_Morning              QotMarketState = 3  // 早盘
	QotMarketState_QotMarketState_Rest                 QotMarketState = 4  // 午间休市
	QotMarketState_QotMarketState_Afternoon            QotMarketState = 5  // 午盘
	QotMarketState_QotMarketState_Closed               QotMarketState = 6  // 收盘
	QotMarketState_QotMarketState_PreMarketBegin       QotMarketState = 8  // 盘前
	QotMarketState_QotMarketState_PreMarketEnd         QotMarketState = 9  // 盘前结束
	QotMarketState_QotMarketState_AfterHoursBegin      QotMarketState = 10 // 盘后
	QotMarketState_QotMarketState_AfterHoursEnd        QotMarketState = 11 // 盘后结束
	QotMarketState_QotMarketState_FUTU_SWITCH_DATE     QotMarketState = 12
	QotMarketState_QotMarketState_NightOpen            QotMarketState = 13 // 夜市开盘
	QotMarketState_QotMarketState_NightEnd             QotMarketState = 14 // 夜市收盘
	QotMarketState_QotMarketState_FutureDayOpen        QotMarketState = 15 // 期货日市开盘
	QotMarketState_QotMarketState_FutureDayBreak       QotMarketState = 16 // 期货日市休市
	QotMarketState_QotMarketState_FutureDayClose       QotMarketState = 17 // 期货日市收盘
	QotMarketState_QotMarketState_FutureDayWaitForOpen QotMarketState = 18 // 期货日市等待开盘
	QotMarketState_QotMarketState_HkCas                QotMarketState = 19 // 盘后竞价,港股市场增加CAS机制对应的市场状态
	QotMarketState_QotMarketState_FutureNightWait      QotMarketState = 20 // 夜市等待开盘（已废弃）
	QotMarketState_QotMarketState_FutureAfternoon      QotMarketState = 21 // 期货下午开盘（已废弃）
	// 美国期货新增加状态
	QotMarketState_QotMarketState_FutureSwitchDate QotMarketState = 22 // 期货切交易日（已废弃）
	QotMarketState_QotMarketState_FutureOpen       QotMarketState = 23 // 期货开盘
	QotMarketState_QotMarketState_FutureBreak      QotMarketState = 24 // 期货中盘休息
	QotMarketState_QotMarketState_FutureBreakOver  QotMarketState = 25 // 期货休息后开盘
	QotMarketState_QotMarketState_FutureClose      QotMarketState = 26 // 期货收盘
	// 科创板新增状态
	QotMarketState_QotMarketState_StibAfterHoursWait  QotMarketState = 27 // 科创板的盘后撮合时段（已废弃）
	QotMarketState_QotMarketState_StibAfterHoursBegin QotMarketState = 28 // 科创板的盘后交易开始（已废弃）
	QotMarketState_QotMarketState_StibAfterHoursEnd   QotMarketState = 29 // 科创板的盘后交易结束（已废弃）
	QotMarketState_QotMarketState_CLOSE_AUCTION       QotMarketState = 30 // 收市竞价
	QotMarketState_QotMarketState_AFTERNOON_END       QotMarketState = 31 // 已收盘
	QotMarketState_QotMarketState_NIGHT               QotMarketState = 32 // 交易中
	QotMarketState_QotMarketState_OVERNIGHT_BEGIN     QotMarketState = 33 // 夜盘开始
	QotMarketState_QotMarketState_OVERNIGHT_END       QotMarketState = 34 // 夜盘结束
	QotMarketState_QotMarketState_TRADE_AT_LAST       QotMarketState = 35 // 收盘前成交（在交易时间表内）
	QotMarketState_QotMarketState_TRADE_AUCTION       QotMarketState = 36 // 收盘前的竞价 （在交易时间表内）
	QotMarketState_QotMarketState_OVERNIGHT           QotMarketState = 37 // 美股夜盘交易时段
)

// Enum value maps for QotMarketState.
var (
	QotMarketState_name = map[int32]string{
		0:  "QotMarketState_None",
		1:  "QotMarketState_Auction",
		2:  "QotMarketState_WaitingOpen",
		3:  "QotMarketState_Morning",
		4:  "QotMarketState_Rest",
		5:  "QotMarketState_Afternoon",
		6:  "QotMarketState_Closed",
		8:  "QotMarketState_PreMarketBegin",
		9:  "QotMarketState_PreMarketEnd",
		10: "QotMarketState_AfterHoursBegin",
		11: "QotMarketState_AfterHoursEnd",
		12: "QotMarketState_FUTU_SWITCH_DATE",
		13: "QotMarketState_NightOpen",
		14: "QotMarketState_NightEnd",
		15: "QotMarketState_FutureDayOpen",
		16: "QotMarketState_FutureDayBreak",
		17: "QotMarketState_FutureDayClose",
		18: "QotMarketState_FutureDayWaitForOpen",
		19: "QotMarketState_HkCas",
		20: "QotMarketState_FutureNightWait",
		21: "QotMarketState_FutureAfternoon",
		22: "QotMarketState_FutureSwitchDate",
		23: "QotMarketState_FutureOpen",
		24: "QotMarketState_FutureBreak",
		25: "QotMarketState_FutureBreakOver",
		26: "QotMarketState_FutureClose",
		27: "QotMarketState_StibAfterHoursWait",
		28: "QotMarketState_StibAfterHoursBegin",
		29: "QotMarketState_StibAfterHoursEnd",
		30: "QotMarketState_CLOSE_AUCTION",
		31: "QotMarketState_AFTERNOON_END",
		32: "QotMarketState_NIGHT",
		33: "QotMarketState_OVERNIGHT_BEGIN",
		34: "QotMarketState_OVERNIGHT_END",
		35: "QotMarketState_TRADE_AT_LAST",
		36: "QotMarketState_TRADE_AUCTION",
		37: "QotMarketState_OVERNIGHT",
	}
	QotMarketState_value = map[string]int32{
		"QotMarketState_None":                 0,
		"QotMarketState_Auction":              1,
		"QotMarketState_WaitingOpen":          2,
		"QotMarketState_Morning":              3,
		"QotMarketState_Rest":                 4,
		"QotMarketState_Afternoon":            5,
		"QotMarketState_Closed":               6,
		"QotMarketState_PreMarketBegin":       8,
		"QotMarketState_PreMarketEnd":         9,
		"QotMarketState_AfterHoursBegin":      10,
		"QotMarketState_AfterHoursEnd":        11,
		"QotMarketState_FUTU_SWITCH_DATE":     12,
		"QotMarketState_NightOpen":            13,
		"QotMarketState_NightEnd":             14,
		"QotMarketState_FutureDayOpen":        15,
		"QotMarketState_FutureDayBreak":       16,
		"QotMarketState_FutureDayClose":       17,
		"QotMarketState_FutureDayWaitForOpen": 18,
		"QotMarketState_HkCas":                19,
		"QotMarketState_FutureNightWait":      20,
		"QotMarketState_FutureAfternoon":      21,
		"QotMarketState_FutureSwitchDate":     22,
		"QotMarketState_FutureOpen":           23,
		"QotMarketState_FutureBreak":          24,
		"QotMarketState_FutureBreakOver":      25,
		"QotMarketState_FutureClose":          26,
		"QotMarketState_StibAfterHoursWait":   27,
		"QotMarketState_StibAfterHoursBegin":  28,
		"QotMarketState_StibAfterHoursEnd":    29,
		"QotMarketState_CLOSE_AUCTION":        30,
		"QotMarketState_AFTERNOON_END":        31,
		"QotMarketState_NIGHT":                32,
		"QotMarketState_OVERNIGHT_BEGIN":      33,
		"QotMarketState_OVERNIGHT_END":        34,
		"QotMarketState_TRADE_AT_LAST":        35,
		"QotMarketState_TRADE_AUCTION":        36,
		"QotMarketState_OVERNIGHT":            37,
	}
)

func (x QotMarketState) Enum() *QotMarketState {
	p := new(QotMarketState)
	*p = x
	return p
}

func (x QotMarketState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QotMarketState) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[7].Descriptor()
}

func (QotMarketState) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[7]
}

func (x QotMarketState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QotMarketState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QotMarketState(num)
	return nil
}

// Deprecated: Use QotMarketState.Descriptor instead.
func (QotMarketState) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{7}
}

// 交易日查询市场
type TradeDateMarket int32

const (
	TradeDateMarket_TradeDateMarket_Unknown   TradeDateMarket = 0 //未知
	TradeDateMarket_TradeDateMarket_HK        TradeDateMarket = 1 //港股市场
	TradeDateMarket_TradeDateMarket_US        TradeDateMarket = 2 //美股市场
	TradeDateMarket_TradeDateMarket_CN        TradeDateMarket = 3 //A股市场
	TradeDateMarket_TradeDateMarket_NT        TradeDateMarket = 4 //深（沪）股通
	TradeDateMarket_TradeDateMarket_ST        TradeDateMarket = 5 //港股通（深、沪）
	TradeDateMarket_TradeDateMarket_JP_Future TradeDateMarket = 6 //日本期货
	TradeDateMarket_TradeDateMarket_SG_Future TradeDateMarket = 7 //新加坡期货
)

// Enum value maps for TradeDateMarket.
var (
	TradeDateMarket_name = map[int32]string{
		0: "TradeDateMarket_Unknown",
		1: "TradeDateMarket_HK",
		2: "TradeDateMarket_US",
		3: "TradeDateMarket_CN",
		4: "TradeDateMarket_NT",
		5: "TradeDateMarket_ST",
		6: "TradeDateMarket_JP_Future",
		7: "TradeDateMarket_SG_Future",
	}
	TradeDateMarket_value = map[string]int32{
		"TradeDateMarket_Unknown":   0,
		"TradeDateMarket_HK":        1,
		"TradeDateMarket_US":        2,
		"TradeDateMarket_CN":        3,
		"TradeDateMarket_NT":        4,
		"TradeDateMarket_ST":        5,
		"TradeDateMarket_JP_Future": 6,
		"TradeDateMarket_SG_Future": 7,
	}
)

func (x TradeDateMarket) Enum() *TradeDateMarket {
	p := new(TradeDateMarket)
	*p = x
	return p
}

func (x TradeDateMarket) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeDateMarket) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[8].Descriptor()
}

func (TradeDateMarket) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[8]
}

func (x TradeDateMarket) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TradeDateMarket) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TradeDateMarket(num)
	return nil
}

// Deprecated: Use TradeDateMarket.Descriptor instead.
func (TradeDateMarket) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{8}
}

// 交易日类型
type TradeDateType int32

const (
	TradeDateType_TradeDateType_Whole     TradeDateType = 0 //全天交易
	TradeDateType_TradeDateType_Morning   TradeDateType = 1 //上午交易，下午休市
	TradeDateType_TradeDateType_Afternoon TradeDateType = 2 //下午交易，上午休市
)

// Enum value maps for TradeDateType.
var (
	TradeDateType_name = map[int32]string{
		0: "TradeDateType_Whole",
		1: "TradeDateType_Morning",
		2: "TradeDateType_Afternoon",
	}
	TradeDateType_value = map[string]int32{
		"TradeDateType_Whole":     0,
		"TradeDateType_Morning":   1,
		"TradeDateType_Afternoon": 2,
	}
)

func (x TradeDateType) Enum() *TradeDateType {
	p := new(TradeDateType)
	*p = x
	return p
}

func (x TradeDateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeDateType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[9].Descriptor()
}

func (TradeDateType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[9]
}

func (x TradeDateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TradeDateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TradeDateType(num)
	return nil
}

// Deprecated: Use TradeDateType.Descriptor instead.
func (TradeDateType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{9}
}

type RehabType int32

const (
	RehabType_RehabType_None     RehabType = 0 //不复权
	RehabType_RehabType_Forward  RehabType = 1 //前复权
	RehabType_RehabType_Backward RehabType = 2 //后复权
)

// Enum value maps for RehabType.
var (
	RehabType_name = map[int32]string{
		0: "RehabType_None",
		1: "RehabType_Forward",
		2: "RehabType_Backward",
	}
	RehabType_value = map[string]int32{
		"RehabType_None":     0,
		"RehabType_Forward":  1,
		"RehabType_Backward": 2,
	}
)

func (x RehabType) Enum() *RehabType {
	p := new(RehabType)
	*p = x
	return p
}

func (x RehabType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RehabType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[10].Descriptor()
}

func (RehabType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[10]
}

func (x RehabType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RehabType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RehabType(num)
	return nil
}

// Deprecated: Use RehabType.Descriptor instead.
func (RehabType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{10}
}

// 枚举值兼容旧协议定义
type KLType int32

const (
	KLType_KLType_Unknown KLType = 0  //未知
	KLType_KLType_1Min    KLType = 1  //1分K
	KLType_KLType_Day     KLType = 2  //日K
	KLType_KLType_Week    KLType = 3  //周K
	KLType_KLType_Month   KLType = 4  //月K
	KLType_KLType_Year    KLType = 5  //年K
	KLType_KLType_5Min    KLType = 6  //5分K
	KLType_KLType_15Min   KLType = 7  //15分K
	KLType_KLType_30Min   KLType = 8  //30分K
	KLType_KLType_60Min   KLType = 9  //60分K
	KLType_KLType_3Min    KLType = 10 //3分K
	KLType_KLType_Quarter KLType = 11 //季K
)

// Enum value maps for KLType.
var (
	KLType_name = map[int32]string{
		0:  "KLType_Unknown",
		1:  "KLType_1Min",
		2:  "KLType_Day",
		3:  "KLType_Week",
		4:  "KLType_Month",
		5:  "KLType_Year",
		6:  "KLType_5Min",
		7:  "KLType_15Min",
		8:  "KLType_30Min",
		9:  "KLType_60Min",
		10: "KLType_3Min",
		11: "KLType_Quarter",
	}
	KLType_value = map[string]int32{
		"KLType_Unknown": 0,
		"KLType_1Min":    1,
		"KLType_Day":     2,
		"KLType_Week":    3,
		"KLType_Month":   4,
		"KLType_Year":    5,
		"KLType_5Min":    6,
		"KLType_15Min":   7,
		"KLType_30Min":   8,
		"KLType_60Min":   9,
		"KLType_3Min":    10,
		"KLType_Quarter": 11,
	}
)

func (x KLType) Enum() *KLType {
	p := new(KLType)
	*p = x
	return p
}

func (x KLType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KLType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[11].Descriptor()
}

func (KLType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[11]
}

func (x KLType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KLType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KLType(num)
	return nil
}

// Deprecated: Use KLType.Descriptor instead.
func (KLType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{11}
}

type KLFields int32

const (
	KLFields_KLFields_None         KLFields = 0   //
	KLFields_KLFields_High         KLFields = 1   //最高价
	KLFields_KLFields_Open         KLFields = 2   //开盘价
	KLFields_KLFields_Low          KLFields = 4   //最低价
	KLFields_KLFields_Close        KLFields = 8   //收盘价
	KLFields_KLFields_LastClose    KLFields = 16  //昨收价
	KLFields_KLFields_Volume       KLFields = 32  //成交量
	KLFields_KLFields_Turnover     KLFields = 64  //成交额
	KLFields_KLFields_TurnoverRate KLFields = 128 //换手率
	KLFields_KLFields_PE           KLFields = 256 //市盈率
	KLFields_KLFields_ChangeRate   KLFields = 512 //涨跌幅
)

// Enum value maps for KLFields.
var (
	KLFields_name = map[int32]string{
		0:   "KLFields_None",
		1:   "KLFields_High",
		2:   "KLFields_Open",
		4:   "KLFields_Low",
		8:   "KLFields_Close",
		16:  "KLFields_LastClose",
		32:  "KLFields_Volume",
		64:  "KLFields_Turnover",
		128: "KLFields_TurnoverRate",
		256: "KLFields_PE",
		512: "KLFields_ChangeRate",
	}
	KLFields_value = map[string]int32{
		"KLFields_None":         0,
		"KLFields_High":         1,
		"KLFields_Open":         2,
		"KLFields_Low":          4,
		"KLFields_Close":        8,
		"KLFields_LastClose":    16,
		"KLFields_Volume":       32,
		"KLFields_Turnover":     64,
		"KLFields_TurnoverRate": 128,
		"KLFields_PE":           256,
		"KLFields_ChangeRate":   512,
	}
)

func (x KLFields) Enum() *KLFields {
	p := new(KLFields)
	*p = x
	return p
}

func (x KLFields) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KLFields) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[12].Descriptor()
}

func (KLFields) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[12]
}

func (x KLFields) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KLFields) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KLFields(num)
	return nil
}

// Deprecated: Use KLFields.Descriptor instead.
func (KLFields) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{12}
}

// 订阅类型
// 枚举值兼容旧协议定义
type SubType int32

const (
	SubType_SubType_None       SubType = 0
	SubType_SubType_Basic      SubType = 1  //基础报价
	SubType_SubType_OrderBook  SubType = 2  //摆盘
	SubType_SubType_Ticker     SubType = 4  //逐笔
	SubType_SubType_RT         SubType = 5  //分时
	SubType_SubType_KL_Day     SubType = 6  //日K
	SubType_SubType_KL_5Min    SubType = 7  //5分K
	SubType_SubType_KL_15Min   SubType = 8  //15分K
	SubType_SubType_KL_30Min   SubType = 9  //30分K
	SubType_SubType_KL_60Min   SubType = 10 //60分K
	SubType_SubType_KL_1Min    SubType = 11 //1分K
	SubType_SubType_KL_Week    SubType = 12 //周K
	SubType_SubType_KL_Month   SubType = 13 //月K
	SubType_SubType_Broker     SubType = 14 //经纪队列
	SubType_SubType_KL_Qurater SubType = 15 //季K
	SubType_SubType_KL_Year    SubType = 16 //年K
	SubType_SubType_KL_3Min    SubType = 17 //3分K
)

// Enum value maps for SubType.
var (
	SubType_name = map[int32]string{
		0:  "SubType_None",
		1:  "SubType_Basic",
		2:  "SubType_OrderBook",
		4:  "SubType_Ticker",
		5:  "SubType_RT",
		6:  "SubType_KL_Day",
		7:  "SubType_KL_5Min",
		8:  "SubType_KL_15Min",
		9:  "SubType_KL_30Min",
		10: "SubType_KL_60Min",
		11: "SubType_KL_1Min",
		12: "SubType_KL_Week",
		13: "SubType_KL_Month",
		14: "SubType_Broker",
		15: "SubType_KL_Qurater",
		16: "SubType_KL_Year",
		17: "SubType_KL_3Min",
	}
	SubType_value = map[string]int32{
		"SubType_None":       0,
		"SubType_Basic":      1,
		"SubType_OrderBook":  2,
		"SubType_Ticker":     4,
		"SubType_RT":         5,
		"SubType_KL_Day":     6,
		"SubType_KL_5Min":    7,
		"SubType_KL_15Min":   8,
		"SubType_KL_30Min":   9,
		"SubType_KL_60Min":   10,
		"SubType_KL_1Min":    11,
		"SubType_KL_Week":    12,
		"SubType_KL_Month":   13,
		"SubType_Broker":     14,
		"SubType_KL_Qurater": 15,
		"SubType_KL_Year":    16,
		"SubType_KL_3Min":    17,
	}
)

func (x SubType) Enum() *SubType {
	p := new(SubType)
	*p = x
	return p
}

func (x SubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[13].Descriptor()
}

func (SubType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[13]
}

func (x SubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SubType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SubType(num)
	return nil
}

// Deprecated: Use SubType.Descriptor instead.
func (SubType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{13}
}

type TickerDirection int32

const (
	TickerDirection_TickerDirection_Unknown TickerDirection = 0 //未知
	TickerDirection_TickerDirection_Bid     TickerDirection = 1 //外盘
	TickerDirection_TickerDirection_Ask     TickerDirection = 2 //内盘
	TickerDirection_TickerDirection_Neutral TickerDirection = 3 //中性盘
)

// Enum value maps for TickerDirection.
var (
	TickerDirection_name = map[int32]string{
		0: "TickerDirection_Unknown",
		1: "TickerDirection_Bid",
		2: "TickerDirection_Ask",
		3: "TickerDirection_Neutral",
	}
	TickerDirection_value = map[string]int32{
		"TickerDirection_Unknown": 0,
		"TickerDirection_Bid":     1,
		"TickerDirection_Ask":     2,
		"TickerDirection_Neutral": 3,
	}
)

func (x TickerDirection) Enum() *TickerDirection {
	p := new(TickerDirection)
	*p = x
	return p
}

func (x TickerDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TickerDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[14].Descriptor()
}

func (TickerDirection) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[14]
}

func (x TickerDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TickerDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TickerDirection(num)
	return nil
}

// Deprecated: Use TickerDirection.Descriptor instead.
func (TickerDirection) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{14}
}

type TickerType int32

const (
	TickerType_TickerType_Unknown                 TickerType = 0  //未知
	TickerType_TickerType_Automatch               TickerType = 1  //自动对盘
	TickerType_TickerType_Late                    TickerType = 2  //开市前成交盘
	TickerType_TickerType_NoneAutomatch           TickerType = 3  //非自动对盘
	TickerType_TickerType_InterAutomatch          TickerType = 4  //同一证券商自动对盘
	TickerType_TickerType_InterNoneAutomatch      TickerType = 5  //同一证券商非自动对盘
	TickerType_TickerType_OddLot                  TickerType = 6  //碎股交易
	TickerType_TickerType_Auction                 TickerType = 7  //竞价交易
	TickerType_TickerType_Bulk                    TickerType = 8  //批量交易
	TickerType_TickerType_Crash                   TickerType = 9  //现金交易
	TickerType_TickerType_CrossMarket             TickerType = 10 //跨市场交易
	TickerType_TickerType_BulkSold                TickerType = 11 //批量卖出
	TickerType_TickerType_FreeOnBoard             TickerType = 12 //离价交易
	TickerType_TickerType_Rule127Or155            TickerType = 13 //第127条交易（纽交所规则）或第155条交易
	TickerType_TickerType_Delay                   TickerType = 14 //延迟交易
	TickerType_TickerType_MarketCenterClosePrice  TickerType = 15 //中央收市价
	TickerType_TickerType_NextDay                 TickerType = 16 //隔日交易
	TickerType_TickerType_MarketCenterOpening     TickerType = 17 //中央开盘价交易
	TickerType_TickerType_PriorReferencePrice     TickerType = 18 //前参考价
	TickerType_TickerType_MarketCenterOpenPrice   TickerType = 19 //中央开盘价
	TickerType_TickerType_Seller                  TickerType = 20 //卖方
	TickerType_TickerType_T                       TickerType = 21 //T类交易(盘前和盘后交易)
	TickerType_TickerType_ExtendedTradingHours    TickerType = 22 //延长交易时段
	TickerType_TickerType_Contingent              TickerType = 23 //合单交易
	TickerType_TickerType_AvgPrice                TickerType = 24 //平均价成交
	TickerType_TickerType_OTCSold                 TickerType = 25 //场外售出
	TickerType_TickerType_OddLotCrossMarket       TickerType = 26 //碎股跨市场交易
	TickerType_TickerType_DerivativelyPriced      TickerType = 27 //衍生工具定价
	TickerType_TickerType_ReOpeningPriced         TickerType = 28 //再开盘定价
	TickerType_TickerType_ClosingPriced           TickerType = 29 //收盘定价
	TickerType_TickerType_ComprehensiveDelayPrice TickerType = 30 //综合延迟价格
	TickerType_TickerType_Overseas                TickerType = 31 //交易的一方不是香港交易所的成员，属于场外交易
)

// Enum value maps for TickerType.
var (
	TickerType_name = map[int32]string{
		0:  "TickerType_Unknown",
		1:  "TickerType_Automatch",
		2:  "TickerType_Late",
		3:  "TickerType_NoneAutomatch",
		4:  "TickerType_InterAutomatch",
		5:  "TickerType_InterNoneAutomatch",
		6:  "TickerType_OddLot",
		7:  "TickerType_Auction",
		8:  "TickerType_Bulk",
		9:  "TickerType_Crash",
		10: "TickerType_CrossMarket",
		11: "TickerType_BulkSold",
		12: "TickerType_FreeOnBoard",
		13: "TickerType_Rule127Or155",
		14: "TickerType_Delay",
		15: "TickerType_MarketCenterClosePrice",
		16: "TickerType_NextDay",
		17: "TickerType_MarketCenterOpening",
		18: "TickerType_PriorReferencePrice",
		19: "TickerType_MarketCenterOpenPrice",
		20: "TickerType_Seller",
		21: "TickerType_T",
		22: "TickerType_ExtendedTradingHours",
		23: "TickerType_Contingent",
		24: "TickerType_AvgPrice",
		25: "TickerType_OTCSold",
		26: "TickerType_OddLotCrossMarket",
		27: "TickerType_DerivativelyPriced",
		28: "TickerType_ReOpeningPriced",
		29: "TickerType_ClosingPriced",
		30: "TickerType_ComprehensiveDelayPrice",
		31: "TickerType_Overseas",
	}
	TickerType_value = map[string]int32{
		"TickerType_Unknown":                 0,
		"TickerType_Automatch":               1,
		"TickerType_Late":                    2,
		"TickerType_NoneAutomatch":           3,
		"TickerType_InterAutomatch":          4,
		"TickerType_InterNoneAutomatch":      5,
		"TickerType_OddLot":                  6,
		"TickerType_Auction":                 7,
		"TickerType_Bulk":                    8,
		"TickerType_Crash":                   9,
		"TickerType_CrossMarket":             10,
		"TickerType_BulkSold":                11,
		"TickerType_FreeOnBoard":             12,
		"TickerType_Rule127Or155":            13,
		"TickerType_Delay":                   14,
		"TickerType_MarketCenterClosePrice":  15,
		"TickerType_NextDay":                 16,
		"TickerType_MarketCenterOpening":     17,
		"TickerType_PriorReferencePrice":     18,
		"TickerType_MarketCenterOpenPrice":   19,
		"TickerType_Seller":                  20,
		"TickerType_T":                       21,
		"TickerType_ExtendedTradingHours":    22,
		"TickerType_Contingent":              23,
		"TickerType_AvgPrice":                24,
		"TickerType_OTCSold":                 25,
		"TickerType_OddLotCrossMarket":       26,
		"TickerType_DerivativelyPriced":      27,
		"TickerType_ReOpeningPriced":         28,
		"TickerType_ClosingPriced":           29,
		"TickerType_ComprehensiveDelayPrice": 30,
		"TickerType_Overseas":                31,
	}
)

func (x TickerType) Enum() *TickerType {
	p := new(TickerType)
	*p = x
	return p
}

func (x TickerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TickerType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[15].Descriptor()
}

func (TickerType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[15]
}

func (x TickerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TickerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TickerType(num)
	return nil
}

// Deprecated: Use TickerType.Descriptor instead.
func (TickerType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{15}
}

type DarkStatus int32

const (
	DarkStatus_DarkStatus_None    DarkStatus = 0 //无暗盘交易
	DarkStatus_DarkStatus_Trading DarkStatus = 1 //暗盘交易中
	DarkStatus_DarkStatus_End     DarkStatus = 2 //暗盘交易结束
)

// Enum value maps for DarkStatus.
var (
	DarkStatus_name = map[int32]string{
		0: "DarkStatus_None",
		1: "DarkStatus_Trading",
		2: "DarkStatus_End",
	}
	DarkStatus_value = map[string]int32{
		"DarkStatus_None":    0,
		"DarkStatus_Trading": 1,
		"DarkStatus_End":     2,
	}
)

func (x DarkStatus) Enum() *DarkStatus {
	p := new(DarkStatus)
	*p = x
	return p
}

func (x DarkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DarkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[16].Descriptor()
}

func (DarkStatus) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[16]
}

func (x DarkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DarkStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DarkStatus(num)
	return nil
}

// Deprecated: Use DarkStatus.Descriptor instead.
func (DarkStatus) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{16}
}

type SecurityStatus int32

const (
	SecurityStatus_SecurityStatus_Unknown                     SecurityStatus = 0  //未知
	SecurityStatus_SecurityStatus_Normal                      SecurityStatus = 1  //正常状态
	SecurityStatus_SecurityStatus_Listing                     SecurityStatus = 2  //待上市
	SecurityStatus_SecurityStatus_Purchasing                  SecurityStatus = 3  //申购中
	SecurityStatus_SecurityStatus_Subscribing                 SecurityStatus = 4  //认购中
	SecurityStatus_SecurityStatus_BeforeDrakTradeOpening      SecurityStatus = 5  //暗盘开盘前
	SecurityStatus_SecurityStatus_DrakTrading                 SecurityStatus = 6  //暗盘交易中
	SecurityStatus_SecurityStatus_DrakTradeEnd                SecurityStatus = 7  //暗盘已收盘
	SecurityStatus_SecurityStatus_ToBeOpen                    SecurityStatus = 8  //待开盘
	SecurityStatus_SecurityStatus_Suspended                   SecurityStatus = 9  //停牌
	SecurityStatus_SecurityStatus_Called                      SecurityStatus = 10 //已收回
	SecurityStatus_SecurityStatus_ExpiredLastTradingDate      SecurityStatus = 11 //已过最后交易日
	SecurityStatus_SecurityStatus_Expired                     SecurityStatus = 12 //已过期
	SecurityStatus_SecurityStatus_Delisted                    SecurityStatus = 13 //已退市
	SecurityStatus_SecurityStatus_ChangeToTemporaryCode       SecurityStatus = 14 //公司行动中，交易关闭，转至临时代码交易
	SecurityStatus_SecurityStatus_TemporaryCodeTradeEnd       SecurityStatus = 15 //临时买卖结束，交易关闭
	SecurityStatus_SecurityStatus_ChangedPlateTradeEnd        SecurityStatus = 16 //已转板，旧代码交易关闭
	SecurityStatus_SecurityStatus_ChangedCodeTradeEnd         SecurityStatus = 17 //已换代码，旧代码交易关闭
	SecurityStatus_SecurityStatus_RecoverableCircuitBreaker   SecurityStatus = 18 //可恢复性熔断
	SecurityStatus_SecurityStatus_UnRecoverableCircuitBreaker SecurityStatus = 19 //不可恢复性熔断
	SecurityStatus_SecurityStatus_AfterCombination            SecurityStatus = 20 //盘后撮合
	SecurityStatus_SecurityStatus_AfterTransation             SecurityStatus = 21 //盘后交易
)

// Enum value maps for SecurityStatus.
var (
	SecurityStatus_name = map[int32]string{
		0:  "SecurityStatus_Unknown",
		1:  "SecurityStatus_Normal",
		2:  "SecurityStatus_Listing",
		3:  "SecurityStatus_Purchasing",
		4:  "SecurityStatus_Subscribing",
		5:  "SecurityStatus_BeforeDrakTradeOpening",
		6:  "SecurityStatus_DrakTrading",
		7:  "SecurityStatus_DrakTradeEnd",
		8:  "SecurityStatus_ToBeOpen",
		9:  "SecurityStatus_Suspended",
		10: "SecurityStatus_Called",
		11: "SecurityStatus_ExpiredLastTradingDate",
		12: "SecurityStatus_Expired",
		13: "SecurityStatus_Delisted",
		14: "SecurityStatus_ChangeToTemporaryCode",
		15: "SecurityStatus_TemporaryCodeTradeEnd",
		16: "SecurityStatus_ChangedPlateTradeEnd",
		17: "SecurityStatus_ChangedCodeTradeEnd",
		18: "SecurityStatus_RecoverableCircuitBreaker",
		19: "SecurityStatus_UnRecoverableCircuitBreaker",
		20: "SecurityStatus_AfterCombination",
		21: "SecurityStatus_AfterTransation",
	}
	SecurityStatus_value = map[string]int32{
		"SecurityStatus_Unknown":                     0,
		"SecurityStatus_Normal":                      1,
		"SecurityStatus_Listing":                     2,
		"SecurityStatus_Purchasing":                  3,
		"SecurityStatus_Subscribing":                 4,
		"SecurityStatus_BeforeDrakTradeOpening":      5,
		"SecurityStatus_DrakTrading":                 6,
		"SecurityStatus_DrakTradeEnd":                7,
		"SecurityStatus_ToBeOpen":                    8,
		"SecurityStatus_Suspended":                   9,
		"SecurityStatus_Called":                      10,
		"SecurityStatus_ExpiredLastTradingDate":      11,
		"SecurityStatus_Expired":                     12,
		"SecurityStatus_Delisted":                    13,
		"SecurityStatus_ChangeToTemporaryCode":       14,
		"SecurityStatus_TemporaryCodeTradeEnd":       15,
		"SecurityStatus_ChangedPlateTradeEnd":        16,
		"SecurityStatus_ChangedCodeTradeEnd":         17,
		"SecurityStatus_RecoverableCircuitBreaker":   18,
		"SecurityStatus_UnRecoverableCircuitBreaker": 19,
		"SecurityStatus_AfterCombination":            20,
		"SecurityStatus_AfterTransation":             21,
	}
)

func (x SecurityStatus) Enum() *SecurityStatus {
	p := new(SecurityStatus)
	*p = x
	return p
}

func (x SecurityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[17].Descriptor()
}

func (SecurityStatus) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[17]
}

func (x SecurityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SecurityStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SecurityStatus(num)
	return nil
}

// Deprecated: Use SecurityStatus.Descriptor instead.
func (SecurityStatus) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{17}
}

type HolderCategory int32

const (
	HolderCategory_HolderCategory_Unknow        HolderCategory = 0 //未知
	HolderCategory_HolderCategory_Agency        HolderCategory = 1 //机构
	HolderCategory_HolderCategory_Fund          HolderCategory = 2 //基金
	HolderCategory_HolderCategory_SeniorManager HolderCategory = 3 //高管
)

// Enum value maps for HolderCategory.
var (
	HolderCategory_name = map[int32]string{
		0: "HolderCategory_Unknow",
		1: "HolderCategory_Agency",
		2: "HolderCategory_Fund",
		3: "HolderCategory_SeniorManager",
	}
	HolderCategory_value = map[string]int32{
		"HolderCategory_Unknow":        0,
		"HolderCategory_Agency":        1,
		"HolderCategory_Fund":          2,
		"HolderCategory_SeniorManager": 3,
	}
)

func (x HolderCategory) Enum() *HolderCategory {
	p := new(HolderCategory)
	*p = x
	return p
}

func (x HolderCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HolderCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[18].Descriptor()
}

func (HolderCategory) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[18]
}

func (x HolderCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HolderCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HolderCategory(num)
	return nil
}

// Deprecated: Use HolderCategory.Descriptor instead.
func (HolderCategory) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{18}
}

// 推送数据的分类，目前只有逐笔在使用
type PushDataType int32

const (
	PushDataType_PushDataType_Unknow    PushDataType = 0
	PushDataType_PushDataType_Realtime  PushDataType = 1 //实时推送的数据
	PushDataType_PushDataType_ByDisConn PushDataType = 2 //对后台行情连接断开期间拉取补充的数据 最多50个
	PushDataType_PushDataType_Cache     PushDataType = 3 //非实时非连接断开补充数据
)

// Enum value maps for PushDataType.
var (
	PushDataType_name = map[int32]string{
		0: "PushDataType_Unknow",
		1: "PushDataType_Realtime",
		2: "PushDataType_ByDisConn",
		3: "PushDataType_Cache",
	}
	PushDataType_value = map[string]int32{
		"PushDataType_Unknow":    0,
		"PushDataType_Realtime":  1,
		"PushDataType_ByDisConn": 2,
		"PushDataType_Cache":     3,
	}
)

func (x PushDataType) Enum() *PushDataType {
	p := new(PushDataType)
	*p = x
	return p
}

func (x PushDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PushDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[19].Descriptor()
}

func (PushDataType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[19]
}

func (x PushDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PushDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PushDataType(num)
	return nil
}

// Deprecated: Use PushDataType.Descriptor instead.
func (PushDataType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{19}
}

// 窝轮排序
type SortField int32

const (
	SortField_SortField_Unknow         SortField = 0
	SortField_SortField_Code           SortField = 1  //代码
	SortField_SortField_CurPrice       SortField = 2  //最新价
	SortField_SortField_PriceChangeVal SortField = 3  //涨跌额
	SortField_SortField_ChangeRate     SortField = 4  //涨跌幅%
	SortField_SortField_Status         SortField = 5  //状态
	SortField_SortField_BidPrice       SortField = 6  //买入价
	SortField_SortField_AskPrice       SortField = 7  //卖出价
	SortField_SortField_BidVol         SortField = 8  //买量
	SortField_SortField_AskVol         SortField = 9  //卖量
	SortField_SortField_Volume         SortField = 10 //成交量
	SortField_SortField_Turnover       SortField = 11 //成交额
	SortField_SortField_Amplitude      SortField = 30 //振幅%
	// 以下排序字段只支持用于Qot_GetWarrant协议
	SortField_SortField_Score             SortField = 12 //综合评分
	SortField_SortField_Premium           SortField = 13 //溢价%
	SortField_SortField_EffectiveLeverage SortField = 14 //有效杠杆
	SortField_SortField_Delta             SortField = 15 //对冲值,仅认购认沽支持该字段
	SortField_SortField_ImpliedVolatility SortField = 16 //引伸波幅,仅认购认沽支持该字段
	SortField_SortField_Type              SortField = 17 //类型
	SortField_SortField_StrikePrice       SortField = 18 //行权价
	SortField_SortField_BreakEvenPoint    SortField = 19 //打和点
	SortField_SortField_MaturityTime      SortField = 20 //到期日
	SortField_SortField_ListTime          SortField = 21 //上市日期
	SortField_SortField_LastTradeTime     SortField = 22 //最后交易日
	SortField_SortField_Leverage          SortField = 23 //杠杆比率
	SortField_SortField_InOutMoney        SortField = 24 //价内/价外%
	SortField_SortField_RecoveryPrice     SortField = 25 //收回价,仅牛熊证支持该字段
	SortField_SortField_ChangePrice       SortField = 26 // 换股价
	SortField_SortField_Change            SortField = 27 //换股比率
	SortField_SortField_StreetRate        SortField = 28 //街货比%
	SortField_SortField_StreetVol         SortField = 29 //街货量
	SortField_SortField_WarrantName       SortField = 31 // 窝轮名称
	SortField_SortField_Issuer            SortField = 32 //发行人
	SortField_SortField_LotSize           SortField = 33 // 每手
	SortField_SortField_IssueSize         SortField = 34 //发行量
	SortField_SortField_UpperStrikePrice  SortField = 45 //上限价，仅用于界内证
	SortField_SortField_LowerStrikePrice  SortField = 46 //下限价，仅用于界内证
	SortField_SortField_InLinePriceStatus SortField = 47 //界内界外，仅用于界内证
	// 以下排序字段只支持用于Qot_GetPlateSecurity协议，并仅支持美股
	SortField_SortField_PreCurPrice         SortField = 35 //盘前最新价
	SortField_SortField_AfterCurPrice       SortField = 36 //盘后最新价
	SortField_SortField_PrePriceChangeVal   SortField = 37 //盘前涨跌额
	SortField_SortField_AfterPriceChangeVal SortField = 38 //盘后涨跌额
	SortField_SortField_PreChangeRate       SortField = 39 //盘前涨跌幅%
	SortField_SortField_AfterChangeRate     SortField = 40 //盘后涨跌幅%
	SortField_SortField_PreAmplitude        SortField = 41 //盘前振幅%
	SortField_SortField_AfterAmplitude      SortField = 42 //盘后振幅%
	SortField_SortField_PreTurnover         SortField = 43 //盘前成交额
	SortField_SortField_AfterTurnover       SortField = 44 //盘后成交额
	// 以下排序字段只支持用于Qot_GetPlateSecurity协议，并仅支持期货
	SortField_SortField_LastSettlePrice SortField = 48 //昨结
	SortField_SortField_Position        SortField = 49 //持仓量
	SortField_SortField_PositionChange  SortField = 50 //日增仓
)

// Enum value maps for SortField.
var (
	SortField_name = map[int32]string{
		0:  "SortField_Unknow",
		1:  "SortField_Code",
		2:  "SortField_CurPrice",
		3:  "SortField_PriceChangeVal",
		4:  "SortField_ChangeRate",
		5:  "SortField_Status",
		6:  "SortField_BidPrice",
		7:  "SortField_AskPrice",
		8:  "SortField_BidVol",
		9:  "SortField_AskVol",
		10: "SortField_Volume",
		11: "SortField_Turnover",
		30: "SortField_Amplitude",
		12: "SortField_Score",
		13: "SortField_Premium",
		14: "SortField_EffectiveLeverage",
		15: "SortField_Delta",
		16: "SortField_ImpliedVolatility",
		17: "SortField_Type",
		18: "SortField_StrikePrice",
		19: "SortField_BreakEvenPoint",
		20: "SortField_MaturityTime",
		21: "SortField_ListTime",
		22: "SortField_LastTradeTime",
		23: "SortField_Leverage",
		24: "SortField_InOutMoney",
		25: "SortField_RecoveryPrice",
		26: "SortField_ChangePrice",
		27: "SortField_Change",
		28: "SortField_StreetRate",
		29: "SortField_StreetVol",
		31: "SortField_WarrantName",
		32: "SortField_Issuer",
		33: "SortField_LotSize",
		34: "SortField_IssueSize",
		45: "SortField_UpperStrikePrice",
		46: "SortField_LowerStrikePrice",
		47: "SortField_InLinePriceStatus",
		35: "SortField_PreCurPrice",
		36: "SortField_AfterCurPrice",
		37: "SortField_PrePriceChangeVal",
		38: "SortField_AfterPriceChangeVal",
		39: "SortField_PreChangeRate",
		40: "SortField_AfterChangeRate",
		41: "SortField_PreAmplitude",
		42: "SortField_AfterAmplitude",
		43: "SortField_PreTurnover",
		44: "SortField_AfterTurnover",
		48: "SortField_LastSettlePrice",
		49: "SortField_Position",
		50: "SortField_PositionChange",
	}
	SortField_value = map[string]int32{
		"SortField_Unknow":              0,
		"SortField_Code":                1,
		"SortField_CurPrice":            2,
		"SortField_PriceChangeVal":      3,
		"SortField_ChangeRate":          4,
		"SortField_Status":              5,
		"SortField_BidPrice":            6,
		"SortField_AskPrice":            7,
		"SortField_BidVol":              8,
		"SortField_AskVol":              9,
		"SortField_Volume":              10,
		"SortField_Turnover":            11,
		"SortField_Amplitude":           30,
		"SortField_Score":               12,
		"SortField_Premium":             13,
		"SortField_EffectiveLeverage":   14,
		"SortField_Delta":               15,
		"SortField_ImpliedVolatility":   16,
		"SortField_Type":                17,
		"SortField_StrikePrice":         18,
		"SortField_BreakEvenPoint":      19,
		"SortField_MaturityTime":        20,
		"SortField_ListTime":            21,
		"SortField_LastTradeTime":       22,
		"SortField_Leverage":            23,
		"SortField_InOutMoney":          24,
		"SortField_RecoveryPrice":       25,
		"SortField_ChangePrice":         26,
		"SortField_Change":              27,
		"SortField_StreetRate":          28,
		"SortField_StreetVol":           29,
		"SortField_WarrantName":         31,
		"SortField_Issuer":              32,
		"SortField_LotSize":             33,
		"SortField_IssueSize":           34,
		"SortField_UpperStrikePrice":    45,
		"SortField_LowerStrikePrice":    46,
		"SortField_InLinePriceStatus":   47,
		"SortField_PreCurPrice":         35,
		"SortField_AfterCurPrice":       36,
		"SortField_PrePriceChangeVal":   37,
		"SortField_AfterPriceChangeVal": 38,
		"SortField_PreChangeRate":       39,
		"SortField_AfterChangeRate":     40,
		"SortField_PreAmplitude":        41,
		"SortField_AfterAmplitude":      42,
		"SortField_PreTurnover":         43,
		"SortField_AfterTurnover":       44,
		"SortField_LastSettlePrice":     48,
		"SortField_Position":            49,
		"SortField_PositionChange":      50,
	}
)

func (x SortField) Enum() *SortField {
	p := new(SortField)
	*p = x
	return p
}

func (x SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[20].Descriptor()
}

func (SortField) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[20]
}

func (x SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SortField) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SortField(num)
	return nil
}

// Deprecated: Use SortField.Descriptor instead.
func (SortField) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{20}
}

// 窝轮发行人
type Issuer int32

const (
	Issuer_Issuer_Unknow Issuer = 0  //未知
	Issuer_Issuer_SG     Issuer = 1  //法兴
	Issuer_Issuer_BP     Issuer = 2  //法巴
	Issuer_Issuer_CS     Issuer = 3  //瑞信
	Issuer_Issuer_CT     Issuer = 4  //花旗
	Issuer_Issuer_EA     Issuer = 5  //东亚
	Issuer_Issuer_GS     Issuer = 6  //高盛
	Issuer_Issuer_HS     Issuer = 7  //汇丰
	Issuer_Issuer_JP     Issuer = 8  //摩通
	Issuer_Issuer_MB     Issuer = 9  //麦银
	Issuer_Issuer_SC     Issuer = 10 //渣打
	Issuer_Issuer_UB     Issuer = 11 //瑞银
	Issuer_Issuer_BI     Issuer = 12 //中银
	Issuer_Issuer_DB     Issuer = 13 //德银
	Issuer_Issuer_DC     Issuer = 14 //大和
	Issuer_Issuer_ML     Issuer = 15 //美林
	Issuer_Issuer_NM     Issuer = 16 //野村
	Issuer_Issuer_RB     Issuer = 17 //荷合
	Issuer_Issuer_RS     Issuer = 18 //苏皇
	Issuer_Issuer_BC     Issuer = 19 //巴克莱
	Issuer_Issuer_HT     Issuer = 20 //海通
	Issuer_Issuer_VT     Issuer = 21 //瑞通
	Issuer_Issuer_KC     Issuer = 22 //比联
	Issuer_Issuer_MS     Issuer = 23 //摩利
	Issuer_Issuer_GJ     Issuer = 24 //国君
	Issuer_Issuer_XZ     Issuer = 25 //星展
	Issuer_Issuer_HU     Issuer = 26 //华泰
	Issuer_Issuer_KS     Issuer = 27 //韩投
	Issuer_Issuer_CI     Issuer = 28 //信证
)

// Enum value maps for Issuer.
var (
	Issuer_name = map[int32]string{
		0:  "Issuer_Unknow",
		1:  "Issuer_SG",
		2:  "Issuer_BP",
		3:  "Issuer_CS",
		4:  "Issuer_CT",
		5:  "Issuer_EA",
		6:  "Issuer_GS",
		7:  "Issuer_HS",
		8:  "Issuer_JP",
		9:  "Issuer_MB",
		10: "Issuer_SC",
		11: "Issuer_UB",
		12: "Issuer_BI",
		13: "Issuer_DB",
		14: "Issuer_DC",
		15: "Issuer_ML",
		16: "Issuer_NM",
		17: "Issuer_RB",
		18: "Issuer_RS",
		19: "Issuer_BC",
		20: "Issuer_HT",
		21: "Issuer_VT",
		22: "Issuer_KC",
		23: "Issuer_MS",
		24: "Issuer_GJ",
		25: "Issuer_XZ",
		26: "Issuer_HU",
		27: "Issuer_KS",
		28: "Issuer_CI",
	}
	Issuer_value = map[string]int32{
		"Issuer_Unknow": 0,
		"Issuer_SG":     1,
		"Issuer_BP":     2,
		"Issuer_CS":     3,
		"Issuer_CT":     4,
		"Issuer_EA":     5,
		"Issuer_GS":     6,
		"Issuer_HS":     7,
		"Issuer_JP":     8,
		"Issuer_MB":     9,
		"Issuer_SC":     10,
		"Issuer_UB":     11,
		"Issuer_BI":     12,
		"Issuer_DB":     13,
		"Issuer_DC":     14,
		"Issuer_ML":     15,
		"Issuer_NM":     16,
		"Issuer_RB":     17,
		"Issuer_RS":     18,
		"Issuer_BC":     19,
		"Issuer_HT":     20,
		"Issuer_VT":     21,
		"Issuer_KC":     22,
		"Issuer_MS":     23,
		"Issuer_GJ":     24,
		"Issuer_XZ":     25,
		"Issuer_HU":     26,
		"Issuer_KS":     27,
		"Issuer_CI":     28,
	}
)

func (x Issuer) Enum() *Issuer {
	p := new(Issuer)
	*p = x
	return p
}

func (x Issuer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Issuer) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[21].Descriptor()
}

func (Issuer) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[21]
}

func (x Issuer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Issuer) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Issuer(num)
	return nil
}

// Deprecated: Use Issuer.Descriptor instead.
func (Issuer) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{21}
}

// 窝轮上市日
type IpoPeriod int32

const (
	IpoPeriod_IpoPeriod_Unknow    IpoPeriod = 0 //未知
	IpoPeriod_IpoPeriod_Today     IpoPeriod = 1 //今日上市
	IpoPeriod_IpoPeriod_Tomorrow  IpoPeriod = 2 //明日上市
	IpoPeriod_IpoPeriod_Nextweek  IpoPeriod = 3 //未来一周上市
	IpoPeriod_IpoPeriod_Lastweek  IpoPeriod = 4 //过去一周上市
	IpoPeriod_IpoPeriod_Lastmonth IpoPeriod = 5 //过去一月上市
)

// Enum value maps for IpoPeriod.
var (
	IpoPeriod_name = map[int32]string{
		0: "IpoPeriod_Unknow",
		1: "IpoPeriod_Today",
		2: "IpoPeriod_Tomorrow",
		3: "IpoPeriod_Nextweek",
		4: "IpoPeriod_Lastweek",
		5: "IpoPeriod_Lastmonth",
	}
	IpoPeriod_value = map[string]int32{
		"IpoPeriod_Unknow":    0,
		"IpoPeriod_Today":     1,
		"IpoPeriod_Tomorrow":  2,
		"IpoPeriod_Nextweek":  3,
		"IpoPeriod_Lastweek":  4,
		"IpoPeriod_Lastmonth": 5,
	}
)

func (x IpoPeriod) Enum() *IpoPeriod {
	p := new(IpoPeriod)
	*p = x
	return p
}

func (x IpoPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpoPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[22].Descriptor()
}

func (IpoPeriod) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[22]
}

func (x IpoPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IpoPeriod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IpoPeriod(num)
	return nil
}

// Deprecated: Use IpoPeriod.Descriptor instead.
func (IpoPeriod) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{22}
}

// 窝轮价外/内,界内证表示界内界外
type PriceType int32

const (
	PriceType_PriceType_Unknow  PriceType = 0
	PriceType_PriceType_Outside PriceType = 1 //价外，界内证表示界外
	PriceType_PriceType_WithIn  PriceType = 2 //价内，界内证表示界内
)

// Enum value maps for PriceType.
var (
	PriceType_name = map[int32]string{
		0: "PriceType_Unknow",
		1: "PriceType_Outside",
		2: "PriceType_WithIn",
	}
	PriceType_value = map[string]int32{
		"PriceType_Unknow":  0,
		"PriceType_Outside": 1,
		"PriceType_WithIn":  2,
	}
)

func (x PriceType) Enum() *PriceType {
	p := new(PriceType)
	*p = x
	return p
}

func (x PriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[23].Descriptor()
}

func (PriceType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[23]
}

func (x PriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PriceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PriceType(num)
	return nil
}

// Deprecated: Use PriceType.Descriptor instead.
func (PriceType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{23}
}

// 窝轮状态
type WarrantStatus int32

const (
	WarrantStatus_WarrantStatus_Unknow         WarrantStatus = 0 //未知
	WarrantStatus_WarrantStatus_Normal         WarrantStatus = 1 //正常状态
	WarrantStatus_WarrantStatus_Suspend        WarrantStatus = 2 //停牌
	WarrantStatus_WarrantStatus_StopTrade      WarrantStatus = 3 //终止交易
	WarrantStatus_WarrantStatus_PendingListing WarrantStatus = 4 //等待上市
)

// Enum value maps for WarrantStatus.
var (
	WarrantStatus_name = map[int32]string{
		0: "WarrantStatus_Unknow",
		1: "WarrantStatus_Normal",
		2: "WarrantStatus_Suspend",
		3: "WarrantStatus_StopTrade",
		4: "WarrantStatus_PendingListing",
	}
	WarrantStatus_value = map[string]int32{
		"WarrantStatus_Unknow":         0,
		"WarrantStatus_Normal":         1,
		"WarrantStatus_Suspend":        2,
		"WarrantStatus_StopTrade":      3,
		"WarrantStatus_PendingListing": 4,
	}
)

func (x WarrantStatus) Enum() *WarrantStatus {
	p := new(WarrantStatus)
	*p = x
	return p
}

func (x WarrantStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WarrantStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[24].Descriptor()
}

func (WarrantStatus) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[24]
}

func (x WarrantStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WarrantStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WarrantStatus(num)
	return nil
}

// Deprecated: Use WarrantStatus.Descriptor instead.
func (WarrantStatus) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{24}
}

type CompanyAct int32

const (
	CompanyAct_CompanyAct_None       CompanyAct = 0   //无
	CompanyAct_CompanyAct_Split      CompanyAct = 1   //拆股
	CompanyAct_CompanyAct_Join       CompanyAct = 2   //合股
	CompanyAct_CompanyAct_Bonus      CompanyAct = 4   //送股
	CompanyAct_CompanyAct_Transfer   CompanyAct = 8   //转赠股
	CompanyAct_CompanyAct_Allot      CompanyAct = 16  //配股
	CompanyAct_CompanyAct_Add        CompanyAct = 32  //增发股
	CompanyAct_CompanyAct_Dividend   CompanyAct = 64  //现金分红
	CompanyAct_CompanyAct_SPDividend CompanyAct = 128 //特别股息
)

// Enum value maps for CompanyAct.
var (
	CompanyAct_name = map[int32]string{
		0:   "CompanyAct_None",
		1:   "CompanyAct_Split",
		2:   "CompanyAct_Join",
		4:   "CompanyAct_Bonus",
		8:   "CompanyAct_Transfer",
		16:  "CompanyAct_Allot",
		32:  "CompanyAct_Add",
		64:  "CompanyAct_Dividend",
		128: "CompanyAct_SPDividend",
	}
	CompanyAct_value = map[string]int32{
		"CompanyAct_None":       0,
		"CompanyAct_Split":      1,
		"CompanyAct_Join":       2,
		"CompanyAct_Bonus":      4,
		"CompanyAct_Transfer":   8,
		"CompanyAct_Allot":      16,
		"CompanyAct_Add":        32,
		"CompanyAct_Dividend":   64,
		"CompanyAct_SPDividend": 128,
	}
)

func (x CompanyAct) Enum() *CompanyAct {
	p := new(CompanyAct)
	*p = x
	return p
}

func (x CompanyAct) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanyAct) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[25].Descriptor()
}

func (CompanyAct) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[25]
}

func (x CompanyAct) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompanyAct) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompanyAct(num)
	return nil
}

// Deprecated: Use CompanyAct.Descriptor instead.
func (CompanyAct) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{25}
}

// 行情权限
type QotRight int32

const (
	QotRight_QotRight_Unknow QotRight = 0 //未知
	QotRight_QotRight_Bmp    QotRight = 1 //Bmp，无法订阅
	QotRight_QotRight_Level1 QotRight = 2 //Level1
	QotRight_QotRight_Level2 QotRight = 3 //Level2
	QotRight_QotRight_SF     QotRight = 4 //SF高级行情
	QotRight_QotRight_No     QotRight = 5 //无权限
)

// Enum value maps for QotRight.
var (
	QotRight_name = map[int32]string{
		0: "QotRight_Unknow",
		1: "QotRight_Bmp",
		2: "QotRight_Level1",
		3: "QotRight_Level2",
		4: "QotRight_SF",
		5: "QotRight_No",
	}
	QotRight_value = map[string]int32{
		"QotRight_Unknow": 0,
		"QotRight_Bmp":    1,
		"QotRight_Level1": 2,
		"QotRight_Level2": 3,
		"QotRight_SF":     4,
		"QotRight_No":     5,
	}
)

func (x QotRight) Enum() *QotRight {
	p := new(QotRight)
	*p = x
	return p
}

func (x QotRight) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QotRight) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[26].Descriptor()
}

func (QotRight) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[26]
}

func (x QotRight) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QotRight) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QotRight(num)
	return nil
}

// Deprecated: Use QotRight.Descriptor instead.
func (QotRight) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{26}
}

// 提醒类型
type PriceReminderType int32

const (
	PriceReminderType_PriceReminderType_Unknown            PriceReminderType = 0  // 未知
	PriceReminderType_PriceReminderType_PriceUp            PriceReminderType = 1  // 价格涨到
	PriceReminderType_PriceReminderType_PriceDown          PriceReminderType = 2  // 价格跌到
	PriceReminderType_PriceReminderType_ChangeRateUp       PriceReminderType = 3  // 日涨幅超（该字段为百分比字段，设置时填 20 表示 20%）
	PriceReminderType_PriceReminderType_ChangeRateDown     PriceReminderType = 4  // 日跌幅超（该字段为百分比字段，设置时填 20 表示 20%）
	PriceReminderType_PriceReminderType_5MinChangeRateUp   PriceReminderType = 5  // 5 分钟涨幅超（该字段为百分比字段，设置时填 20 表示 20%）
	PriceReminderType_PriceReminderType_5MinChangeRateDown PriceReminderType = 6  // 5 分钟跌幅超（该字段为百分比字段，设置时填 20 表示 20%）
	PriceReminderType_PriceReminderType_VolumeUp           PriceReminderType = 7  // 成交量超过
	PriceReminderType_PriceReminderType_TurnoverUp         PriceReminderType = 8  // 成交额超过
	PriceReminderType_PriceReminderType_TurnoverRateUp     PriceReminderType = 9  // 换手率超过（该字段为百分比字段，设置时填 20 表示 20%）
	PriceReminderType_PriceReminderType_BidPriceUp         PriceReminderType = 10 // 买一价高于
	PriceReminderType_PriceReminderType_AskPriceDown       PriceReminderType = 11 // 卖一价低于
	PriceReminderType_PriceReminderType_BidVolUp           PriceReminderType = 12 // 买一量高于
	PriceReminderType_PriceReminderType_AskVolUp           PriceReminderType = 13 // 卖一量高于
	PriceReminderType_PriceReminderType_3MinChangeRateUp   PriceReminderType = 14 // 3 分钟涨幅超（该字段为百分比字段，设置时填 20 表示 20%）
	PriceReminderType_PriceReminderType_3MinChangeRateDown PriceReminderType = 15 // 3 分钟跌幅超（该字段为百分比字段，设置时填 20 表示 20%）
)

// Enum value maps for PriceReminderType.
var (
	PriceReminderType_name = map[int32]string{
		0:  "PriceReminderType_Unknown",
		1:  "PriceReminderType_PriceUp",
		2:  "PriceReminderType_PriceDown",
		3:  "PriceReminderType_ChangeRateUp",
		4:  "PriceReminderType_ChangeRateDown",
		5:  "PriceReminderType_5MinChangeRateUp",
		6:  "PriceReminderType_5MinChangeRateDown",
		7:  "PriceReminderType_VolumeUp",
		8:  "PriceReminderType_TurnoverUp",
		9:  "PriceReminderType_TurnoverRateUp",
		10: "PriceReminderType_BidPriceUp",
		11: "PriceReminderType_AskPriceDown",
		12: "PriceReminderType_BidVolUp",
		13: "PriceReminderType_AskVolUp",
		14: "PriceReminderType_3MinChangeRateUp",
		15: "PriceReminderType_3MinChangeRateDown",
	}
	PriceReminderType_value = map[string]int32{
		"PriceReminderType_Unknown":            0,
		"PriceReminderType_PriceUp":            1,
		"PriceReminderType_PriceDown":          2,
		"PriceReminderType_ChangeRateUp":       3,
		"PriceReminderType_ChangeRateDown":     4,
		"PriceReminderType_5MinChangeRateUp":   5,
		"PriceReminderType_5MinChangeRateDown": 6,
		"PriceReminderType_VolumeUp":           7,
		"PriceReminderType_TurnoverUp":         8,
		"PriceReminderType_TurnoverRateUp":     9,
		"PriceReminderType_BidPriceUp":         10,
		"PriceReminderType_AskPriceDown":       11,
		"PriceReminderType_BidVolUp":           12,
		"PriceReminderType_AskVolUp":           13,
		"PriceReminderType_3MinChangeRateUp":   14,
		"PriceReminderType_3MinChangeRateDown": 15,
	}
)

func (x PriceReminderType) Enum() *PriceReminderType {
	p := new(PriceReminderType)
	*p = x
	return p
}

func (x PriceReminderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceReminderType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[27].Descriptor()
}

func (PriceReminderType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[27]
}

func (x PriceReminderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PriceReminderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PriceReminderType(num)
	return nil
}

// Deprecated: Use PriceReminderType.Descriptor instead.
func (PriceReminderType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{27}
}

// 提醒频率
type PriceReminderFreq int32

const (
	PriceReminderFreq_PriceReminderFreq_Unknown  PriceReminderFreq = 0 // 未知
	PriceReminderFreq_PriceReminderFreq_Always   PriceReminderFreq = 1 // 持续提醒
	PriceReminderFreq_PriceReminderFreq_OnceADay PriceReminderFreq = 2 // 每日一次
	PriceReminderFreq_PriceReminderFreq_OnlyOnce PriceReminderFreq = 3 // 仅提醒一次
)

// Enum value maps for PriceReminderFreq.
var (
	PriceReminderFreq_name = map[int32]string{
		0: "PriceReminderFreq_Unknown",
		1: "PriceReminderFreq_Always",
		2: "PriceReminderFreq_OnceADay",
		3: "PriceReminderFreq_OnlyOnce",
	}
	PriceReminderFreq_value = map[string]int32{
		"PriceReminderFreq_Unknown":  0,
		"PriceReminderFreq_Always":   1,
		"PriceReminderFreq_OnceADay": 2,
		"PriceReminderFreq_OnlyOnce": 3,
	}
)

func (x PriceReminderFreq) Enum() *PriceReminderFreq {
	p := new(PriceReminderFreq)
	*p = x
	return p
}

func (x PriceReminderFreq) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceReminderFreq) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[28].Descriptor()
}

func (PriceReminderFreq) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[28]
}

func (x PriceReminderFreq) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PriceReminderFreq) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PriceReminderFreq(num)
	return nil
}

// Deprecated: Use PriceReminderFreq.Descriptor instead.
func (PriceReminderFreq) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{28}
}

// 资产类别
type AssetClass int32

const (
	AssetClass_AssetClass_Unknow         AssetClass = 0 //未知
	AssetClass_AssetClass_Stock          AssetClass = 1 //股票
	AssetClass_AssetClass_Bond           AssetClass = 2 //债券
	AssetClass_AssetClass_Commodity      AssetClass = 3 //商品
	AssetClass_AssetClass_CurrencyMarket AssetClass = 4 //货币市场
	AssetClass_AssetClass_Future         AssetClass = 5 //期货
	AssetClass_AssetClass_Swap           AssetClass = 6 //掉期
)

// Enum value maps for AssetClass.
var (
	AssetClass_name = map[int32]string{
		0: "AssetClass_Unknow",
		1: "AssetClass_Stock",
		2: "AssetClass_Bond",
		3: "AssetClass_Commodity",
		4: "AssetClass_CurrencyMarket",
		5: "AssetClass_Future",
		6: "AssetClass_Swap",
	}
	AssetClass_value = map[string]int32{
		"AssetClass_Unknow":         0,
		"AssetClass_Stock":          1,
		"AssetClass_Bond":           2,
		"AssetClass_Commodity":      3,
		"AssetClass_CurrencyMarket": 4,
		"AssetClass_Future":         5,
		"AssetClass_Swap":           6,
	}
)

func (x AssetClass) Enum() *AssetClass {
	p := new(AssetClass)
	*p = x
	return p
}

func (x AssetClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetClass) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[29].Descriptor()
}

func (AssetClass) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[29]
}

func (x AssetClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AssetClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AssetClass(num)
	return nil
}

// Deprecated: Use AssetClass.Descriptor instead.
func (AssetClass) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{29}
}

// 交割周期
type ExpirationCycle int32

const (
	ExpirationCycle_ExpirationCycle_Unknown  ExpirationCycle = 0  //未知
	ExpirationCycle_ExpirationCycle_Week     ExpirationCycle = 1  //周期权
	ExpirationCycle_ExpirationCycle_Month    ExpirationCycle = 2  //月期权
	ExpirationCycle_ExpirationCycle_MonthEnd ExpirationCycle = 3  // 月末期权
	ExpirationCycle_ExpirationCycle_Quarter  ExpirationCycle = 4  //季度期权
	ExpirationCycle_ExpirationCycle_WeekMon  ExpirationCycle = 11 //周一
	ExpirationCycle_ExpirationCycle_WeekTue  ExpirationCycle = 12 //周二
	ExpirationCycle_ExpirationCycle_WeekWed  ExpirationCycle = 13 //周三
	ExpirationCycle_ExpirationCycle_WeekThu  ExpirationCycle = 14 //周四
	ExpirationCycle_ExpirationCycle_WeekFri  ExpirationCycle = 15 //周五
)

// Enum value maps for ExpirationCycle.
var (
	ExpirationCycle_name = map[int32]string{
		0:  "ExpirationCycle_Unknown",
		1:  "ExpirationCycle_Week",
		2:  "ExpirationCycle_Month",
		3:  "ExpirationCycle_MonthEnd",
		4:  "ExpirationCycle_Quarter",
		11: "ExpirationCycle_WeekMon",
		12: "ExpirationCycle_WeekTue",
		13: "ExpirationCycle_WeekWed",
		14: "ExpirationCycle_WeekThu",
		15: "ExpirationCycle_WeekFri",
	}
	ExpirationCycle_value = map[string]int32{
		"ExpirationCycle_Unknown":  0,
		"ExpirationCycle_Week":     1,
		"ExpirationCycle_Month":    2,
		"ExpirationCycle_MonthEnd": 3,
		"ExpirationCycle_Quarter":  4,
		"ExpirationCycle_WeekMon":  11,
		"ExpirationCycle_WeekTue":  12,
		"ExpirationCycle_WeekWed":  13,
		"ExpirationCycle_WeekThu":  14,
		"ExpirationCycle_WeekFri":  15,
	}
)

func (x ExpirationCycle) Enum() *ExpirationCycle {
	p := new(ExpirationCycle)
	*p = x
	return p
}

func (x ExpirationCycle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpirationCycle) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[30].Descriptor()
}

func (ExpirationCycle) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[30]
}

func (x ExpirationCycle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExpirationCycle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExpirationCycle(num)
	return nil
}

// Deprecated: Use ExpirationCycle.Descriptor instead.
func (ExpirationCycle) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{30}
}

// 标准期权链类型
type OptionStandardType int32

const (
	OptionStandardType_OptionStandardType_Unknown     OptionStandardType = 0 //未知
	OptionStandardType_OptionStandardType_Standard    OptionStandardType = 1 // 标准
	OptionStandardType_OptionStandardType_NonStandard OptionStandardType = 2 // 非标准
)

// Enum value maps for OptionStandardType.
var (
	OptionStandardType_name = map[int32]string{
		0: "OptionStandardType_Unknown",
		1: "OptionStandardType_Standard",
		2: "OptionStandardType_NonStandard",
	}
	OptionStandardType_value = map[string]int32{
		"OptionStandardType_Unknown":     0,
		"OptionStandardType_Standard":    1,
		"OptionStandardType_NonStandard": 2,
	}
)

func (x OptionStandardType) Enum() *OptionStandardType {
	p := new(OptionStandardType)
	*p = x
	return p
}

func (x OptionStandardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionStandardType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[31].Descriptor()
}

func (OptionStandardType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[31]
}

func (x OptionStandardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OptionStandardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OptionStandardType(num)
	return nil
}

// Deprecated: Use OptionStandardType.Descriptor instead.
func (OptionStandardType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{31}
}

// 期权结算方式
type OptionSettlementMode int32

const (
	OptionSettlementMode_OptionSettlementMode_Unknown OptionSettlementMode = 0 //未知
	OptionSettlementMode_OptionSettlementMode_AM      OptionSettlementMode = 1 // AM
	OptionSettlementMode_OptionSettlementMode_PM      OptionSettlementMode = 2 // PM
)

// Enum value maps for OptionSettlementMode.
var (
	OptionSettlementMode_name = map[int32]string{
		0: "OptionSettlementMode_Unknown",
		1: "OptionSettlementMode_AM",
		2: "OptionSettlementMode_PM",
	}
	OptionSettlementMode_value = map[string]int32{
		"OptionSettlementMode_Unknown": 0,
		"OptionSettlementMode_AM":      1,
		"OptionSettlementMode_PM":      2,
	}
)

func (x OptionSettlementMode) Enum() *OptionSettlementMode {
	p := new(OptionSettlementMode)
	*p = x
	return p
}

func (x OptionSettlementMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionSettlementMode) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[32].Descriptor()
}

func (OptionSettlementMode) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[32]
}

func (x OptionSettlementMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OptionSettlementMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OptionSettlementMode(num)
	return nil
}

// Deprecated: Use OptionSettlementMode.Descriptor instead.
func (OptionSettlementMode) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{32}
}

// 所属交易所
type ExchType int32

const (
	ExchType_ExchType_Unknown      ExchType = 0  //未知
	ExchType_ExchType_HK_MainBoard ExchType = 1  // 港交所·主板
	ExchType_ExchType_HK_GEMBoard  ExchType = 2  //港交所·创业板
	ExchType_ExchType_HK_HKEX      ExchType = 3  //港交所
	ExchType_ExchType_US_NYSE      ExchType = 4  //纽交所
	ExchType_ExchType_US_Nasdaq    ExchType = 5  //纳斯达克
	ExchType_ExchType_US_Pink      ExchType = 6  //OTC 市场
	ExchType_ExchType_US_AMEX      ExchType = 7  //美交所
	ExchType_ExchType_US_Option    ExchType = 8  //美国（仅美股期权适用）
	ExchType_ExchType_US_NYMEX     ExchType = 9  //NYMEX
	ExchType_ExchType_US_COMEX     ExchType = 10 //COMEX
	ExchType_ExchType_US_CBOT      ExchType = 11 //CBOT
	ExchType_ExchType_US_CME       ExchType = 12 //CME
	ExchType_ExchType_US_CBOE      ExchType = 13 //CBOE
	ExchType_ExchType_CN_SH        ExchType = 14 //上交所
	ExchType_ExchType_CN_SZ        ExchType = 15 //深交所
	ExchType_ExchType_CN_STIB      ExchType = 16 //科创板
	ExchType_ExchType_SG_SGX       ExchType = 17 //新交所
	ExchType_ExchType_JP_OSE       ExchType = 18 //大阪交易所
)

// Enum value maps for ExchType.
var (
	ExchType_name = map[int32]string{
		0:  "ExchType_Unknown",
		1:  "ExchType_HK_MainBoard",
		2:  "ExchType_HK_GEMBoard",
		3:  "ExchType_HK_HKEX",
		4:  "ExchType_US_NYSE",
		5:  "ExchType_US_Nasdaq",
		6:  "ExchType_US_Pink",
		7:  "ExchType_US_AMEX",
		8:  "ExchType_US_Option",
		9:  "ExchType_US_NYMEX",
		10: "ExchType_US_COMEX",
		11: "ExchType_US_CBOT",
		12: "ExchType_US_CME",
		13: "ExchType_US_CBOE",
		14: "ExchType_CN_SH",
		15: "ExchType_CN_SZ",
		16: "ExchType_CN_STIB",
		17: "ExchType_SG_SGX",
		18: "ExchType_JP_OSE",
	}
	ExchType_value = map[string]int32{
		"ExchType_Unknown":      0,
		"ExchType_HK_MainBoard": 1,
		"ExchType_HK_GEMBoard":  2,
		"ExchType_HK_HKEX":      3,
		"ExchType_US_NYSE":      4,
		"ExchType_US_Nasdaq":    5,
		"ExchType_US_Pink":      6,
		"ExchType_US_AMEX":      7,
		"ExchType_US_Option":    8,
		"ExchType_US_NYMEX":     9,
		"ExchType_US_COMEX":     10,
		"ExchType_US_CBOT":      11,
		"ExchType_US_CME":       12,
		"ExchType_US_CBOE":      13,
		"ExchType_CN_SH":        14,
		"ExchType_CN_SZ":        15,
		"ExchType_CN_STIB":      16,
		"ExchType_SG_SGX":       17,
		"ExchType_JP_OSE":       18,
	}
)

func (x ExchType) Enum() *ExchType {
	p := new(ExchType)
	*p = x
	return p
}

func (x ExchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[33].Descriptor()
}

func (ExchType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[33]
}

func (x ExchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExchType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExchType(num)
	return nil
}

// Deprecated: Use ExchType.Descriptor instead.
func (ExchType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{33}
}

// 周期类型
type PeriodType int32

const (
	PeriodType_PeriodType_Unknown  PeriodType = 0 // 未知
	PeriodType_PeriodType_INTRADAY PeriodType = 1 // 实时
	PeriodType_PeriodType_DAY      PeriodType = 2 // 日
	PeriodType_PeriodType_WEEK     PeriodType = 3 // 周
	PeriodType_PeriodType_MONTH    PeriodType = 4 // 月
)

// Enum value maps for PeriodType.
var (
	PeriodType_name = map[int32]string{
		0: "PeriodType_Unknown",
		1: "PeriodType_INTRADAY",
		2: "PeriodType_DAY",
		3: "PeriodType_WEEK",
		4: "PeriodType_MONTH",
	}
	PeriodType_value = map[string]int32{
		"PeriodType_Unknown":  0,
		"PeriodType_INTRADAY": 1,
		"PeriodType_DAY":      2,
		"PeriodType_WEEK":     3,
		"PeriodType_MONTH":    4,
	}
)

func (x PeriodType) Enum() *PeriodType {
	p := new(PeriodType)
	*p = x
	return p
}

func (x PeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[34].Descriptor()
}

func (PeriodType) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[34]
}

func (x PeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PeriodType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PeriodType(num)
	return nil
}

// Deprecated: Use PeriodType.Descriptor instead.
func (PeriodType) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{34}
}

type PriceReminderMarketStatus int32

const (
	PriceReminderMarketStatus_PriceReminderMarketStatus_Unknow      PriceReminderMarketStatus = 0
	PriceReminderMarketStatus_PriceReminderMarketStatus_Open        PriceReminderMarketStatus = 1 // 盘中
	PriceReminderMarketStatus_PriceReminderMarketStatus_USPre       PriceReminderMarketStatus = 2 // 美股盘前
	PriceReminderMarketStatus_PriceReminderMarketStatus_USAfter     PriceReminderMarketStatus = 3 // 美股盘后
	PriceReminderMarketStatus_PriceReminderMarketStatus_USOverNight PriceReminderMarketStatus = 4 // 美股夜盘
)

// Enum value maps for PriceReminderMarketStatus.
var (
	PriceReminderMarketStatus_name = map[int32]string{
		0: "PriceReminderMarketStatus_Unknow",
		1: "PriceReminderMarketStatus_Open",
		2: "PriceReminderMarketStatus_USPre",
		3: "PriceReminderMarketStatus_USAfter",
		4: "PriceReminderMarketStatus_USOverNight",
	}
	PriceReminderMarketStatus_value = map[string]int32{
		"PriceReminderMarketStatus_Unknow":      0,
		"PriceReminderMarketStatus_Open":        1,
		"PriceReminderMarketStatus_USPre":       2,
		"PriceReminderMarketStatus_USAfter":     3,
		"PriceReminderMarketStatus_USOverNight": 4,
	}
)

func (x PriceReminderMarketStatus) Enum() *PriceReminderMarketStatus {
	p := new(PriceReminderMarketStatus)
	*p = x
	return p
}

func (x PriceReminderMarketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceReminderMarketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_qot_common_Qot_Common_proto_enumTypes[35].Descriptor()
}

func (PriceReminderMarketStatus) Type() protoreflect.EnumType {
	return &file_qot_common_Qot_Common_proto_enumTypes[35]
}

func (x PriceReminderMarketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PriceReminderMarketStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PriceReminderMarketStatus(num)
	return nil
}

// Deprecated: Use PriceReminderMarketStatus.Descriptor instead.
func (PriceReminderMarketStatus) EnumDescriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{35}
}

// 两个字段确定一支股票
type Security struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Market        *int32                 `protobuf:"varint,1,req,name=market" json:"market,omitempty"` //QotMarket,股票市场
	Code          *string                `protobuf:"bytes,2,req,name=code" json:"code,omitempty"`      //股票代码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Security) Reset() {
	*x = Security{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{0}
}

func (x *Security) GetMarket() int32 {
	if x != nil && x.Market != nil {
		return *x.Market
	}
	return 0
}

func (x *Security) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type KLine struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Time           *string                `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`                       //时间戳字符串
	IsBlank        *bool                  `protobuf:"varint,2,req,name=isBlank" json:"isBlank,omitempty"`                //是否是空内容的点,若为ture则只有时间信息
	HighPrice      *float64               `protobuf:"fixed64,3,opt,name=highPrice" json:"highPrice,omitempty"`           //最高价
	OpenPrice      *float64               `protobuf:"fixed64,4,opt,name=openPrice" json:"openPrice,omitempty"`           //开盘价
	LowPrice       *float64               `protobuf:"fixed64,5,opt,name=lowPrice" json:"lowPrice,omitempty"`             //最低价
	ClosePrice     *float64               `protobuf:"fixed64,6,opt,name=closePrice" json:"closePrice,omitempty"`         //收盘价
	LastClosePrice *float64               `protobuf:"fixed64,7,opt,name=lastClosePrice" json:"lastClosePrice,omitempty"` //昨收价
	Volume         *int64                 `protobuf:"varint,8,opt,name=volume" json:"volume,omitempty"`                  //成交量
	Turnover       *float64               `protobuf:"fixed64,9,opt,name=turnover" json:"turnover,omitempty"`             //成交额
	TurnoverRate   *float64               `protobuf:"fixed64,10,opt,name=turnoverRate" json:"turnoverRate,omitempty"`    //换手率（该字段为百分比字段，展示为小数表示）
	Pe             *float64               `protobuf:"fixed64,11,opt,name=pe" json:"pe,omitempty"`                        //市盈率
	ChangeRate     *float64               `protobuf:"fixed64,12,opt,name=changeRate" json:"changeRate,omitempty"`        //涨跌幅（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Timestamp      *float64               `protobuf:"fixed64,13,opt,name=timestamp" json:"timestamp,omitempty"`          //时间戳
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KLine) Reset() {
	*x = KLine{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KLine) ProtoMessage() {}

func (x *KLine) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KLine.ProtoReflect.Descriptor instead.
func (*KLine) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{1}
}

func (x *KLine) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

func (x *KLine) GetIsBlank() bool {
	if x != nil && x.IsBlank != nil {
		return *x.IsBlank
	}
	return false
}

func (x *KLine) GetHighPrice() float64 {
	if x != nil && x.HighPrice != nil {
		return *x.HighPrice
	}
	return 0
}

func (x *KLine) GetOpenPrice() float64 {
	if x != nil && x.OpenPrice != nil {
		return *x.OpenPrice
	}
	return 0
}

func (x *KLine) GetLowPrice() float64 {
	if x != nil && x.LowPrice != nil {
		return *x.LowPrice
	}
	return 0
}

func (x *KLine) GetClosePrice() float64 {
	if x != nil && x.ClosePrice != nil {
		return *x.ClosePrice
	}
	return 0
}

func (x *KLine) GetLastClosePrice() float64 {
	if x != nil && x.LastClosePrice != nil {
		return *x.LastClosePrice
	}
	return 0
}

func (x *KLine) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *KLine) GetTurnover() float64 {
	if x != nil && x.Turnover != nil {
		return *x.Turnover
	}
	return 0
}

func (x *KLine) GetTurnoverRate() float64 {
	if x != nil && x.TurnoverRate != nil {
		return *x.TurnoverRate
	}
	return 0
}

func (x *KLine) GetPe() float64 {
	if x != nil && x.Pe != nil {
		return *x.Pe
	}
	return 0
}

func (x *KLine) GetChangeRate() float64 {
	if x != nil && x.ChangeRate != nil {
		return *x.ChangeRate
	}
	return 0
}

func (x *KLine) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type OptionBasicQotExData struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	StrikePrice          *float64               `protobuf:"fixed64,1,req,name=strikePrice" json:"strikePrice,omitempty"`                    //行权价
	ContractSize         *int32                 `protobuf:"varint,2,req,name=contractSize" json:"contractSize,omitempty"`                   //每份合约数(整型数据)
	ContractSizeFloat    *float64               `protobuf:"fixed64,17,opt,name=contractSizeFloat" json:"contractSizeFloat,omitempty"`       //每份合约数（浮点型数据）
	OpenInterest         *int32                 `protobuf:"varint,3,req,name=openInterest" json:"openInterest,omitempty"`                   //未平仓合约数
	ImpliedVolatility    *float64               `protobuf:"fixed64,4,req,name=impliedVolatility" json:"impliedVolatility,omitempty"`        //隐含波动率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Premium              *float64               `protobuf:"fixed64,5,req,name=premium" json:"premium,omitempty"`                            //溢价（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Delta                *float64               `protobuf:"fixed64,6,req,name=delta" json:"delta,omitempty"`                                //希腊值 Delta
	Gamma                *float64               `protobuf:"fixed64,7,req,name=gamma" json:"gamma,omitempty"`                                //希腊值 Gamma
	Vega                 *float64               `protobuf:"fixed64,8,req,name=vega" json:"vega,omitempty"`                                  //希腊值 Vega
	Theta                *float64               `protobuf:"fixed64,9,req,name=theta" json:"theta,omitempty"`                                //希腊值 Theta
	Rho                  *float64               `protobuf:"fixed64,10,req,name=rho" json:"rho,omitempty"`                                   //希腊值 Rho
	NetOpenInterest      *int32                 `protobuf:"varint,11,opt,name=netOpenInterest" json:"netOpenInterest,omitempty"`            //净未平仓合约数，仅港股期权适用
	ExpiryDateDistance   *int32                 `protobuf:"varint,12,opt,name=expiryDateDistance" json:"expiryDateDistance,omitempty"`      //距离到期日天数，负数表示已过期
	ContractNominalValue *float64               `protobuf:"fixed64,13,opt,name=contractNominalValue" json:"contractNominalValue,omitempty"` //合约名义金额，仅港股期权适用
	OwnerLotMultiplier   *float64               `protobuf:"fixed64,14,opt,name=ownerLotMultiplier" json:"ownerLotMultiplier,omitempty"`     //相等正股手数，指数期权无该字段，仅港股期权适用
	OptionAreaType       *int32                 `protobuf:"varint,15,opt,name=optionAreaType" json:"optionAreaType,omitempty"`              //OptionAreaType，期权类型（按行权时间）
	ContractMultiplier   *float64               `protobuf:"fixed64,16,opt,name=contractMultiplier" json:"contractMultiplier,omitempty"`     //合约乘数
	IndexOptionType      *int32                 `protobuf:"varint,18,opt,name=indexOptionType" json:"indexOptionType,omitempty"`            //IndexOptionType，指数期权类型
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *OptionBasicQotExData) Reset() {
	*x = OptionBasicQotExData{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionBasicQotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionBasicQotExData) ProtoMessage() {}

func (x *OptionBasicQotExData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionBasicQotExData.ProtoReflect.Descriptor instead.
func (*OptionBasicQotExData) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{2}
}

func (x *OptionBasicQotExData) GetStrikePrice() float64 {
	if x != nil && x.StrikePrice != nil {
		return *x.StrikePrice
	}
	return 0
}

func (x *OptionBasicQotExData) GetContractSize() int32 {
	if x != nil && x.ContractSize != nil {
		return *x.ContractSize
	}
	return 0
}

func (x *OptionBasicQotExData) GetContractSizeFloat() float64 {
	if x != nil && x.ContractSizeFloat != nil {
		return *x.ContractSizeFloat
	}
	return 0
}

func (x *OptionBasicQotExData) GetOpenInterest() int32 {
	if x != nil && x.OpenInterest != nil {
		return *x.OpenInterest
	}
	return 0
}

func (x *OptionBasicQotExData) GetImpliedVolatility() float64 {
	if x != nil && x.ImpliedVolatility != nil {
		return *x.ImpliedVolatility
	}
	return 0
}

func (x *OptionBasicQotExData) GetPremium() float64 {
	if x != nil && x.Premium != nil {
		return *x.Premium
	}
	return 0
}

func (x *OptionBasicQotExData) GetDelta() float64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *OptionBasicQotExData) GetGamma() float64 {
	if x != nil && x.Gamma != nil {
		return *x.Gamma
	}
	return 0
}

func (x *OptionBasicQotExData) GetVega() float64 {
	if x != nil && x.Vega != nil {
		return *x.Vega
	}
	return 0
}

func (x *OptionBasicQotExData) GetTheta() float64 {
	if x != nil && x.Theta != nil {
		return *x.Theta
	}
	return 0
}

func (x *OptionBasicQotExData) GetRho() float64 {
	if x != nil && x.Rho != nil {
		return *x.Rho
	}
	return 0
}

func (x *OptionBasicQotExData) GetNetOpenInterest() int32 {
	if x != nil && x.NetOpenInterest != nil {
		return *x.NetOpenInterest
	}
	return 0
}

func (x *OptionBasicQotExData) GetExpiryDateDistance() int32 {
	if x != nil && x.ExpiryDateDistance != nil {
		return *x.ExpiryDateDistance
	}
	return 0
}

func (x *OptionBasicQotExData) GetContractNominalValue() float64 {
	if x != nil && x.ContractNominalValue != nil {
		return *x.ContractNominalValue
	}
	return 0
}

func (x *OptionBasicQotExData) GetOwnerLotMultiplier() float64 {
	if x != nil && x.OwnerLotMultiplier != nil {
		return *x.OwnerLotMultiplier
	}
	return 0
}

func (x *OptionBasicQotExData) GetOptionAreaType() int32 {
	if x != nil && x.OptionAreaType != nil {
		return *x.OptionAreaType
	}
	return 0
}

func (x *OptionBasicQotExData) GetContractMultiplier() float64 {
	if x != nil && x.ContractMultiplier != nil {
		return *x.ContractMultiplier
	}
	return 0
}

func (x *OptionBasicQotExData) GetIndexOptionType() int32 {
	if x != nil && x.IndexOptionType != nil {
		return *x.IndexOptionType
	}
	return 0
}

// 美股支持盘前盘后数据
// 科创板仅支持盘后数据：成交量，成交额
type PreAfterMarketData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         *float64               `protobuf:"fixed64,1,opt,name=price" json:"price,omitempty"`           // 盘前或盘后 - 价格
	HighPrice     *float64               `protobuf:"fixed64,2,opt,name=highPrice" json:"highPrice,omitempty"`   // 盘前或盘后 - 最高价
	LowPrice      *float64               `protobuf:"fixed64,3,opt,name=lowPrice" json:"lowPrice,omitempty"`     // 盘前或盘后 - 最低价
	Volume        *int64                 `protobuf:"varint,4,opt,name=volume" json:"volume,omitempty"`          // 盘前或盘后 - 成交量
	Turnover      *float64               `protobuf:"fixed64,5,opt,name=turnover" json:"turnover,omitempty"`     // 盘前或盘后 - 成交额
	ChangeVal     *float64               `protobuf:"fixed64,6,opt,name=changeVal" json:"changeVal,omitempty"`   // 盘前或盘后 - 涨跌额
	ChangeRate    *float64               `protobuf:"fixed64,7,opt,name=changeRate" json:"changeRate,omitempty"` // 盘前或盘后 - 涨跌幅（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Amplitude     *float64               `protobuf:"fixed64,8,opt,name=amplitude" json:"amplitude,omitempty"`   // 盘前或盘后 - 振幅（该字段为百分比字段，默认不展示%，如20实际对应20%）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreAfterMarketData) Reset() {
	*x = PreAfterMarketData{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreAfterMarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreAfterMarketData) ProtoMessage() {}

func (x *PreAfterMarketData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreAfterMarketData.ProtoReflect.Descriptor instead.
func (*PreAfterMarketData) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{3}
}

func (x *PreAfterMarketData) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *PreAfterMarketData) GetHighPrice() float64 {
	if x != nil && x.HighPrice != nil {
		return *x.HighPrice
	}
	return 0
}

func (x *PreAfterMarketData) GetLowPrice() float64 {
	if x != nil && x.LowPrice != nil {
		return *x.LowPrice
	}
	return 0
}

func (x *PreAfterMarketData) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *PreAfterMarketData) GetTurnover() float64 {
	if x != nil && x.Turnover != nil {
		return *x.Turnover
	}
	return 0
}

func (x *PreAfterMarketData) GetChangeVal() float64 {
	if x != nil && x.ChangeVal != nil {
		return *x.ChangeVal
	}
	return 0
}

func (x *PreAfterMarketData) GetChangeRate() float64 {
	if x != nil && x.ChangeRate != nil {
		return *x.ChangeRate
	}
	return 0
}

func (x *PreAfterMarketData) GetAmplitude() float64 {
	if x != nil && x.Amplitude != nil {
		return *x.Amplitude
	}
	return 0
}

type FutureBasicQotExData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	LastSettlePrice    *float64               `protobuf:"fixed64,1,req,name=lastSettlePrice" json:"lastSettlePrice,omitempty"`      //昨结
	Position           *int32                 `protobuf:"varint,2,req,name=position" json:"position,omitempty"`                     //持仓量
	PositionChange     *int32                 `protobuf:"varint,3,req,name=positionChange" json:"positionChange,omitempty"`         //日增仓
	ExpiryDateDistance *int32                 `protobuf:"varint,4,opt,name=expiryDateDistance" json:"expiryDateDistance,omitempty"` //距离到期日天数
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FutureBasicQotExData) Reset() {
	*x = FutureBasicQotExData{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FutureBasicQotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureBasicQotExData) ProtoMessage() {}

func (x *FutureBasicQotExData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureBasicQotExData.ProtoReflect.Descriptor instead.
func (*FutureBasicQotExData) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{4}
}

func (x *FutureBasicQotExData) GetLastSettlePrice() float64 {
	if x != nil && x.LastSettlePrice != nil {
		return *x.LastSettlePrice
	}
	return 0
}

func (x *FutureBasicQotExData) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *FutureBasicQotExData) GetPositionChange() int32 {
	if x != nil && x.PositionChange != nil {
		return *x.PositionChange
	}
	return 0
}

func (x *FutureBasicQotExData) GetExpiryDateDistance() int32 {
	if x != nil && x.ExpiryDateDistance != nil {
		return *x.ExpiryDateDistance
	}
	return 0
}

type WarrantBasicQotExData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Delta             *float64               `protobuf:"fixed64,1,opt,name=delta" json:"delta,omitempty"`                         //对冲值,仅认购认沽支持该字段
	ImpliedVolatility *float64               `protobuf:"fixed64,2,opt,name=impliedVolatility" json:"impliedVolatility,omitempty"` //引申波幅,仅认购认沽支持该字段
	Premium           *float64               `protobuf:"fixed64,3,req,name=premium" json:"premium,omitempty"`                     //溢价（该字段为百分比字段，默认不展示%，如20实际对应20%）
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *WarrantBasicQotExData) Reset() {
	*x = WarrantBasicQotExData{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarrantBasicQotExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarrantBasicQotExData) ProtoMessage() {}

func (x *WarrantBasicQotExData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarrantBasicQotExData.ProtoReflect.Descriptor instead.
func (*WarrantBasicQotExData) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{5}
}

func (x *WarrantBasicQotExData) GetDelta() float64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *WarrantBasicQotExData) GetImpliedVolatility() float64 {
	if x != nil && x.ImpliedVolatility != nil {
		return *x.ImpliedVolatility
	}
	return 0
}

func (x *WarrantBasicQotExData) GetPremium() float64 {
	if x != nil && x.Premium != nil {
		return *x.Premium
	}
	return 0
}

type BasicQot struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Security        *Security              `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`                  //股票
	Name            *string                `protobuf:"bytes,24,opt,name=name" json:"name,omitempty"`                         // 股票名称
	IsSuspended     *bool                  `protobuf:"varint,2,req,name=isSuspended" json:"isSuspended,omitempty"`           //是否停牌
	ListTime        *string                `protobuf:"bytes,3,req,name=listTime" json:"listTime,omitempty"`                  //上市日期字符串
	PriceSpread     *float64               `protobuf:"fixed64,4,req,name=priceSpread" json:"priceSpread,omitempty"`          //价差
	UpdateTime      *string                `protobuf:"bytes,5,req,name=updateTime" json:"updateTime,omitempty"`              //最新价的更新时间字符串，对其他字段不适用
	HighPrice       *float64               `protobuf:"fixed64,6,req,name=highPrice" json:"highPrice,omitempty"`              //最高价
	OpenPrice       *float64               `protobuf:"fixed64,7,req,name=openPrice" json:"openPrice,omitempty"`              //开盘价
	LowPrice        *float64               `protobuf:"fixed64,8,req,name=lowPrice" json:"lowPrice,omitempty"`                //最低价
	CurPrice        *float64               `protobuf:"fixed64,9,req,name=curPrice" json:"curPrice,omitempty"`                //最新价
	LastClosePrice  *float64               `protobuf:"fixed64,10,req,name=lastClosePrice" json:"lastClosePrice,omitempty"`   //昨收价
	Volume          *int64                 `protobuf:"varint,11,req,name=volume" json:"volume,omitempty"`                    //成交量
	Turnover        *float64               `protobuf:"fixed64,12,req,name=turnover" json:"turnover,omitempty"`               //成交额
	TurnoverRate    *float64               `protobuf:"fixed64,13,req,name=turnoverRate" json:"turnoverRate,omitempty"`       //换手率（该字段为百分比字段，默认不展示%，如20实际对应20%）
	Amplitude       *float64               `protobuf:"fixed64,14,req,name=amplitude" json:"amplitude,omitempty"`             //振幅（该字段为百分比字段，默认不展示%，如20实际对应20%）
	DarkStatus      *int32                 `protobuf:"varint,15,opt,name=darkStatus" json:"darkStatus,omitempty"`            //DarkStatus, 暗盘交易状态
	OptionExData    *OptionBasicQotExData  `protobuf:"bytes,16,opt,name=optionExData" json:"optionExData,omitempty"`         //期权特有字段
	ListTimestamp   *float64               `protobuf:"fixed64,17,opt,name=listTimestamp" json:"listTimestamp,omitempty"`     //上市日期时间戳
	UpdateTimestamp *float64               `protobuf:"fixed64,18,opt,name=updateTimestamp" json:"updateTimestamp,omitempty"` //最新价的更新时间戳，对其他字段不适用
	PreMarket       *PreAfterMarketData    `protobuf:"bytes,19,opt,name=preMarket" json:"preMarket,omitempty"`               //盘前数据
	AfterMarket     *PreAfterMarketData    `protobuf:"bytes,20,opt,name=afterMarket" json:"afterMarket,omitempty"`           //盘后数据
	SecStatus       *int32                 `protobuf:"varint,21,opt,name=secStatus" json:"secStatus,omitempty"`              //SecurityStatus, 股票状态
	FutureExData    *FutureBasicQotExData  `protobuf:"bytes,22,opt,name=futureExData" json:"futureExData,omitempty"`         //期货特有字段
	WarrantExData   *WarrantBasicQotExData `protobuf:"bytes,23,opt,name=warrantExData" json:"warrantExData,omitempty"`       //窝轮特有字段
	Overnight       *PreAfterMarketData    `protobuf:"bytes,25,opt,name=overnight" json:"overnight,omitempty"`               //夜盘数据
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BasicQot) Reset() {
	*x = BasicQot{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicQot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicQot) ProtoMessage() {}

func (x *BasicQot) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicQot.ProtoReflect.Descriptor instead.
func (*BasicQot) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{6}
}

func (x *BasicQot) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *BasicQot) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BasicQot) GetIsSuspended() bool {
	if x != nil && x.IsSuspended != nil {
		return *x.IsSuspended
	}
	return false
}

func (x *BasicQot) GetListTime() string {
	if x != nil && x.ListTime != nil {
		return *x.ListTime
	}
	return ""
}

func (x *BasicQot) GetPriceSpread() float64 {
	if x != nil && x.PriceSpread != nil {
		return *x.PriceSpread
	}
	return 0
}

func (x *BasicQot) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *BasicQot) GetHighPrice() float64 {
	if x != nil && x.HighPrice != nil {
		return *x.HighPrice
	}
	return 0
}

func (x *BasicQot) GetOpenPrice() float64 {
	if x != nil && x.OpenPrice != nil {
		return *x.OpenPrice
	}
	return 0
}

func (x *BasicQot) GetLowPrice() float64 {
	if x != nil && x.LowPrice != nil {
		return *x.LowPrice
	}
	return 0
}

func (x *BasicQot) GetCurPrice() float64 {
	if x != nil && x.CurPrice != nil {
		return *x.CurPrice
	}
	return 0
}

func (x *BasicQot) GetLastClosePrice() float64 {
	if x != nil && x.LastClosePrice != nil {
		return *x.LastClosePrice
	}
	return 0
}

func (x *BasicQot) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *BasicQot) GetTurnover() float64 {
	if x != nil && x.Turnover != nil {
		return *x.Turnover
	}
	return 0
}

func (x *BasicQot) GetTurnoverRate() float64 {
	if x != nil && x.TurnoverRate != nil {
		return *x.TurnoverRate
	}
	return 0
}

func (x *BasicQot) GetAmplitude() float64 {
	if x != nil && x.Amplitude != nil {
		return *x.Amplitude
	}
	return 0
}

func (x *BasicQot) GetDarkStatus() int32 {
	if x != nil && x.DarkStatus != nil {
		return *x.DarkStatus
	}
	return 0
}

func (x *BasicQot) GetOptionExData() *OptionBasicQotExData {
	if x != nil {
		return x.OptionExData
	}
	return nil
}

func (x *BasicQot) GetListTimestamp() float64 {
	if x != nil && x.ListTimestamp != nil {
		return *x.ListTimestamp
	}
	return 0
}

func (x *BasicQot) GetUpdateTimestamp() float64 {
	if x != nil && x.UpdateTimestamp != nil {
		return *x.UpdateTimestamp
	}
	return 0
}

func (x *BasicQot) GetPreMarket() *PreAfterMarketData {
	if x != nil {
		return x.PreMarket
	}
	return nil
}

func (x *BasicQot) GetAfterMarket() *PreAfterMarketData {
	if x != nil {
		return x.AfterMarket
	}
	return nil
}

func (x *BasicQot) GetSecStatus() int32 {
	if x != nil && x.SecStatus != nil {
		return *x.SecStatus
	}
	return 0
}

func (x *BasicQot) GetFutureExData() *FutureBasicQotExData {
	if x != nil {
		return x.FutureExData
	}
	return nil
}

func (x *BasicQot) GetWarrantExData() *WarrantBasicQotExData {
	if x != nil {
		return x.WarrantExData
	}
	return nil
}

func (x *BasicQot) GetOvernight() *PreAfterMarketData {
	if x != nil {
		return x.Overnight
	}
	return nil
}

type TimeShare struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Time           *string                `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`                       //时间字符串
	Minute         *int32                 `protobuf:"varint,2,req,name=minute" json:"minute,omitempty"`                  //距离0点过了多少分钟
	IsBlank        *bool                  `protobuf:"varint,3,req,name=isBlank" json:"isBlank,omitempty"`                //是否是空内容的点,若为ture则只有时间信息
	Price          *float64               `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`                   //当前价
	LastClosePrice *float64               `protobuf:"fixed64,5,opt,name=lastClosePrice" json:"lastClosePrice,omitempty"` //昨收价
	AvgPrice       *float64               `protobuf:"fixed64,6,opt,name=avgPrice" json:"avgPrice,omitempty"`             //均价
	Volume         *int64                 `protobuf:"varint,7,opt,name=volume" json:"volume,omitempty"`                  //成交量
	Turnover       *float64               `protobuf:"fixed64,8,opt,name=turnover" json:"turnover,omitempty"`             //成交额
	Timestamp      *float64               `protobuf:"fixed64,9,opt,name=timestamp" json:"timestamp,omitempty"`           //时间戳
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TimeShare) Reset() {
	*x = TimeShare{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeShare) ProtoMessage() {}

func (x *TimeShare) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeShare.ProtoReflect.Descriptor instead.
func (*TimeShare) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{7}
}

func (x *TimeShare) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

func (x *TimeShare) GetMinute() int32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *TimeShare) GetIsBlank() bool {
	if x != nil && x.IsBlank != nil {
		return *x.IsBlank
	}
	return false
}

func (x *TimeShare) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *TimeShare) GetLastClosePrice() float64 {
	if x != nil && x.LastClosePrice != nil {
		return *x.LastClosePrice
	}
	return 0
}

func (x *TimeShare) GetAvgPrice() float64 {
	if x != nil && x.AvgPrice != nil {
		return *x.AvgPrice
	}
	return 0
}

func (x *TimeShare) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *TimeShare) GetTurnover() float64 {
	if x != nil && x.Turnover != nil {
		return *x.Turnover
	}
	return 0
}

func (x *TimeShare) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type SecurityStaticBasic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Security      *Security              `protobuf:"bytes,1,req,name=security" json:"security,omitempty"`             //股票
	Id            *int64                 `protobuf:"varint,2,req,name=id" json:"id,omitempty"`                        //股票ID
	LotSize       *int32                 `protobuf:"varint,3,req,name=lotSize" json:"lotSize,omitempty"`              //每手数量,期权以及期货类型表示合约乘数
	SecType       *int32                 `protobuf:"varint,4,req,name=secType" json:"secType,omitempty"`              //Qot_Common.SecurityType,股票类型
	Name          *string                `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`                     //股票名字
	ListTime      *string                `protobuf:"bytes,6,req,name=listTime" json:"listTime,omitempty"`             //上市时间字符串
	Delisting     *bool                  `protobuf:"varint,7,opt,name=delisting" json:"delisting,omitempty"`          //是否退市
	ListTimestamp *float64               `protobuf:"fixed64,8,opt,name=listTimestamp" json:"listTimestamp,omitempty"` //上市时间戳
	ExchType      *int32                 `protobuf:"varint,9,opt,name=exchType" json:"exchType,omitempty"`            //Qot_Common.ExchType,所属交易所
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecurityStaticBasic) Reset() {
	*x = SecurityStaticBasic{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityStaticBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityStaticBasic) ProtoMessage() {}

func (x *SecurityStaticBasic) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityStaticBasic.ProtoReflect.Descriptor instead.
func (*SecurityStaticBasic) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{8}
}

func (x *SecurityStaticBasic) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *SecurityStaticBasic) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SecurityStaticBasic) GetLotSize() int32 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *SecurityStaticBasic) GetSecType() int32 {
	if x != nil && x.SecType != nil {
		return *x.SecType
	}
	return 0
}

func (x *SecurityStaticBasic) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SecurityStaticBasic) GetListTime() string {
	if x != nil && x.ListTime != nil {
		return *x.ListTime
	}
	return ""
}

func (x *SecurityStaticBasic) GetDelisting() bool {
	if x != nil && x.Delisting != nil {
		return *x.Delisting
	}
	return false
}

func (x *SecurityStaticBasic) GetListTimestamp() float64 {
	if x != nil && x.ListTimestamp != nil {
		return *x.ListTimestamp
	}
	return 0
}

func (x *SecurityStaticBasic) GetExchType() int32 {
	if x != nil && x.ExchType != nil {
		return *x.ExchType
	}
	return 0
}

type WarrantStaticExData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *int32                 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`  //Qot_Common.WarrantType,窝轮类型
	Owner         *Security              `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"` //所属正股
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WarrantStaticExData) Reset() {
	*x = WarrantStaticExData{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarrantStaticExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarrantStaticExData) ProtoMessage() {}

func (x *WarrantStaticExData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarrantStaticExData.ProtoReflect.Descriptor instead.
func (*WarrantStaticExData) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{9}
}

func (x *WarrantStaticExData) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WarrantStaticExData) GetOwner() *Security {
	if x != nil {
		return x.Owner
	}
	return nil
}

type OptionStaticExData struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Type                 *int32                 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`                                  //Qot_Common.OptionType,期权
	Owner                *Security              `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"`                                 //标的股
	StrikeTime           *string                `protobuf:"bytes,3,req,name=strikeTime" json:"strikeTime,omitempty"`                       //行权日
	StrikePrice          *float64               `protobuf:"fixed64,4,req,name=strikePrice" json:"strikePrice,omitempty"`                   //行权价
	Suspend              *bool                  `protobuf:"varint,5,req,name=suspend" json:"suspend,omitempty"`                            //是否停牌
	Market               *string                `protobuf:"bytes,6,req,name=market" json:"market,omitempty"`                               //发行市场名字
	StrikeTimestamp      *float64               `protobuf:"fixed64,7,opt,name=strikeTimestamp" json:"strikeTimestamp,omitempty"`           //行权日时间戳
	IndexOptionType      *int32                 `protobuf:"varint,8,opt,name=indexOptionType" json:"indexOptionType,omitempty"`            //Qot_Common.IndexOptionType, 指数期权的类型，仅在指数期权有效
	ExpirationCycle      *int32                 `protobuf:"varint,9,opt,name=expirationCycle" json:"expirationCycle,omitempty"`            // ExpirationCycle，交割周期
	OptionStandardType   *int32                 `protobuf:"varint,10,opt,name=optionStandardType" json:"optionStandardType,omitempty"`     // OptionStandardType，标准期权
	OptionSettlementMode *int32                 `protobuf:"varint,11,opt,name=optionSettlementMode" json:"optionSettlementMode,omitempty"` // OptionSettlementMode，结算方式
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *OptionStaticExData) Reset() {
	*x = OptionStaticExData{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionStaticExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionStaticExData) ProtoMessage() {}

func (x *OptionStaticExData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionStaticExData.ProtoReflect.Descriptor instead.
func (*OptionStaticExData) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{10}
}

func (x *OptionStaticExData) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *OptionStaticExData) GetOwner() *Security {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OptionStaticExData) GetStrikeTime() string {
	if x != nil && x.StrikeTime != nil {
		return *x.StrikeTime
	}
	return ""
}

func (x *OptionStaticExData) GetStrikePrice() float64 {
	if x != nil && x.StrikePrice != nil {
		return *x.StrikePrice
	}
	return 0
}

func (x *OptionStaticExData) GetSuspend() bool {
	if x != nil && x.Suspend != nil {
		return *x.Suspend
	}
	return false
}

func (x *OptionStaticExData) GetMarket() string {
	if x != nil && x.Market != nil {
		return *x.Market
	}
	return ""
}

func (x *OptionStaticExData) GetStrikeTimestamp() float64 {
	if x != nil && x.StrikeTimestamp != nil {
		return *x.StrikeTimestamp
	}
	return 0
}

func (x *OptionStaticExData) GetIndexOptionType() int32 {
	if x != nil && x.IndexOptionType != nil {
		return *x.IndexOptionType
	}
	return 0
}

func (x *OptionStaticExData) GetExpirationCycle() int32 {
	if x != nil && x.ExpirationCycle != nil {
		return *x.ExpirationCycle
	}
	return 0
}

func (x *OptionStaticExData) GetOptionStandardType() int32 {
	if x != nil && x.OptionStandardType != nil {
		return *x.OptionStandardType
	}
	return 0
}

func (x *OptionStaticExData) GetOptionSettlementMode() int32 {
	if x != nil && x.OptionSettlementMode != nil {
		return *x.OptionSettlementMode
	}
	return 0
}

type FutureStaticExData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	LastTradeTime      *string                `protobuf:"bytes,1,req,name=lastTradeTime" json:"lastTradeTime,omitempty"`             //最后交易日，只有非主连期货合约才有该字段
	LastTradeTimestamp *float64               `protobuf:"fixed64,2,opt,name=lastTradeTimestamp" json:"lastTradeTimestamp,omitempty"` //最后交易日时间戳，只有非主连期货合约才有该字段
	IsMainContract     *bool                  `protobuf:"varint,3,req,name=isMainContract" json:"isMainContract,omitempty"`          //是否主连合约
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FutureStaticExData) Reset() {
	*x = FutureStaticExData{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FutureStaticExData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureStaticExData) ProtoMessage() {}

func (x *FutureStaticExData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureStaticExData.ProtoReflect.Descriptor instead.
func (*FutureStaticExData) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{11}
}

func (x *FutureStaticExData) GetLastTradeTime() string {
	if x != nil && x.LastTradeTime != nil {
		return *x.LastTradeTime
	}
	return ""
}

func (x *FutureStaticExData) GetLastTradeTimestamp() float64 {
	if x != nil && x.LastTradeTimestamp != nil {
		return *x.LastTradeTimestamp
	}
	return 0
}

func (x *FutureStaticExData) GetIsMainContract() bool {
	if x != nil && x.IsMainContract != nil {
		return *x.IsMainContract
	}
	return false
}

type SecurityStaticInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Basic         *SecurityStaticBasic   `protobuf:"bytes,1,req,name=basic" json:"basic,omitempty"`                 //基本股票静态信息
	WarrantExData *WarrantStaticExData   `protobuf:"bytes,2,opt,name=warrantExData" json:"warrantExData,omitempty"` //窝轮额外股票静态信息
	OptionExData  *OptionStaticExData    `protobuf:"bytes,3,opt,name=optionExData" json:"optionExData,omitempty"`   //期权额外股票静态信息
	FutureExData  *FutureStaticExData    `protobuf:"bytes,4,opt,name=futureExData" json:"futureExData,omitempty"`   //期货额外股票静态信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecurityStaticInfo) Reset() {
	*x = SecurityStaticInfo{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityStaticInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityStaticInfo) ProtoMessage() {}

func (x *SecurityStaticInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityStaticInfo.ProtoReflect.Descriptor instead.
func (*SecurityStaticInfo) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{12}
}

func (x *SecurityStaticInfo) GetBasic() *SecurityStaticBasic {
	if x != nil {
		return x.Basic
	}
	return nil
}

func (x *SecurityStaticInfo) GetWarrantExData() *WarrantStaticExData {
	if x != nil {
		return x.WarrantExData
	}
	return nil
}

func (x *SecurityStaticInfo) GetOptionExData() *OptionStaticExData {
	if x != nil {
		return x.OptionExData
	}
	return nil
}

func (x *SecurityStaticInfo) GetFutureExData() *FutureStaticExData {
	if x != nil {
		return x.FutureExData
	}
	return nil
}

type Broker struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *int64                 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`    //经纪ID
	Name  *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"` //经纪名称
	Pos   *int32                 `protobuf:"varint,3,req,name=pos" json:"pos,omitempty"`  //经纪档位
	// 以下为SF行情特有字段
	OrderID       *int64 `protobuf:"varint,4,opt,name=orderID" json:"orderID,omitempty"` //交易所订单ID，与交易接口返回的订单ID并不一样
	Volume        *int64 `protobuf:"varint,5,opt,name=volume" json:"volume,omitempty"`   //订单股数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Broker) Reset() {
	*x = Broker{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Broker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Broker) ProtoMessage() {}

func (x *Broker) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Broker.ProtoReflect.Descriptor instead.
func (*Broker) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{13}
}

func (x *Broker) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Broker) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Broker) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Broker) GetOrderID() int64 {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return 0
}

func (x *Broker) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

type Ticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          *string                `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`                   //时间字符串
	Sequence      *int64                 `protobuf:"varint,2,req,name=sequence" json:"sequence,omitempty"`          // 唯一标识
	Dir           *int32                 `protobuf:"varint,3,req,name=dir" json:"dir,omitempty"`                    //TickerDirection, 买卖方向
	Price         *float64               `protobuf:"fixed64,4,req,name=price" json:"price,omitempty"`               //价格
	Volume        *int64                 `protobuf:"varint,5,req,name=volume" json:"volume,omitempty"`              //成交量
	Turnover      *float64               `protobuf:"fixed64,6,req,name=turnover" json:"turnover,omitempty"`         //成交额
	RecvTime      *float64               `protobuf:"fixed64,7,opt,name=recvTime" json:"recvTime,omitempty"`         //收到推送数据的本地时间戳，用于定位延迟
	Type          *int32                 `protobuf:"varint,8,opt,name=type" json:"type,omitempty"`                  //TickerType, 逐笔类型
	TypeSign      *int32                 `protobuf:"varint,9,opt,name=typeSign" json:"typeSign,omitempty"`          //逐笔类型符号
	PushDataType  *int32                 `protobuf:"varint,10,opt,name=pushDataType" json:"pushDataType,omitempty"` //用于区分推送情况
	Timestamp     *float64               `protobuf:"fixed64,11,opt,name=timestamp" json:"timestamp,omitempty"`      //时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ticker) Reset() {
	*x = Ticker{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticker) ProtoMessage() {}

func (x *Ticker) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticker.ProtoReflect.Descriptor instead.
func (*Ticker) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{14}
}

func (x *Ticker) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

func (x *Ticker) GetSequence() int64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *Ticker) GetDir() int32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *Ticker) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Ticker) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *Ticker) GetTurnover() float64 {
	if x != nil && x.Turnover != nil {
		return *x.Turnover
	}
	return 0
}

func (x *Ticker) GetRecvTime() float64 {
	if x != nil && x.RecvTime != nil {
		return *x.RecvTime
	}
	return 0
}

func (x *Ticker) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Ticker) GetTypeSign() int32 {
	if x != nil && x.TypeSign != nil {
		return *x.TypeSign
	}
	return 0
}

func (x *Ticker) GetPushDataType() int32 {
	if x != nil && x.PushDataType != nil {
		return *x.PushDataType
	}
	return 0
}

func (x *Ticker) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type OrderBookDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderID       *int64                 `protobuf:"varint,1,req,name=orderID" json:"orderID,omitempty"` //交易所订单ID，与交易接口返回的订单ID并不一样
	Volume        *int64                 `protobuf:"varint,2,req,name=volume" json:"volume,omitempty"`   //订单股数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookDetail) Reset() {
	*x = OrderBookDetail{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookDetail) ProtoMessage() {}

func (x *OrderBookDetail) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookDetail.ProtoReflect.Descriptor instead.
func (*OrderBookDetail) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{15}
}

func (x *OrderBookDetail) GetOrderID() int64 {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return 0
}

func (x *OrderBookDetail) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

type OrderBook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         *float64               `protobuf:"fixed64,1,req,name=price" json:"price,omitempty"`            //委托价格
	Volume        *int64                 `protobuf:"varint,2,req,name=volume" json:"volume,omitempty"`           //委托数量
	OrederCount   *int32                 `protobuf:"varint,3,req,name=orederCount" json:"orederCount,omitempty"` //委托订单个数
	DetailList    []*OrderBookDetail     `protobuf:"bytes,4,rep,name=detailList" json:"detailList,omitempty"`    //订单信息，SF行情特有
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{16}
}

func (x *OrderBook) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *OrderBook) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *OrderBook) GetOrederCount() int32 {
	if x != nil && x.OrederCount != nil {
		return *x.OrederCount
	}
	return 0
}

func (x *OrderBook) GetDetailList() []*OrderBookDetail {
	if x != nil {
		return x.DetailList
	}
	return nil
}

// 持股变动
type ShareHoldingChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HolderName    *string                `protobuf:"bytes,1,req,name=holderName" json:"holderName,omitempty"`       //持有者名称（机构名称 或 基金名称 或 高管姓名）
	HoldingQty    *float64               `protobuf:"fixed64,2,req,name=holdingQty" json:"holdingQty,omitempty"`     //当前持股数量
	HoldingRatio  *float64               `protobuf:"fixed64,3,req,name=holdingRatio" json:"holdingRatio,omitempty"` //当前持股百分比（该字段为百分比字段，默认不展示%，如20实际对应20%）
	ChangeQty     *float64               `protobuf:"fixed64,4,req,name=changeQty" json:"changeQty,omitempty"`       //较上一次变动数量
	ChangeRatio   *float64               `protobuf:"fixed64,5,req,name=changeRatio" json:"changeRatio,omitempty"`   //较上一次变动百分比（该字段为百分比字段，默认不展示%，如20实际对应20%。是相对于自身的比例，而不是总的。如总股本1万股，持有100股，持股百分比是1%，卖掉50股，变动比例是50%，而不是0.5%）
	Time          *string                `protobuf:"bytes,6,req,name=time" json:"time,omitempty"`                   //发布时间(YYYY-MM-DD HH:MM:SS字符串)
	Timestamp     *float64               `protobuf:"fixed64,7,opt,name=timestamp" json:"timestamp,omitempty"`       //时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShareHoldingChange) Reset() {
	*x = ShareHoldingChange{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareHoldingChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareHoldingChange) ProtoMessage() {}

func (x *ShareHoldingChange) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareHoldingChange.ProtoReflect.Descriptor instead.
func (*ShareHoldingChange) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{17}
}

func (x *ShareHoldingChange) GetHolderName() string {
	if x != nil && x.HolderName != nil {
		return *x.HolderName
	}
	return ""
}

func (x *ShareHoldingChange) GetHoldingQty() float64 {
	if x != nil && x.HoldingQty != nil {
		return *x.HoldingQty
	}
	return 0
}

func (x *ShareHoldingChange) GetHoldingRatio() float64 {
	if x != nil && x.HoldingRatio != nil {
		return *x.HoldingRatio
	}
	return 0
}

func (x *ShareHoldingChange) GetChangeQty() float64 {
	if x != nil && x.ChangeQty != nil {
		return *x.ChangeQty
	}
	return 0
}

func (x *ShareHoldingChange) GetChangeRatio() float64 {
	if x != nil && x.ChangeRatio != nil {
		return *x.ChangeRatio
	}
	return 0
}

func (x *ShareHoldingChange) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

func (x *ShareHoldingChange) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type SubInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubType       *int32                 `protobuf:"varint,1,req,name=subType" json:"subType,omitempty"`          //Qot_Common.SubType,订阅类型
	SecurityList  []*Security            `protobuf:"bytes,2,rep,name=securityList" json:"securityList,omitempty"` //订阅该类型行情的股票
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubInfo) Reset() {
	*x = SubInfo{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubInfo) ProtoMessage() {}

func (x *SubInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubInfo.ProtoReflect.Descriptor instead.
func (*SubInfo) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{18}
}

func (x *SubInfo) GetSubType() int32 {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return 0
}

func (x *SubInfo) GetSecurityList() []*Security {
	if x != nil {
		return x.SecurityList
	}
	return nil
}

type ConnSubInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubInfoList   []*SubInfo             `protobuf:"bytes,1,rep,name=subInfoList" json:"subInfoList,omitempty"`      //该连接订阅信息
	UsedQuota     *int32                 `protobuf:"varint,2,req,name=usedQuota" json:"usedQuota,omitempty"`         //该连接已经使用的订阅额度
	IsOwnConnData *bool                  `protobuf:"varint,3,req,name=isOwnConnData" json:"isOwnConnData,omitempty"` //用于区分是否是自己连接的数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnSubInfo) Reset() {
	*x = ConnSubInfo{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnSubInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnSubInfo) ProtoMessage() {}

func (x *ConnSubInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnSubInfo.ProtoReflect.Descriptor instead.
func (*ConnSubInfo) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{19}
}

func (x *ConnSubInfo) GetSubInfoList() []*SubInfo {
	if x != nil {
		return x.SubInfoList
	}
	return nil
}

func (x *ConnSubInfo) GetUsedQuota() int32 {
	if x != nil && x.UsedQuota != nil {
		return *x.UsedQuota
	}
	return 0
}

func (x *ConnSubInfo) GetIsOwnConnData() bool {
	if x != nil && x.IsOwnConnData != nil {
		return *x.IsOwnConnData
	}
	return false
}

type PlateInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Plate         *Security              `protobuf:"bytes,1,req,name=plate" json:"plate,omitempty"`          //板块
	Name          *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`            //板块名字
	PlateType     *int32                 `protobuf:"varint,3,opt,name=plateType" json:"plateType,omitempty"` //PlateSetType 板块类型, 仅3207（获取股票所属板块）协议返回该字段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlateInfo) Reset() {
	*x = PlateInfo{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlateInfo) ProtoMessage() {}

func (x *PlateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlateInfo.ProtoReflect.Descriptor instead.
func (*PlateInfo) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{20}
}

func (x *PlateInfo) GetPlate() *Security {
	if x != nil {
		return x.Plate
	}
	return nil
}

func (x *PlateInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PlateInfo) GetPlateType() int32 {
	if x != nil && x.PlateType != nil {
		return *x.PlateType
	}
	return 0
}

type Rehab struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Time           *string                `protobuf:"bytes,1,req,name=time" json:"time,omitempty"`                      //时间字符串
	CompanyActFlag *int64                 `protobuf:"varint,2,req,name=companyActFlag" json:"companyActFlag,omitempty"` //公司行动(CompanyAct)组合标志位,指定某些字段值是否有效
	FwdFactorA     *float64               `protobuf:"fixed64,3,req,name=fwdFactorA" json:"fwdFactorA,omitempty"`        //前复权因子A
	FwdFactorB     *float64               `protobuf:"fixed64,4,req,name=fwdFactorB" json:"fwdFactorB,omitempty"`        //前复权因子B
	BwdFactorA     *float64               `protobuf:"fixed64,5,req,name=bwdFactorA" json:"bwdFactorA,omitempty"`        //后复权因子A
	BwdFactorB     *float64               `protobuf:"fixed64,6,req,name=bwdFactorB" json:"bwdFactorB,omitempty"`        //后复权因子B
	SplitBase      *int32                 `protobuf:"varint,7,opt,name=splitBase" json:"splitBase,omitempty"`           //拆股(例如，1拆5，Base为1，Ert为5)
	SplitErt       *int32                 `protobuf:"varint,8,opt,name=splitErt" json:"splitErt,omitempty"`
	JoinBase       *int32                 `protobuf:"varint,9,opt,name=joinBase" json:"joinBase,omitempty"` //合股(例如，50合1，Base为50，Ert为1)
	JoinErt        *int32                 `protobuf:"varint,10,opt,name=joinErt" json:"joinErt,omitempty"`
	BonusBase      *int32                 `protobuf:"varint,11,opt,name=bonusBase" json:"bonusBase,omitempty"` //送股(例如，10送3, Base为10,Ert为3)
	BonusErt       *int32                 `protobuf:"varint,12,opt,name=bonusErt" json:"bonusErt,omitempty"`
	TransferBase   *int32                 `protobuf:"varint,13,opt,name=transferBase" json:"transferBase,omitempty"` //转赠股(例如，10转3, Base为10,Ert为3)
	TransferErt    *int32                 `protobuf:"varint,14,opt,name=transferErt" json:"transferErt,omitempty"`
	AllotBase      *int32                 `protobuf:"varint,15,opt,name=allotBase" json:"allotBase,omitempty"` //配股(例如，10送2, 配股价为6.3元, Base为10, Ert为2, Price为6.3)
	AllotErt       *int32                 `protobuf:"varint,16,opt,name=allotErt" json:"allotErt,omitempty"`
	AllotPrice     *float64               `protobuf:"fixed64,17,opt,name=allotPrice" json:"allotPrice,omitempty"`
	AddBase        *int32                 `protobuf:"varint,18,opt,name=addBase" json:"addBase,omitempty"` //增发股(例如，10送2, 增发股价为6.3元, Base为10, Ert为2, Price为6.3)
	AddErt         *int32                 `protobuf:"varint,19,opt,name=addErt" json:"addErt,omitempty"`
	AddPrice       *float64               `protobuf:"fixed64,20,opt,name=addPrice" json:"addPrice,omitempty"`
	Dividend       *float64               `protobuf:"fixed64,21,opt,name=dividend" json:"dividend,omitempty"`     //现金分红(例如，每10股派现0.5元,则该字段值为0.05)
	SpDividend     *float64               `protobuf:"fixed64,22,opt,name=spDividend" json:"spDividend,omitempty"` //特别股息(例如，每10股派特别股息0.5元,则该字段值为0.05)
	Timestamp      *float64               `protobuf:"fixed64,23,opt,name=timestamp" json:"timestamp,omitempty"`   //时间戳
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Rehab) Reset() {
	*x = Rehab{}
	mi := &file_qot_common_Qot_Common_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rehab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rehab) ProtoMessage() {}

func (x *Rehab) ProtoReflect() protoreflect.Message {
	mi := &file_qot_common_Qot_Common_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rehab.ProtoReflect.Descriptor instead.
func (*Rehab) Descriptor() ([]byte, []int) {
	return file_qot_common_Qot_Common_proto_rawDescGZIP(), []int{21}
}

func (x *Rehab) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

func (x *Rehab) GetCompanyActFlag() int64 {
	if x != nil && x.CompanyActFlag != nil {
		return *x.CompanyActFlag
	}
	return 0
}

func (x *Rehab) GetFwdFactorA() float64 {
	if x != nil && x.FwdFactorA != nil {
		return *x.FwdFactorA
	}
	return 0
}

func (x *Rehab) GetFwdFactorB() float64 {
	if x != nil && x.FwdFactorB != nil {
		return *x.FwdFactorB
	}
	return 0
}

func (x *Rehab) GetBwdFactorA() float64 {
	if x != nil && x.BwdFactorA != nil {
		return *x.BwdFactorA
	}
	return 0
}

func (x *Rehab) GetBwdFactorB() float64 {
	if x != nil && x.BwdFactorB != nil {
		return *x.BwdFactorB
	}
	return 0
}

func (x *Rehab) GetSplitBase() int32 {
	if x != nil && x.SplitBase != nil {
		return *x.SplitBase
	}
	return 0
}

func (x *Rehab) GetSplitErt() int32 {
	if x != nil && x.SplitErt != nil {
		return *x.SplitErt
	}
	return 0
}

func (x *Rehab) GetJoinBase() int32 {
	if x != nil && x.JoinBase != nil {
		return *x.JoinBase
	}
	return 0
}

func (x *Rehab) GetJoinErt() int32 {
	if x != nil && x.JoinErt != nil {
		return *x.JoinErt
	}
	return 0
}

func (x *Rehab) GetBonusBase() int32 {
	if x != nil && x.BonusBase != nil {
		return *x.BonusBase
	}
	return 0
}

func (x *Rehab) GetBonusErt() int32 {
	if x != nil && x.BonusErt != nil {
		return *x.BonusErt
	}
	return 0
}

func (x *Rehab) GetTransferBase() int32 {
	if x != nil && x.TransferBase != nil {
		return *x.TransferBase
	}
	return 0
}

func (x *Rehab) GetTransferErt() int32 {
	if x != nil && x.TransferErt != nil {
		return *x.TransferErt
	}
	return 0
}

func (x *Rehab) GetAllotBase() int32 {
	if x != nil && x.AllotBase != nil {
		return *x.AllotBase
	}
	return 0
}

func (x *Rehab) GetAllotErt() int32 {
	if x != nil && x.AllotErt != nil {
		return *x.AllotErt
	}
	return 0
}

func (x *Rehab) GetAllotPrice() float64 {
	if x != nil && x.AllotPrice != nil {
		return *x.AllotPrice
	}
	return 0
}

func (x *Rehab) GetAddBase() int32 {
	if x != nil && x.AddBase != nil {
		return *x.AddBase
	}
	return 0
}

func (x *Rehab) GetAddErt() int32 {
	if x != nil && x.AddErt != nil {
		return *x.AddErt
	}
	return 0
}

func (x *Rehab) GetAddPrice() float64 {
	if x != nil && x.AddPrice != nil {
		return *x.AddPrice
	}
	return 0
}

func (x *Rehab) GetDividend() float64 {
	if x != nil && x.Dividend != nil {
		return *x.Dividend
	}
	return 0
}

func (x *Rehab) GetSpDividend() float64 {
	if x != nil && x.SpDividend != nil {
		return *x.SpDividend
	}
	return 0
}

func (x *Rehab) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

var File_qot_common_Qot_Common_proto protoreflect.FileDescriptor

const file_qot_common_Qot_Common_proto_rawDesc = "" +
	"\n" +
	"\x1bqot/common/Qot_Common.proto\x12\n" +
	"Qot_Common\x1a\x13common/Common.proto\"6\n" +
	"\bSecurity\x12\x16\n" +
	"\x06market\x18\x01 \x02(\x05R\x06market\x12\x12\n" +
	"\x04code\x18\x02 \x02(\tR\x04code\"\xfb\x02\n" +
	"\x05KLine\x12\x12\n" +
	"\x04time\x18\x01 \x02(\tR\x04time\x12\x18\n" +
	"\aisBlank\x18\x02 \x02(\bR\aisBlank\x12\x1c\n" +
	"\thighPrice\x18\x03 \x01(\x01R\thighPrice\x12\x1c\n" +
	"\topenPrice\x18\x04 \x01(\x01R\topenPrice\x12\x1a\n" +
	"\blowPrice\x18\x05 \x01(\x01R\blowPrice\x12\x1e\n" +
	"\n" +
	"closePrice\x18\x06 \x01(\x01R\n" +
	"closePrice\x12&\n" +
	"\x0elastClosePrice\x18\a \x01(\x01R\x0elastClosePrice\x12\x16\n" +
	"\x06volume\x18\b \x01(\x03R\x06volume\x12\x1a\n" +
	"\bturnover\x18\t \x01(\x01R\bturnover\x12\"\n" +
	"\fturnoverRate\x18\n" +
	" \x01(\x01R\fturnoverRate\x12\x0e\n" +
	"\x02pe\x18\v \x01(\x01R\x02pe\x12\x1e\n" +
	"\n" +
	"changeRate\x18\f \x01(\x01R\n" +
	"changeRate\x12\x1c\n" +
	"\ttimestamp\x18\r \x01(\x01R\ttimestamp\"\x9e\x05\n" +
	"\x14OptionBasicQotExData\x12 \n" +
	"\vstrikePrice\x18\x01 \x02(\x01R\vstrikePrice\x12\"\n" +
	"\fcontractSize\x18\x02 \x02(\x05R\fcontractSize\x12,\n" +
	"\x11contractSizeFloat\x18\x11 \x01(\x01R\x11contractSizeFloat\x12\"\n" +
	"\fopenInterest\x18\x03 \x02(\x05R\fopenInterest\x12,\n" +
	"\x11impliedVolatility\x18\x04 \x02(\x01R\x11impliedVolatility\x12\x18\n" +
	"\apremium\x18\x05 \x02(\x01R\apremium\x12\x14\n" +
	"\x05delta\x18\x06 \x02(\x01R\x05delta\x12\x14\n" +
	"\x05gamma\x18\a \x02(\x01R\x05gamma\x12\x12\n" +
	"\x04vega\x18\b \x02(\x01R\x04vega\x12\x14\n" +
	"\x05theta\x18\t \x02(\x01R\x05theta\x12\x10\n" +
	"\x03rho\x18\n" +
	" \x02(\x01R\x03rho\x12(\n" +
	"\x0fnetOpenInterest\x18\v \x01(\x05R\x0fnetOpenInterest\x12.\n" +
	"\x12expiryDateDistance\x18\f \x01(\x05R\x12expiryDateDistance\x122\n" +
	"\x14contractNominalValue\x18\r \x01(\x01R\x14contractNominalValue\x12.\n" +
	"\x12ownerLotMultiplier\x18\x0e \x01(\x01R\x12ownerLotMultiplier\x12&\n" +
	"\x0eoptionAreaType\x18\x0f \x01(\x05R\x0eoptionAreaType\x12.\n" +
	"\x12contractMultiplier\x18\x10 \x01(\x01R\x12contractMultiplier\x12(\n" +
	"\x0findexOptionType\x18\x12 \x01(\x05R\x0findexOptionType\"\xf4\x01\n" +
	"\x12PreAfterMarketData\x12\x14\n" +
	"\x05price\x18\x01 \x01(\x01R\x05price\x12\x1c\n" +
	"\thighPrice\x18\x02 \x01(\x01R\thighPrice\x12\x1a\n" +
	"\blowPrice\x18\x03 \x01(\x01R\blowPrice\x12\x16\n" +
	"\x06volume\x18\x04 \x01(\x03R\x06volume\x12\x1a\n" +
	"\bturnover\x18\x05 \x01(\x01R\bturnover\x12\x1c\n" +
	"\tchangeVal\x18\x06 \x01(\x01R\tchangeVal\x12\x1e\n" +
	"\n" +
	"changeRate\x18\a \x01(\x01R\n" +
	"changeRate\x12\x1c\n" +
	"\tamplitude\x18\b \x01(\x01R\tamplitude\"\xb4\x01\n" +
	"\x14FutureBasicQotExData\x12(\n" +
	"\x0flastSettlePrice\x18\x01 \x02(\x01R\x0flastSettlePrice\x12\x1a\n" +
	"\bposition\x18\x02 \x02(\x05R\bposition\x12&\n" +
	"\x0epositionChange\x18\x03 \x02(\x05R\x0epositionChange\x12.\n" +
	"\x12expiryDateDistance\x18\x04 \x01(\x05R\x12expiryDateDistance\"u\n" +
	"\x15WarrantBasicQotExData\x12\x14\n" +
	"\x05delta\x18\x01 \x01(\x01R\x05delta\x12,\n" +
	"\x11impliedVolatility\x18\x02 \x01(\x01R\x11impliedVolatility\x12\x18\n" +
	"\apremium\x18\x03 \x02(\x01R\apremium\"\x83\b\n" +
	"\bBasicQot\x120\n" +
	"\bsecurity\x18\x01 \x02(\v2\x14.Qot_Common.SecurityR\bsecurity\x12\x12\n" +
	"\x04name\x18\x18 \x01(\tR\x04name\x12 \n" +
	"\visSuspended\x18\x02 \x02(\bR\visSuspended\x12\x1a\n" +
	"\blistTime\x18\x03 \x02(\tR\blistTime\x12 \n" +
	"\vpriceSpread\x18\x04 \x02(\x01R\vpriceSpread\x12\x1e\n" +
	"\n" +
	"updateTime\x18\x05 \x02(\tR\n" +
	"updateTime\x12\x1c\n" +
	"\thighPrice\x18\x06 \x02(\x01R\thighPrice\x12\x1c\n" +
	"\topenPrice\x18\a \x02(\x01R\topenPrice\x12\x1a\n" +
	"\blowPrice\x18\b \x02(\x01R\blowPrice\x12\x1a\n" +
	"\bcurPrice\x18\t \x02(\x01R\bcurPrice\x12&\n" +
	"\x0elastClosePrice\x18\n" +
	" \x02(\x01R\x0elastClosePrice\x12\x16\n" +
	"\x06volume\x18\v \x02(\x03R\x06volume\x12\x1a\n" +
	"\bturnover\x18\f \x02(\x01R\bturnover\x12\"\n" +
	"\fturnoverRate\x18\r \x02(\x01R\fturnoverRate\x12\x1c\n" +
	"\tamplitude\x18\x0e \x02(\x01R\tamplitude\x12\x1e\n" +
	"\n" +
	"darkStatus\x18\x0f \x01(\x05R\n" +
	"darkStatus\x12D\n" +
	"\foptionExData\x18\x10 \x01(\v2 .Qot_Common.OptionBasicQotExDataR\foptionExData\x12$\n" +
	"\rlistTimestamp\x18\x11 \x01(\x01R\rlistTimestamp\x12(\n" +
	"\x0fupdateTimestamp\x18\x12 \x01(\x01R\x0fupdateTimestamp\x12<\n" +
	"\tpreMarket\x18\x13 \x01(\v2\x1e.Qot_Common.PreAfterMarketDataR\tpreMarket\x12@\n" +
	"\vafterMarket\x18\x14 \x01(\v2\x1e.Qot_Common.PreAfterMarketDataR\vafterMarket\x12\x1c\n" +
	"\tsecStatus\x18\x15 \x01(\x05R\tsecStatus\x12D\n" +
	"\ffutureExData\x18\x16 \x01(\v2 .Qot_Common.FutureBasicQotExDataR\ffutureExData\x12G\n" +
	"\rwarrantExData\x18\x17 \x01(\v2!.Qot_Common.WarrantBasicQotExDataR\rwarrantExData\x12<\n" +
	"\tovernight\x18\x19 \x01(\v2\x1e.Qot_Common.PreAfterMarketDataR\tovernight\"\xfd\x01\n" +
	"\tTimeShare\x12\x12\n" +
	"\x04time\x18\x01 \x02(\tR\x04time\x12\x16\n" +
	"\x06minute\x18\x02 \x02(\x05R\x06minute\x12\x18\n" +
	"\aisBlank\x18\x03 \x02(\bR\aisBlank\x12\x14\n" +
	"\x05price\x18\x04 \x01(\x01R\x05price\x12&\n" +
	"\x0elastClosePrice\x18\x05 \x01(\x01R\x0elastClosePrice\x12\x1a\n" +
	"\bavgPrice\x18\x06 \x01(\x01R\bavgPrice\x12\x16\n" +
	"\x06volume\x18\a \x01(\x03R\x06volume\x12\x1a\n" +
	"\bturnover\x18\b \x01(\x01R\bturnover\x12\x1c\n" +
	"\ttimestamp\x18\t \x01(\x01R\ttimestamp\"\x9b\x02\n" +
	"\x13SecurityStaticBasic\x120\n" +
	"\bsecurity\x18\x01 \x02(\v2\x14.Qot_Common.SecurityR\bsecurity\x12\x0e\n" +
	"\x02id\x18\x02 \x02(\x03R\x02id\x12\x18\n" +
	"\alotSize\x18\x03 \x02(\x05R\alotSize\x12\x18\n" +
	"\asecType\x18\x04 \x02(\x05R\asecType\x12\x12\n" +
	"\x04name\x18\x05 \x02(\tR\x04name\x12\x1a\n" +
	"\blistTime\x18\x06 \x02(\tR\blistTime\x12\x1c\n" +
	"\tdelisting\x18\a \x01(\bR\tdelisting\x12$\n" +
	"\rlistTimestamp\x18\b \x01(\x01R\rlistTimestamp\x12\x1a\n" +
	"\bexchType\x18\t \x01(\x05R\bexchType\"U\n" +
	"\x13WarrantStaticExData\x12\x12\n" +
	"\x04type\x18\x01 \x02(\x05R\x04type\x12*\n" +
	"\x05owner\x18\x02 \x02(\v2\x14.Qot_Common.SecurityR\x05owner\"\xaa\x03\n" +
	"\x12OptionStaticExData\x12\x12\n" +
	"\x04type\x18\x01 \x02(\x05R\x04type\x12*\n" +
	"\x05owner\x18\x02 \x02(\v2\x14.Qot_Common.SecurityR\x05owner\x12\x1e\n" +
	"\n" +
	"strikeTime\x18\x03 \x02(\tR\n" +
	"strikeTime\x12 \n" +
	"\vstrikePrice\x18\x04 \x02(\x01R\vstrikePrice\x12\x18\n" +
	"\asuspend\x18\x05 \x02(\bR\asuspend\x12\x16\n" +
	"\x06market\x18\x06 \x02(\tR\x06market\x12(\n" +
	"\x0fstrikeTimestamp\x18\a \x01(\x01R\x0fstrikeTimestamp\x12(\n" +
	"\x0findexOptionType\x18\b \x01(\x05R\x0findexOptionType\x12(\n" +
	"\x0fexpirationCycle\x18\t \x01(\x05R\x0fexpirationCycle\x12.\n" +
	"\x12optionStandardType\x18\n" +
	" \x01(\x05R\x12optionStandardType\x122\n" +
	"\x14optionSettlementMode\x18\v \x01(\x05R\x14optionSettlementMode\"\x92\x01\n" +
	"\x12FutureStaticExData\x12$\n" +
	"\rlastTradeTime\x18\x01 \x02(\tR\rlastTradeTime\x12.\n" +
	"\x12lastTradeTimestamp\x18\x02 \x01(\x01R\x12lastTradeTimestamp\x12&\n" +
	"\x0eisMainContract\x18\x03 \x02(\bR\x0eisMainContract\"\x9a\x02\n" +
	"\x12SecurityStaticInfo\x125\n" +
	"\x05basic\x18\x01 \x02(\v2\x1f.Qot_Common.SecurityStaticBasicR\x05basic\x12E\n" +
	"\rwarrantExData\x18\x02 \x01(\v2\x1f.Qot_Common.WarrantStaticExDataR\rwarrantExData\x12B\n" +
	"\foptionExData\x18\x03 \x01(\v2\x1e.Qot_Common.OptionStaticExDataR\foptionExData\x12B\n" +
	"\ffutureExData\x18\x04 \x01(\v2\x1e.Qot_Common.FutureStaticExDataR\ffutureExData\"p\n" +
	"\x06Broker\x12\x0e\n" +
	"\x02id\x18\x01 \x02(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x02(\tR\x04name\x12\x10\n" +
	"\x03pos\x18\x03 \x02(\x05R\x03pos\x12\x18\n" +
	"\aorderID\x18\x04 \x01(\x03R\aorderID\x12\x16\n" +
	"\x06volume\x18\x05 \x01(\x03R\x06volume\"\xa2\x02\n" +
	"\x06Ticker\x12\x12\n" +
	"\x04time\x18\x01 \x02(\tR\x04time\x12\x1a\n" +
	"\bsequence\x18\x02 \x02(\x03R\bsequence\x12\x10\n" +
	"\x03dir\x18\x03 \x02(\x05R\x03dir\x12\x14\n" +
	"\x05price\x18\x04 \x02(\x01R\x05price\x12\x16\n" +
	"\x06volume\x18\x05 \x02(\x03R\x06volume\x12\x1a\n" +
	"\bturnover\x18\x06 \x02(\x01R\bturnover\x12\x1a\n" +
	"\brecvTime\x18\a \x01(\x01R\brecvTime\x12\x12\n" +
	"\x04type\x18\b \x01(\x05R\x04type\x12\x1a\n" +
	"\btypeSign\x18\t \x01(\x05R\btypeSign\x12\"\n" +
	"\fpushDataType\x18\n" +
	" \x01(\x05R\fpushDataType\x12\x1c\n" +
	"\ttimestamp\x18\v \x01(\x01R\ttimestamp\"C\n" +
	"\x0fOrderBookDetail\x12\x18\n" +
	"\aorderID\x18\x01 \x02(\x03R\aorderID\x12\x16\n" +
	"\x06volume\x18\x02 \x02(\x03R\x06volume\"\x98\x01\n" +
	"\tOrderBook\x12\x14\n" +
	"\x05price\x18\x01 \x02(\x01R\x05price\x12\x16\n" +
	"\x06volume\x18\x02 \x02(\x03R\x06volume\x12 \n" +
	"\vorederCount\x18\x03 \x02(\x05R\vorederCount\x12;\n" +
	"\n" +
	"detailList\x18\x04 \x03(\v2\x1b.Qot_Common.OrderBookDetailR\n" +
	"detailList\"\xea\x01\n" +
	"\x12ShareHoldingChange\x12\x1e\n" +
	"\n" +
	"holderName\x18\x01 \x02(\tR\n" +
	"holderName\x12\x1e\n" +
	"\n" +
	"holdingQty\x18\x02 \x02(\x01R\n" +
	"holdingQty\x12\"\n" +
	"\fholdingRatio\x18\x03 \x02(\x01R\fholdingRatio\x12\x1c\n" +
	"\tchangeQty\x18\x04 \x02(\x01R\tchangeQty\x12 \n" +
	"\vchangeRatio\x18\x05 \x02(\x01R\vchangeRatio\x12\x12\n" +
	"\x04time\x18\x06 \x02(\tR\x04time\x12\x1c\n" +
	"\ttimestamp\x18\a \x01(\x01R\ttimestamp\"]\n" +
	"\aSubInfo\x12\x18\n" +
	"\asubType\x18\x01 \x02(\x05R\asubType\x128\n" +
	"\fsecurityList\x18\x02 \x03(\v2\x14.Qot_Common.SecurityR\fsecurityList\"\x88\x01\n" +
	"\vConnSubInfo\x125\n" +
	"\vsubInfoList\x18\x01 \x03(\v2\x13.Qot_Common.SubInfoR\vsubInfoList\x12\x1c\n" +
	"\tusedQuota\x18\x02 \x02(\x05R\tusedQuota\x12$\n" +
	"\risOwnConnData\x18\x03 \x02(\bR\risOwnConnData\"i\n" +
	"\tPlateInfo\x12*\n" +
	"\x05plate\x18\x01 \x02(\v2\x14.Qot_Common.SecurityR\x05plate\x12\x12\n" +
	"\x04name\x18\x02 \x02(\tR\x04name\x12\x1c\n" +
	"\tplateType\x18\x03 \x01(\x05R\tplateType\"\xb5\x05\n" +
	"\x05Rehab\x12\x12\n" +
	"\x04time\x18\x01 \x02(\tR\x04time\x12&\n" +
	"\x0ecompanyActFlag\x18\x02 \x02(\x03R\x0ecompanyActFlag\x12\x1e\n" +
	"\n" +
	"fwdFactorA\x18\x03 \x02(\x01R\n" +
	"fwdFactorA\x12\x1e\n" +
	"\n" +
	"fwdFactorB\x18\x04 \x02(\x01R\n" +
	"fwdFactorB\x12\x1e\n" +
	"\n" +
	"bwdFactorA\x18\x05 \x02(\x01R\n" +
	"bwdFactorA\x12\x1e\n" +
	"\n" +
	"bwdFactorB\x18\x06 \x02(\x01R\n" +
	"bwdFactorB\x12\x1c\n" +
	"\tsplitBase\x18\a \x01(\x05R\tsplitBase\x12\x1a\n" +
	"\bsplitErt\x18\b \x01(\x05R\bsplitErt\x12\x1a\n" +
	"\bjoinBase\x18\t \x01(\x05R\bjoinBase\x12\x18\n" +
	"\ajoinErt\x18\n" +
	" \x01(\x05R\ajoinErt\x12\x1c\n" +
	"\tbonusBase\x18\v \x01(\x05R\tbonusBase\x12\x1a\n" +
	"\bbonusErt\x18\f \x01(\x05R\bbonusErt\x12\"\n" +
	"\ftransferBase\x18\r \x01(\x05R\ftransferBase\x12 \n" +
	"\vtransferErt\x18\x0e \x01(\x05R\vtransferErt\x12\x1c\n" +
	"\tallotBase\x18\x0f \x01(\x05R\tallotBase\x12\x1a\n" +
	"\ballotErt\x18\x10 \x01(\x05R\ballotErt\x12\x1e\n" +
	"\n" +
	"allotPrice\x18\x11 \x01(\x01R\n" +
	"allotPrice\x12\x18\n" +
	"\aaddBase\x18\x12 \x01(\x05R\aaddBase\x12\x16\n" +
	"\x06addErt\x18\x13 \x01(\x05R\x06addErt\x12\x1a\n" +
	"\baddPrice\x18\x14 \x01(\x01R\baddPrice\x12\x1a\n" +
	"\bdividend\x18\x15 \x01(\x01R\bdividend\x12\x1e\n" +
	"\n" +
	"spDividend\x18\x16 \x01(\x01R\n" +
	"spDividend\x12\x1c\n" +
	"\ttimestamp\x18\x17 \x01(\x01R\ttimestamp*\xcd\x02\n" +
	"\tQotMarket\x12\x15\n" +
	"\x11QotMarket_Unknown\x10\x00\x12\x19\n" +
	"\x15QotMarket_HK_Security\x10\x01\x12\x17\n" +
	"\x13QotMarket_HK_Future\x10\x02\x12\x19\n" +
	"\x15QotMarket_US_Security\x10\v\x12\x1b\n" +
	"\x17QotMarket_CNSH_Security\x10\x15\x12\x1b\n" +
	"\x17QotMarket_CNSZ_Security\x10\x16\x12\x19\n" +
	"\x15QotMarket_SG_Security\x10\x1f\x12\x19\n" +
	"\x15QotMarket_JP_Security\x10)\x12\x19\n" +
	"\x15QotMarket_AU_Security\x103\x12\x19\n" +
	"\x15QotMarket_MY_Security\x10=\x12\x19\n" +
	"\x15QotMarket_CA_Security\x10G\x12\x19\n" +
	"\x15QotMarket_FX_Security\x10Q*\x9a\x02\n" +
	"\fSecurityType\x12\x18\n" +
	"\x14SecurityType_Unknown\x10\x00\x12\x15\n" +
	"\x11SecurityType_Bond\x10\x01\x12\x15\n" +
	"\x11SecurityType_Bwrt\x10\x02\x12\x15\n" +
	"\x11SecurityType_Eqty\x10\x03\x12\x16\n" +
	"\x12SecurityType_Trust\x10\x04\x12\x18\n" +
	"\x14SecurityType_Warrant\x10\x05\x12\x16\n" +
	"\x12SecurityType_Index\x10\x06\x12\x16\n" +
	"\x12SecurityType_Plate\x10\a\x12\x15\n" +
	"\x11SecurityType_Drvt\x10\b\x12\x19\n" +
	"\x15SecurityType_PlateSet\x10\t\x12\x17\n" +
	"\x13SecurityType_Future\x10\n" +
	"*\x8a\x01\n" +
	"\fPlateSetType\x12\x14\n" +
	"\x10PlateSetType_All\x10\x00\x12\x19\n" +
	"\x15PlateSetType_Industry\x10\x01\x12\x17\n" +
	"\x13PlateSetType_Region\x10\x02\x12\x18\n" +
	"\x14PlateSetType_Concept\x10\x03\x12\x16\n" +
	"\x12PlateSetType_Other\x10\x04*\x95\x01\n" +
	"\vWarrantType\x12\x17\n" +
	"\x13WarrantType_Unknown\x10\x00\x12\x13\n" +
	"\x0fWarrantType_Buy\x10\x01\x12\x14\n" +
	"\x10WarrantType_Sell\x10\x02\x12\x14\n" +
	"\x10WarrantType_Bull\x10\x03\x12\x14\n" +
	"\x10WarrantType_Bear\x10\x04\x12\x16\n" +
	"\x12WarrantType_InLine\x10\x05*M\n" +
	"\n" +
	"OptionType\x12\x16\n" +
	"\x12OptionType_Unknown\x10\x00\x12\x13\n" +
	"\x0fOptionType_Call\x10\x01\x12\x12\n" +
	"\x0eOptionType_Put\x10\x02*e\n" +
	"\x0fIndexOptionType\x12\x1b\n" +
	"\x17IndexOptionType_Unknown\x10\x00\x12\x1a\n" +
	"\x16IndexOptionType_Normal\x10\x01\x12\x19\n" +
	"\x15IndexOptionType_Small\x10\x02*\x82\x01\n" +
	"\x0eOptionAreaType\x12\x1a\n" +
	"\x16OptionAreaType_Unknown\x10\x00\x12\x1b\n" +
	"\x17OptionAreaType_American\x10\x01\x12\x1b\n" +
	"\x17OptionAreaType_European\x10\x02\x12\x1a\n" +
	"\x16OptionAreaType_Bermuda\x10\x03*\xd3\t\n" +
	"\x0eQotMarketState\x12\x17\n" +
	"\x13QotMarketState_None\x10\x00\x12\x1a\n" +
	"\x16QotMarketState_Auction\x10\x01\x12\x1e\n" +
	"\x1aQotMarketState_WaitingOpen\x10\x02\x12\x1a\n" +
	"\x16QotMarketState_Morning\x10\x03\x12\x17\n" +
	"\x13QotMarketState_Rest\x10\x04\x12\x1c\n" +
	"\x18QotMarketState_Afternoon\x10\x05\x12\x19\n" +
	"\x15QotMarketState_Closed\x10\x06\x12!\n" +
	"\x1dQotMarketState_PreMarketBegin\x10\b\x12\x1f\n" +
	"\x1bQotMarketState_PreMarketEnd\x10\t\x12\"\n" +
	"\x1eQotMarketState_AfterHoursBegin\x10\n" +
	"\x12 \n" +
	"\x1cQotMarketState_AfterHoursEnd\x10\v\x12#\n" +
	"\x1fQotMarketState_FUTU_SWITCH_DATE\x10\f\x12\x1c\n" +
	"\x18QotMarketState_NightOpen\x10\r\x12\x1b\n" +
	"\x17QotMarketState_NightEnd\x10\x0e\x12 \n" +
	"\x1cQotMarketState_FutureDayOpen\x10\x0f\x12!\n" +
	"\x1dQotMarketState_FutureDayBreak\x10\x10\x12!\n" +
	"\x1dQotMarketState_FutureDayClose\x10\x11\x12'\n" +
	"#QotMarketState_FutureDayWaitForOpen\x10\x12\x12\x18\n" +
	"\x14QotMarketState_HkCas\x10\x13\x12\"\n" +
	"\x1eQotMarketState_FutureNightWait\x10\x14\x12\"\n" +
	"\x1eQotMarketState_FutureAfternoon\x10\x15\x12#\n" +
	"\x1fQotMarketState_FutureSwitchDate\x10\x16\x12\x1d\n" +
	"\x19QotMarketState_FutureOpen\x10\x17\x12\x1e\n" +
	"\x1aQotMarketState_FutureBreak\x10\x18\x12\"\n" +
	"\x1eQotMarketState_FutureBreakOver\x10\x19\x12\x1e\n" +
	"\x1aQotMarketState_FutureClose\x10\x1a\x12%\n" +
	"!QotMarketState_StibAfterHoursWait\x10\x1b\x12&\n" +
	"\"QotMarketState_StibAfterHoursBegin\x10\x1c\x12$\n" +
	" QotMarketState_StibAfterHoursEnd\x10\x1d\x12 \n" +
	"\x1cQotMarketState_CLOSE_AUCTION\x10\x1e\x12 \n" +
	"\x1cQotMarketState_AFTERNOON_END\x10\x1f\x12\x18\n" +
	"\x14QotMarketState_NIGHT\x10 \x12\"\n" +
	"\x1eQotMarketState_OVERNIGHT_BEGIN\x10!\x12 \n" +
	"\x1cQotMarketState_OVERNIGHT_END\x10\"\x12 \n" +
	"\x1cQotMarketState_TRADE_AT_LAST\x10#\x12 \n" +
	"\x1cQotMarketState_TRADE_AUCTION\x10$\x12\x1c\n" +
	"\x18QotMarketState_OVERNIGHT\x10%*\xe4\x01\n" +
	"\x0fTradeDateMarket\x12\x1b\n" +
	"\x17TradeDateMarket_Unknown\x10\x00\x12\x16\n" +
	"\x12TradeDateMarket_HK\x10\x01\x12\x16\n" +
	"\x12TradeDateMarket_US\x10\x02\x12\x16\n" +
	"\x12TradeDateMarket_CN\x10\x03\x12\x16\n" +
	"\x12TradeDateMarket_NT\x10\x04\x12\x16\n" +
	"\x12TradeDateMarket_ST\x10\x05\x12\x1d\n" +
	"\x19TradeDateMarket_JP_Future\x10\x06\x12\x1d\n" +
	"\x19TradeDateMarket_SG_Future\x10\a*`\n" +
	"\rTradeDateType\x12\x17\n" +
	"\x13TradeDateType_Whole\x10\x00\x12\x19\n" +
	"\x15TradeDateType_Morning\x10\x01\x12\x1b\n" +
	"\x17TradeDateType_Afternoon\x10\x02*N\n" +
	"\tRehabType\x12\x12\n" +
	"\x0eRehabType_None\x10\x00\x12\x15\n" +
	"\x11RehabType_Forward\x10\x01\x12\x16\n" +
	"\x12RehabType_Backward\x10\x02*\xdd\x01\n" +
	"\x06KLType\x12\x12\n" +
	"\x0eKLType_Unknown\x10\x00\x12\x0f\n" +
	"\vKLType_1Min\x10\x01\x12\x0e\n" +
	"\n" +
	"KLType_Day\x10\x02\x12\x0f\n" +
	"\vKLType_Week\x10\x03\x12\x10\n" +
	"\fKLType_Month\x10\x04\x12\x0f\n" +
	"\vKLType_Year\x10\x05\x12\x0f\n" +
	"\vKLType_5Min\x10\x06\x12\x10\n" +
	"\fKLType_15Min\x10\a\x12\x10\n" +
	"\fKLType_30Min\x10\b\x12\x10\n" +
	"\fKLType_60Min\x10\t\x12\x0f\n" +
	"\vKLType_3Min\x10\n" +
	"\x12\x12\n" +
	"\x0eKLType_Quarter\x10\v*\xf5\x01\n" +
	"\bKLFields\x12\x11\n" +
	"\rKLFields_None\x10\x00\x12\x11\n" +
	"\rKLFields_High\x10\x01\x12\x11\n" +
	"\rKLFields_Open\x10\x02\x12\x10\n" +
	"\fKLFields_Low\x10\x04\x12\x12\n" +
	"\x0eKLFields_Close\x10\b\x12\x16\n" +
	"\x12KLFields_LastClose\x10\x10\x12\x13\n" +
	"\x0fKLFields_Volume\x10 \x12\x15\n" +
	"\x11KLFields_Turnover\x10@\x12\x1a\n" +
	"\x15KLFields_TurnoverRate\x10\x80\x01\x12\x10\n" +
	"\vKLFields_PE\x10\x80\x02\x12\x18\n" +
	"\x13KLFields_ChangeRate\x10\x80\x04*\xea\x02\n" +
	"\aSubType\x12\x10\n" +
	"\fSubType_None\x10\x00\x12\x11\n" +
	"\rSubType_Basic\x10\x01\x12\x15\n" +
	"\x11SubType_OrderBook\x10\x02\x12\x12\n" +
	"\x0eSubType_Ticker\x10\x04\x12\x0e\n" +
	"\n" +
	"SubType_RT\x10\x05\x12\x12\n" +
	"\x0eSubType_KL_Day\x10\x06\x12\x13\n" +
	"\x0fSubType_KL_5Min\x10\a\x12\x14\n" +
	"\x10SubType_KL_15Min\x10\b\x12\x14\n" +
	"\x10SubType_KL_30Min\x10\t\x12\x14\n" +
	"\x10SubType_KL_60Min\x10\n" +
	"\x12\x13\n" +
	"\x0fSubType_KL_1Min\x10\v\x12\x13\n" +
	"\x0fSubType_KL_Week\x10\f\x12\x14\n" +
	"\x10SubType_KL_Month\x10\r\x12\x12\n" +
	"\x0eSubType_Broker\x10\x0e\x12\x16\n" +
	"\x12SubType_KL_Qurater\x10\x0f\x12\x13\n" +
	"\x0fSubType_KL_Year\x10\x10\x12\x13\n" +
	"\x0fSubType_KL_3Min\x10\x11*}\n" +
	"\x0fTickerDirection\x12\x1b\n" +
	"\x17TickerDirection_Unknown\x10\x00\x12\x17\n" +
	"\x13TickerDirection_Bid\x10\x01\x12\x17\n" +
	"\x13TickerDirection_Ask\x10\x02\x12\x1b\n" +
	"\x17TickerDirection_Neutral\x10\x03*\x9c\a\n" +
	"\n" +
	"TickerType\x12\x16\n" +
	"\x12TickerType_Unknown\x10\x00\x12\x18\n" +
	"\x14TickerType_Automatch\x10\x01\x12\x13\n" +
	"\x0fTickerType_Late\x10\x02\x12\x1c\n" +
	"\x18TickerType_NoneAutomatch\x10\x03\x12\x1d\n" +
	"\x19TickerType_InterAutomatch\x10\x04\x12!\n" +
	"\x1dTickerType_InterNoneAutomatch\x10\x05\x12\x15\n" +
	"\x11TickerType_OddLot\x10\x06\x12\x16\n" +
	"\x12TickerType_Auction\x10\a\x12\x13\n" +
	"\x0fTickerType_Bulk\x10\b\x12\x14\n" +
	"\x10TickerType_Crash\x10\t\x12\x1a\n" +
	"\x16TickerType_CrossMarket\x10\n" +
	"\x12\x17\n" +
	"\x13TickerType_BulkSold\x10\v\x12\x1a\n" +
	"\x16TickerType_FreeOnBoard\x10\f\x12\x1b\n" +
	"\x17TickerType_Rule127Or155\x10\r\x12\x14\n" +
	"\x10TickerType_Delay\x10\x0e\x12%\n" +
	"!TickerType_MarketCenterClosePrice\x10\x0f\x12\x16\n" +
	"\x12TickerType_NextDay\x10\x10\x12\"\n" +
	"\x1eTickerType_MarketCenterOpening\x10\x11\x12\"\n" +
	"\x1eTickerType_PriorReferencePrice\x10\x12\x12$\n" +
	" TickerType_MarketCenterOpenPrice\x10\x13\x12\x15\n" +
	"\x11TickerType_Seller\x10\x14\x12\x10\n" +
	"\fTickerType_T\x10\x15\x12#\n" +
	"\x1fTickerType_ExtendedTradingHours\x10\x16\x12\x19\n" +
	"\x15TickerType_Contingent\x10\x17\x12\x17\n" +
	"\x13TickerType_AvgPrice\x10\x18\x12\x16\n" +
	"\x12TickerType_OTCSold\x10\x19\x12 \n" +
	"\x1cTickerType_OddLotCrossMarket\x10\x1a\x12!\n" +
	"\x1dTickerType_DerivativelyPriced\x10\x1b\x12\x1e\n" +
	"\x1aTickerType_ReOpeningPriced\x10\x1c\x12\x1c\n" +
	"\x18TickerType_ClosingPriced\x10\x1d\x12&\n" +
	"\"TickerType_ComprehensiveDelayPrice\x10\x1e\x12\x17\n" +
	"\x13TickerType_Overseas\x10\x1f*M\n" +
	"\n" +
	"DarkStatus\x12\x13\n" +
	"\x0fDarkStatus_None\x10\x00\x12\x16\n" +
	"\x12DarkStatus_Trading\x10\x01\x12\x12\n" +
	"\x0eDarkStatus_End\x10\x02*\x94\x06\n" +
	"\x0eSecurityStatus\x12\x1a\n" +
	"\x16SecurityStatus_Unknown\x10\x00\x12\x19\n" +
	"\x15SecurityStatus_Normal\x10\x01\x12\x1a\n" +
	"\x16SecurityStatus_Listing\x10\x02\x12\x1d\n" +
	"\x19SecurityStatus_Purchasing\x10\x03\x12\x1e\n" +
	"\x1aSecurityStatus_Subscribing\x10\x04\x12)\n" +
	"%SecurityStatus_BeforeDrakTradeOpening\x10\x05\x12\x1e\n" +
	"\x1aSecurityStatus_DrakTrading\x10\x06\x12\x1f\n" +
	"\x1bSecurityStatus_DrakTradeEnd\x10\a\x12\x1b\n" +
	"\x17SecurityStatus_ToBeOpen\x10\b\x12\x1c\n" +
	"\x18SecurityStatus_Suspended\x10\t\x12\x19\n" +
	"\x15SecurityStatus_Called\x10\n" +
	"\x12)\n" +
	"%SecurityStatus_ExpiredLastTradingDate\x10\v\x12\x1a\n" +
	"\x16SecurityStatus_Expired\x10\f\x12\x1b\n" +
	"\x17SecurityStatus_Delisted\x10\r\x12(\n" +
	"$SecurityStatus_ChangeToTemporaryCode\x10\x0e\x12(\n" +
	"$SecurityStatus_TemporaryCodeTradeEnd\x10\x0f\x12'\n" +
	"#SecurityStatus_ChangedPlateTradeEnd\x10\x10\x12&\n" +
	"\"SecurityStatus_ChangedCodeTradeEnd\x10\x11\x12,\n" +
	"(SecurityStatus_RecoverableCircuitBreaker\x10\x12\x12.\n" +
	"*SecurityStatus_UnRecoverableCircuitBreaker\x10\x13\x12#\n" +
	"\x1fSecurityStatus_AfterCombination\x10\x14\x12\"\n" +
	"\x1eSecurityStatus_AfterTransation\x10\x15*\x81\x01\n" +
	"\x0eHolderCategory\x12\x19\n" +
	"\x15HolderCategory_Unknow\x10\x00\x12\x19\n" +
	"\x15HolderCategory_Agency\x10\x01\x12\x17\n" +
	"\x13HolderCategory_Fund\x10\x02\x12 \n" +
	"\x1cHolderCategory_SeniorManager\x10\x03*v\n" +
	"\fPushDataType\x12\x17\n" +
	"\x13PushDataType_Unknow\x10\x00\x12\x19\n" +
	"\x15PushDataType_Realtime\x10\x01\x12\x1a\n" +
	"\x16PushDataType_ByDisConn\x10\x02\x12\x16\n" +
	"\x12PushDataType_Cache\x10\x03*\xd3\n" +
	"\n" +
	"\tSortField\x12\x14\n" +
	"\x10SortField_Unknow\x10\x00\x12\x12\n" +
	"\x0eSortField_Code\x10\x01\x12\x16\n" +
	"\x12SortField_CurPrice\x10\x02\x12\x1c\n" +
	"\x18SortField_PriceChangeVal\x10\x03\x12\x18\n" +
	"\x14SortField_ChangeRate\x10\x04\x12\x14\n" +
	"\x10SortField_Status\x10\x05\x12\x16\n" +
	"\x12SortField_BidPrice\x10\x06\x12\x16\n" +
	"\x12SortField_AskPrice\x10\a\x12\x14\n" +
	"\x10SortField_BidVol\x10\b\x12\x14\n" +
	"\x10SortField_AskVol\x10\t\x12\x14\n" +
	"\x10SortField_Volume\x10\n" +
	"\x12\x16\n" +
	"\x12SortField_Turnover\x10\v\x12\x17\n" +
	"\x13SortField_Amplitude\x10\x1e\x12\x13\n" +
	"\x0fSortField_Score\x10\f\x12\x15\n" +
	"\x11SortField_Premium\x10\r\x12\x1f\n" +
	"\x1bSortField_EffectiveLeverage\x10\x0e\x12\x13\n" +
	"\x0fSortField_Delta\x10\x0f\x12\x1f\n" +
	"\x1bSortField_ImpliedVolatility\x10\x10\x12\x12\n" +
	"\x0eSortField_Type\x10\x11\x12\x19\n" +
	"\x15SortField_StrikePrice\x10\x12\x12\x1c\n" +
	"\x18SortField_BreakEvenPoint\x10\x13\x12\x1a\n" +
	"\x16SortField_MaturityTime\x10\x14\x12\x16\n" +
	"\x12SortField_ListTime\x10\x15\x12\x1b\n" +
	"\x17SortField_LastTradeTime\x10\x16\x12\x16\n" +
	"\x12SortField_Leverage\x10\x17\x12\x18\n" +
	"\x14SortField_InOutMoney\x10\x18\x12\x1b\n" +
	"\x17SortField_RecoveryPrice\x10\x19\x12\x19\n" +
	"\x15SortField_ChangePrice\x10\x1a\x12\x14\n" +
	"\x10SortField_Change\x10\x1b\x12\x18\n" +
	"\x14SortField_StreetRate\x10\x1c\x12\x17\n" +
	"\x13SortField_StreetVol\x10\x1d\x12\x19\n" +
	"\x15SortField_WarrantName\x10\x1f\x12\x14\n" +
	"\x10SortField_Issuer\x10 \x12\x15\n" +
	"\x11SortField_LotSize\x10!\x12\x17\n" +
	"\x13SortField_IssueSize\x10\"\x12\x1e\n" +
	"\x1aSortField_UpperStrikePrice\x10-\x12\x1e\n" +
	"\x1aSortField_LowerStrikePrice\x10.\x12\x1f\n" +
	"\x1bSortField_InLinePriceStatus\x10/\x12\x19\n" +
	"\x15SortField_PreCurPrice\x10#\x12\x1b\n" +
	"\x17SortField_AfterCurPrice\x10$\x12\x1f\n" +
	"\x1bSortField_PrePriceChangeVal\x10%\x12!\n" +
	"\x1dSortField_AfterPriceChangeVal\x10&\x12\x1b\n" +
	"\x17SortField_PreChangeRate\x10'\x12\x1d\n" +
	"\x19SortField_AfterChangeRate\x10(\x12\x1a\n" +
	"\x16SortField_PreAmplitude\x10)\x12\x1c\n" +
	"\x18SortField_AfterAmplitude\x10*\x12\x19\n" +
	"\x15SortField_PreTurnover\x10+\x12\x1b\n" +
	"\x17SortField_AfterTurnover\x10,\x12\x1d\n" +
	"\x19SortField_LastSettlePrice\x100\x12\x16\n" +
	"\x12SortField_Position\x101\x12\x1c\n" +
	"\x18SortField_PositionChange\x102*\xbf\x03\n" +
	"\x06Issuer\x12\x11\n" +
	"\rIssuer_Unknow\x10\x00\x12\r\n" +
	"\tIssuer_SG\x10\x01\x12\r\n" +
	"\tIssuer_BP\x10\x02\x12\r\n" +
	"\tIssuer_CS\x10\x03\x12\r\n" +
	"\tIssuer_CT\x10\x04\x12\r\n" +
	"\tIssuer_EA\x10\x05\x12\r\n" +
	"\tIssuer_GS\x10\x06\x12\r\n" +
	"\tIssuer_HS\x10\a\x12\r\n" +
	"\tIssuer_JP\x10\b\x12\r\n" +
	"\tIssuer_MB\x10\t\x12\r\n" +
	"\tIssuer_SC\x10\n" +
	"\x12\r\n" +
	"\tIssuer_UB\x10\v\x12\r\n" +
	"\tIssuer_BI\x10\f\x12\r\n" +
	"\tIssuer_DB\x10\r\x12\r\n" +
	"\tIssuer_DC\x10\x0e\x12\r\n" +
	"\tIssuer_ML\x10\x0f\x12\r\n" +
	"\tIssuer_NM\x10\x10\x12\r\n" +
	"\tIssuer_RB\x10\x11\x12\r\n" +
	"\tIssuer_RS\x10\x12\x12\r\n" +
	"\tIssuer_BC\x10\x13\x12\r\n" +
	"\tIssuer_HT\x10\x14\x12\r\n" +
	"\tIssuer_VT\x10\x15\x12\r\n" +
	"\tIssuer_KC\x10\x16\x12\r\n" +
	"\tIssuer_MS\x10\x17\x12\r\n" +
	"\tIssuer_GJ\x10\x18\x12\r\n" +
	"\tIssuer_XZ\x10\x19\x12\r\n" +
	"\tIssuer_HU\x10\x1a\x12\r\n" +
	"\tIssuer_KS\x10\x1b\x12\r\n" +
	"\tIssuer_CI\x10\x1c*\x97\x01\n" +
	"\tIpoPeriod\x12\x14\n" +
	"\x10IpoPeriod_Unknow\x10\x00\x12\x13\n" +
	"\x0fIpoPeriod_Today\x10\x01\x12\x16\n" +
	"\x12IpoPeriod_Tomorrow\x10\x02\x12\x16\n" +
	"\x12IpoPeriod_Nextweek\x10\x03\x12\x16\n" +
	"\x12IpoPeriod_Lastweek\x10\x04\x12\x17\n" +
	"\x13IpoPeriod_Lastmonth\x10\x05*N\n" +
	"\tPriceType\x12\x14\n" +
	"\x10PriceType_Unknow\x10\x00\x12\x15\n" +
	"\x11PriceType_Outside\x10\x01\x12\x14\n" +
	"\x10PriceType_WithIn\x10\x02*\x9d\x01\n" +
	"\rWarrantStatus\x12\x18\n" +
	"\x14WarrantStatus_Unknow\x10\x00\x12\x18\n" +
	"\x14WarrantStatus_Normal\x10\x01\x12\x19\n" +
	"\x15WarrantStatus_Suspend\x10\x02\x12\x1b\n" +
	"\x17WarrantStatus_StopTrade\x10\x03\x12 \n" +
	"\x1cWarrantStatus_PendingListing\x10\x04*\xda\x01\n" +
	"\n" +
	"CompanyAct\x12\x13\n" +
	"\x0fCompanyAct_None\x10\x00\x12\x14\n" +
	"\x10CompanyAct_Split\x10\x01\x12\x13\n" +
	"\x0fCompanyAct_Join\x10\x02\x12\x14\n" +
	"\x10CompanyAct_Bonus\x10\x04\x12\x17\n" +
	"\x13CompanyAct_Transfer\x10\b\x12\x14\n" +
	"\x10CompanyAct_Allot\x10\x10\x12\x12\n" +
	"\x0eCompanyAct_Add\x10 \x12\x17\n" +
	"\x13CompanyAct_Dividend\x10@\x12\x1a\n" +
	"\x15CompanyAct_SPDividend\x10\x80\x01*}\n" +
	"\bQotRight\x12\x13\n" +
	"\x0fQotRight_Unknow\x10\x00\x12\x10\n" +
	"\fQotRight_Bmp\x10\x01\x12\x13\n" +
	"\x0fQotRight_Level1\x10\x02\x12\x13\n" +
	"\x0fQotRight_Level2\x10\x03\x12\x0f\n" +
	"\vQotRight_SF\x10\x04\x12\x0f\n" +
	"\vQotRight_No\x10\x05*\xce\x04\n" +
	"\x11PriceReminderType\x12\x1d\n" +
	"\x19PriceReminderType_Unknown\x10\x00\x12\x1d\n" +
	"\x19PriceReminderType_PriceUp\x10\x01\x12\x1f\n" +
	"\x1bPriceReminderType_PriceDown\x10\x02\x12\"\n" +
	"\x1ePriceReminderType_ChangeRateUp\x10\x03\x12$\n" +
	" PriceReminderType_ChangeRateDown\x10\x04\x12&\n" +
	"\"PriceReminderType_5MinChangeRateUp\x10\x05\x12(\n" +
	"$PriceReminderType_5MinChangeRateDown\x10\x06\x12\x1e\n" +
	"\x1aPriceReminderType_VolumeUp\x10\a\x12 \n" +
	"\x1cPriceReminderType_TurnoverUp\x10\b\x12$\n" +
	" PriceReminderType_TurnoverRateUp\x10\t\x12 \n" +
	"\x1cPriceReminderType_BidPriceUp\x10\n" +
	"\x12\"\n" +
	"\x1ePriceReminderType_AskPriceDown\x10\v\x12\x1e\n" +
	"\x1aPriceReminderType_BidVolUp\x10\f\x12\x1e\n" +
	"\x1aPriceReminderType_AskVolUp\x10\r\x12&\n" +
	"\"PriceReminderType_3MinChangeRateUp\x10\x0e\x12(\n" +
	"$PriceReminderType_3MinChangeRateDown\x10\x0f*\x90\x01\n" +
	"\x11PriceReminderFreq\x12\x1d\n" +
	"\x19PriceReminderFreq_Unknown\x10\x00\x12\x1c\n" +
	"\x18PriceReminderFreq_Always\x10\x01\x12\x1e\n" +
	"\x1aPriceReminderFreq_OnceADay\x10\x02\x12\x1e\n" +
	"\x1aPriceReminderFreq_OnlyOnce\x10\x03*\xb3\x01\n" +
	"\n" +
	"AssetClass\x12\x15\n" +
	"\x11AssetClass_Unknow\x10\x00\x12\x14\n" +
	"\x10AssetClass_Stock\x10\x01\x12\x13\n" +
	"\x0fAssetClass_Bond\x10\x02\x12\x18\n" +
	"\x14AssetClass_Commodity\x10\x03\x12\x1d\n" +
	"\x19AssetClass_CurrencyMarket\x10\x04\x12\x15\n" +
	"\x11AssetClass_Future\x10\x05\x12\x13\n" +
	"\x0fAssetClass_Swap\x10\x06*\xaf\x02\n" +
	"\x0fExpirationCycle\x12\x1b\n" +
	"\x17ExpirationCycle_Unknown\x10\x00\x12\x18\n" +
	"\x14ExpirationCycle_Week\x10\x01\x12\x19\n" +
	"\x15ExpirationCycle_Month\x10\x02\x12\x1c\n" +
	"\x18ExpirationCycle_MonthEnd\x10\x03\x12\x1b\n" +
	"\x17ExpirationCycle_Quarter\x10\x04\x12\x1b\n" +
	"\x17ExpirationCycle_WeekMon\x10\v\x12\x1b\n" +
	"\x17ExpirationCycle_WeekTue\x10\f\x12\x1b\n" +
	"\x17ExpirationCycle_WeekWed\x10\r\x12\x1b\n" +
	"\x17ExpirationCycle_WeekThu\x10\x0e\x12\x1b\n" +
	"\x17ExpirationCycle_WeekFri\x10\x0f*y\n" +
	"\x12OptionStandardType\x12\x1e\n" +
	"\x1aOptionStandardType_Unknown\x10\x00\x12\x1f\n" +
	"\x1bOptionStandardType_Standard\x10\x01\x12\"\n" +
	"\x1eOptionStandardType_NonStandard\x10\x02*r\n" +
	"\x14OptionSettlementMode\x12 \n" +
	"\x1cOptionSettlementMode_Unknown\x10\x00\x12\x1b\n" +
	"\x17OptionSettlementMode_AM\x10\x01\x12\x1b\n" +
	"\x17OptionSettlementMode_PM\x10\x02*\xb4\x03\n" +
	"\bExchType\x12\x14\n" +
	"\x10ExchType_Unknown\x10\x00\x12\x19\n" +
	"\x15ExchType_HK_MainBoard\x10\x01\x12\x18\n" +
	"\x14ExchType_HK_GEMBoard\x10\x02\x12\x14\n" +
	"\x10ExchType_HK_HKEX\x10\x03\x12\x14\n" +
	"\x10ExchType_US_NYSE\x10\x04\x12\x16\n" +
	"\x12ExchType_US_Nasdaq\x10\x05\x12\x14\n" +
	"\x10ExchType_US_Pink\x10\x06\x12\x14\n" +
	"\x10ExchType_US_AMEX\x10\a\x12\x16\n" +
	"\x12ExchType_US_Option\x10\b\x12\x15\n" +
	"\x11ExchType_US_NYMEX\x10\t\x12\x15\n" +
	"\x11ExchType_US_COMEX\x10\n" +
	"\x12\x14\n" +
	"\x10ExchType_US_CBOT\x10\v\x12\x13\n" +
	"\x0fExchType_US_CME\x10\f\x12\x14\n" +
	"\x10ExchType_US_CBOE\x10\r\x12\x12\n" +
	"\x0eExchType_CN_SH\x10\x0e\x12\x12\n" +
	"\x0eExchType_CN_SZ\x10\x0f\x12\x14\n" +
	"\x10ExchType_CN_STIB\x10\x10\x12\x13\n" +
	"\x0fExchType_SG_SGX\x10\x11\x12\x13\n" +
	"\x0fExchType_JP_OSE\x10\x12*|\n" +
	"\n" +
	"PeriodType\x12\x16\n" +
	"\x12PeriodType_Unknown\x10\x00\x12\x17\n" +
	"\x13PeriodType_INTRADAY\x10\x01\x12\x12\n" +
	"\x0ePeriodType_DAY\x10\x02\x12\x13\n" +
	"\x0fPeriodType_WEEK\x10\x03\x12\x14\n" +
	"\x10PeriodType_MONTH\x10\x04*\xdc\x01\n" +
	"\x19PriceReminderMarketStatus\x12$\n" +
	" PriceReminderMarketStatus_Unknow\x10\x00\x12\"\n" +
	"\x1ePriceReminderMarketStatus_Open\x10\x01\x12#\n" +
	"\x1fPriceReminderMarketStatus_USPre\x10\x02\x12%\n" +
	"!PriceReminderMarketStatus_USAfter\x10\x03\x12)\n" +
	"%PriceReminderMarketStatus_USOverNight\x10\x04BA\n" +
	"\x13com.futu.openapi.pbZ*github.com/qtopie/gofutuapi/gen/qot/common"

var (
	file_qot_common_Qot_Common_proto_rawDescOnce sync.Once
	file_qot_common_Qot_Common_proto_rawDescData []byte
)

func file_qot_common_Qot_Common_proto_rawDescGZIP() []byte {
	file_qot_common_Qot_Common_proto_rawDescOnce.Do(func() {
		file_qot_common_Qot_Common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qot_common_Qot_Common_proto_rawDesc), len(file_qot_common_Qot_Common_proto_rawDesc)))
	})
	return file_qot_common_Qot_Common_proto_rawDescData
}

var file_qot_common_Qot_Common_proto_enumTypes = make([]protoimpl.EnumInfo, 36)
var file_qot_common_Qot_Common_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_qot_common_Qot_Common_proto_goTypes = []any{
	(QotMarket)(0),                 // 0: Qot_Common.QotMarket
	(SecurityType)(0),              // 1: Qot_Common.SecurityType
	(PlateSetType)(0),              // 2: Qot_Common.PlateSetType
	(WarrantType)(0),               // 3: Qot_Common.WarrantType
	(OptionType)(0),                // 4: Qot_Common.OptionType
	(IndexOptionType)(0),           // 5: Qot_Common.IndexOptionType
	(OptionAreaType)(0),            // 6: Qot_Common.OptionAreaType
	(QotMarketState)(0),            // 7: Qot_Common.QotMarketState
	(TradeDateMarket)(0),           // 8: Qot_Common.TradeDateMarket
	(TradeDateType)(0),             // 9: Qot_Common.TradeDateType
	(RehabType)(0),                 // 10: Qot_Common.RehabType
	(KLType)(0),                    // 11: Qot_Common.KLType
	(KLFields)(0),                  // 12: Qot_Common.KLFields
	(SubType)(0),                   // 13: Qot_Common.SubType
	(TickerDirection)(0),           // 14: Qot_Common.TickerDirection
	(TickerType)(0),                // 15: Qot_Common.TickerType
	(DarkStatus)(0),                // 16: Qot_Common.DarkStatus
	(SecurityStatus)(0),            // 17: Qot_Common.SecurityStatus
	(HolderCategory)(0),            // 18: Qot_Common.HolderCategory
	(PushDataType)(0),              // 19: Qot_Common.PushDataType
	(SortField)(0),                 // 20: Qot_Common.SortField
	(Issuer)(0),                    // 21: Qot_Common.Issuer
	(IpoPeriod)(0),                 // 22: Qot_Common.IpoPeriod
	(PriceType)(0),                 // 23: Qot_Common.PriceType
	(WarrantStatus)(0),             // 24: Qot_Common.WarrantStatus
	(CompanyAct)(0),                // 25: Qot_Common.CompanyAct
	(QotRight)(0),                  // 26: Qot_Common.QotRight
	(PriceReminderType)(0),         // 27: Qot_Common.PriceReminderType
	(PriceReminderFreq)(0),         // 28: Qot_Common.PriceReminderFreq
	(AssetClass)(0),                // 29: Qot_Common.AssetClass
	(ExpirationCycle)(0),           // 30: Qot_Common.ExpirationCycle
	(OptionStandardType)(0),        // 31: Qot_Common.OptionStandardType
	(OptionSettlementMode)(0),      // 32: Qot_Common.OptionSettlementMode
	(ExchType)(0),                  // 33: Qot_Common.ExchType
	(PeriodType)(0),                // 34: Qot_Common.PeriodType
	(PriceReminderMarketStatus)(0), // 35: Qot_Common.PriceReminderMarketStatus
	(*Security)(nil),               // 36: Qot_Common.Security
	(*KLine)(nil),                  // 37: Qot_Common.KLine
	(*OptionBasicQotExData)(nil),   // 38: Qot_Common.OptionBasicQotExData
	(*PreAfterMarketData)(nil),     // 39: Qot_Common.PreAfterMarketData
	(*FutureBasicQotExData)(nil),   // 40: Qot_Common.FutureBasicQotExData
	(*WarrantBasicQotExData)(nil),  // 41: Qot_Common.WarrantBasicQotExData
	(*BasicQot)(nil),               // 42: Qot_Common.BasicQot
	(*TimeShare)(nil),              // 43: Qot_Common.TimeShare
	(*SecurityStaticBasic)(nil),    // 44: Qot_Common.SecurityStaticBasic
	(*WarrantStaticExData)(nil),    // 45: Qot_Common.WarrantStaticExData
	(*OptionStaticExData)(nil),     // 46: Qot_Common.OptionStaticExData
	(*FutureStaticExData)(nil),     // 47: Qot_Common.FutureStaticExData
	(*SecurityStaticInfo)(nil),     // 48: Qot_Common.SecurityStaticInfo
	(*Broker)(nil),                 // 49: Qot_Common.Broker
	(*Ticker)(nil),                 // 50: Qot_Common.Ticker
	(*OrderBookDetail)(nil),        // 51: Qot_Common.OrderBookDetail
	(*OrderBook)(nil),              // 52: Qot_Common.OrderBook
	(*ShareHoldingChange)(nil),     // 53: Qot_Common.ShareHoldingChange
	(*SubInfo)(nil),                // 54: Qot_Common.SubInfo
	(*ConnSubInfo)(nil),            // 55: Qot_Common.ConnSubInfo
	(*PlateInfo)(nil),              // 56: Qot_Common.PlateInfo
	(*Rehab)(nil),                  // 57: Qot_Common.Rehab
}
var file_qot_common_Qot_Common_proto_depIdxs = []int32{
	36, // 0: Qot_Common.BasicQot.security:type_name -> Qot_Common.Security
	38, // 1: Qot_Common.BasicQot.optionExData:type_name -> Qot_Common.OptionBasicQotExData
	39, // 2: Qot_Common.BasicQot.preMarket:type_name -> Qot_Common.PreAfterMarketData
	39, // 3: Qot_Common.BasicQot.afterMarket:type_name -> Qot_Common.PreAfterMarketData
	40, // 4: Qot_Common.BasicQot.futureExData:type_name -> Qot_Common.FutureBasicQotExData
	41, // 5: Qot_Common.BasicQot.warrantExData:type_name -> Qot_Common.WarrantBasicQotExData
	39, // 6: Qot_Common.BasicQot.overnight:type_name -> Qot_Common.PreAfterMarketData
	36, // 7: Qot_Common.SecurityStaticBasic.security:type_name -> Qot_Common.Security
	36, // 8: Qot_Common.WarrantStaticExData.owner:type_name -> Qot_Common.Security
	36, // 9: Qot_Common.OptionStaticExData.owner:type_name -> Qot_Common.Security
	44, // 10: Qot_Common.SecurityStaticInfo.basic:type_name -> Qot_Common.SecurityStaticBasic
	45, // 11: Qot_Common.SecurityStaticInfo.warrantExData:type_name -> Qot_Common.WarrantStaticExData
	46, // 12: Qot_Common.SecurityStaticInfo.optionExData:type_name -> Qot_Common.OptionStaticExData
	47, // 13: Qot_Common.SecurityStaticInfo.futureExData:type_name -> Qot_Common.FutureStaticExData
	51, // 14: Qot_Common.OrderBook.detailList:type_name -> Qot_Common.OrderBookDetail
	36, // 15: Qot_Common.SubInfo.securityList:type_name -> Qot_Common.Security
	54, // 16: Qot_Common.ConnSubInfo.subInfoList:type_name -> Qot_Common.SubInfo
	36, // 17: Qot_Common.PlateInfo.plate:type_name -> Qot_Common.Security
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_qot_common_Qot_Common_proto_init() }
func file_qot_common_Qot_Common_proto_init() {
	if File_qot_common_Qot_Common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qot_common_Qot_Common_proto_rawDesc), len(file_qot_common_Qot_Common_proto_rawDesc)),
			NumEnums:      36,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qot_common_Qot_Common_proto_goTypes,
		DependencyIndexes: file_qot_common_Qot_Common_proto_depIdxs,
		EnumInfos:         file_qot_common_Qot_Common_proto_enumTypes,
		MessageInfos:      file_qot_common_Qot_Common_proto_msgTypes,
	}.Build()
	File_qot_common_Qot_Common_proto = out.File
	file_qot_common_Qot_Common_proto_goTypes = nil
	file_qot_common_Qot_Common_proto_depIdxs = nil
}
