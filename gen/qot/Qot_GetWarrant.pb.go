// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: qot/Qot_GetWarrant.proto

package qotgetwarrant

import (
	_ "github.com/qtopie/gofutuapi/gen/common"
	common "github.com/qtopie/gofutuapi/gen/qot/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type C2S struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Begin     *int32                 `protobuf:"varint,1,req,name=begin" json:"begin,omitempty"`         //数据起始点
	Num       *int32                 `protobuf:"varint,2,req,name=num" json:"num,omitempty"`             //请求数据个数，最大200
	SortField *int32                 `protobuf:"varint,3,req,name=sortField" json:"sortField,omitempty"` //Qot_Common.SortField，根据哪个字段排序
	Ascend    *bool                  `protobuf:"varint,4,req,name=ascend" json:"ascend,omitempty"`       //升序ture，降序false
	// 以下为筛选条件，可选字段，不填表示不过滤
	Owner                 *common.Security `protobuf:"bytes,5,opt,name=owner" json:"owner,omitempty"`                                    //所属正股
	TypeList              []int32          `protobuf:"varint,6,rep,name=typeList" json:"typeList,omitempty"`                             //Qot_Common.WarrantType，窝轮类型过滤列表
	IssuerList            []int32          `protobuf:"varint,7,rep,name=issuerList" json:"issuerList,omitempty"`                         //Qot_Common.Issuer，发行人过滤列表
	MaturityTimeMin       *string          `protobuf:"bytes,8,opt,name=maturityTimeMin" json:"maturityTimeMin,omitempty"`                //到期日，到期日范围的开始时间戳
	MaturityTimeMax       *string          `protobuf:"bytes,9,opt,name=maturityTimeMax" json:"maturityTimeMax,omitempty"`                //到期日范围的结束时间戳
	IpoPeriod             *int32           `protobuf:"varint,10,opt,name=ipoPeriod" json:"ipoPeriod,omitempty"`                          //Qot_Common.IpoPeriod，上市日
	PriceType             *int32           `protobuf:"varint,11,opt,name=priceType" json:"priceType,omitempty"`                          //Qot_Common.PriceType，价内/价外（暂不支持界内证的界内外筛选）
	Status                *int32           `protobuf:"varint,12,opt,name=status" json:"status,omitempty"`                                //Qot_Common.WarrantStatus，窝轮状态
	CurPriceMin           *float64         `protobuf:"fixed64,13,opt,name=curPriceMin" json:"curPriceMin,omitempty"`                     //最新价的过滤下限（闭区间），不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	CurPriceMax           *float64         `protobuf:"fixed64,14,opt,name=curPriceMax" json:"curPriceMax,omitempty"`                     //最新价的过滤上限（闭区间），不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	StrikePriceMin        *float64         `protobuf:"fixed64,15,opt,name=strikePriceMin" json:"strikePriceMin,omitempty"`               //行使价的过滤下限（闭区间），不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	StrikePriceMax        *float64         `protobuf:"fixed64,16,opt,name=strikePriceMax" json:"strikePriceMax,omitempty"`               //行使价的过滤上限（闭区间），不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	StreetMin             *float64         `protobuf:"fixed64,17,opt,name=streetMin" json:"streetMin,omitempty"`                         //街货占比的过滤下限（闭区间），该字段为百分比字段，默认不展示 %，如 20 实际对应 20%。不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	StreetMax             *float64         `protobuf:"fixed64,18,opt,name=streetMax" json:"streetMax,omitempty"`                         //街货占比的过滤上限（闭区间），该字段为百分比字段，默认不展示 %，如 20 实际对应 20%。不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	ConversionMin         *float64         `protobuf:"fixed64,19,opt,name=conversionMin" json:"conversionMin,omitempty"`                 //换股比率的过滤下限（闭区间），不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	ConversionMax         *float64         `protobuf:"fixed64,20,opt,name=conversionMax" json:"conversionMax,omitempty"`                 //换股比率的过滤上限（闭区间），不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	VolMin                *uint64          `protobuf:"varint,21,opt,name=volMin" json:"volMin,omitempty"`                                //成交量的过滤下限（闭区间），不传代表下限为 -∞
	VolMax                *uint64          `protobuf:"varint,22,opt,name=volMax" json:"volMax,omitempty"`                                //成交量的过滤上限（闭区间），不传代表上限为 +∞
	PremiumMin            *float64         `protobuf:"fixed64,23,opt,name=premiumMin" json:"premiumMin,omitempty"`                       //溢价的过滤下限（闭区间），该字段为百分比字段，默认不展示 %，如 20 实际对应 20%。不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	PremiumMax            *float64         `protobuf:"fixed64,24,opt,name=premiumMax" json:"premiumMax,omitempty"`                       //溢价的过滤上限（闭区间），该字段为百分比字段，默认不展示 %，如 20 实际对应 20%。不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	LeverageRatioMin      *float64         `protobuf:"fixed64,25,opt,name=leverageRatioMin" json:"leverageRatioMin,omitempty"`           //杠杆比率的过滤下限（闭区间），不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	LeverageRatioMax      *float64         `protobuf:"fixed64,26,opt,name=leverageRatioMax" json:"leverageRatioMax,omitempty"`           //杠杆比率的过滤上限（闭区间），不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	DeltaMin              *float64         `protobuf:"fixed64,27,opt,name=deltaMin" json:"deltaMin,omitempty"`                           //对冲值的过滤下限（闭区间），仅认购认沽支持此字段过滤，不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	DeltaMax              *float64         `protobuf:"fixed64,28,opt,name=deltaMax" json:"deltaMax,omitempty"`                           //对冲值的过滤上限（闭区间），仅认购认沽支持此字段过滤，不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	ImpliedMin            *float64         `protobuf:"fixed64,29,opt,name=impliedMin" json:"impliedMin,omitempty"`                       //引伸波幅的过滤下限（闭区间），仅认购认沽支持此字段过滤，不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	ImpliedMax            *float64         `protobuf:"fixed64,30,opt,name=impliedMax" json:"impliedMax,omitempty"`                       //引伸波幅的过滤上限（闭区间），仅认购认沽支持此字段过滤，不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	RecoveryPriceMin      *float64         `protobuf:"fixed64,31,opt,name=recoveryPriceMin" json:"recoveryPriceMin,omitempty"`           //收回价的过滤下限（闭区间），仅牛熊证支持此字段过滤，不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	RecoveryPriceMax      *float64         `protobuf:"fixed64,32,opt,name=recoveryPriceMax" json:"recoveryPriceMax,omitempty"`           //收回价的过滤上限（闭区间），仅牛熊证支持此字段过滤，不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	PriceRecoveryRatioMin *float64         `protobuf:"fixed64,33,opt,name=priceRecoveryRatioMin" json:"priceRecoveryRatioMin,omitempty"` //正股距收回价，的过滤下限（闭区间），仅牛熊证支持此字段过滤。该字段为百分比字段，默认不展示 %，如 20 实际对应 20%。不传代表下限为 -∞（精确到小数点后 3 位，超出部分会被舍弃）
	PriceRecoveryRatioMax *float64         `protobuf:"fixed64,34,opt,name=priceRecoveryRatioMax" json:"priceRecoveryRatioMax,omitempty"` //正股距收回价，的过滤上限（闭区间），仅牛熊证支持此字段过滤。该字段为百分比字段，默认不展示 %，如 20 实际对应 20%。不传代表上限为 +∞（精确到小数点后 3 位，超出部分会被舍弃）
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *C2S) Reset() {
	*x = C2S{}
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S) ProtoMessage() {}

func (x *C2S) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S.ProtoReflect.Descriptor instead.
func (*C2S) Descriptor() ([]byte, []int) {
	return file_qot_Qot_GetWarrant_proto_rawDescGZIP(), []int{0}
}

func (x *C2S) GetBegin() int32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *C2S) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *C2S) GetSortField() int32 {
	if x != nil && x.SortField != nil {
		return *x.SortField
	}
	return 0
}

func (x *C2S) GetAscend() bool {
	if x != nil && x.Ascend != nil {
		return *x.Ascend
	}
	return false
}

func (x *C2S) GetOwner() *common.Security {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *C2S) GetTypeList() []int32 {
	if x != nil {
		return x.TypeList
	}
	return nil
}

func (x *C2S) GetIssuerList() []int32 {
	if x != nil {
		return x.IssuerList
	}
	return nil
}

func (x *C2S) GetMaturityTimeMin() string {
	if x != nil && x.MaturityTimeMin != nil {
		return *x.MaturityTimeMin
	}
	return ""
}

func (x *C2S) GetMaturityTimeMax() string {
	if x != nil && x.MaturityTimeMax != nil {
		return *x.MaturityTimeMax
	}
	return ""
}

func (x *C2S) GetIpoPeriod() int32 {
	if x != nil && x.IpoPeriod != nil {
		return *x.IpoPeriod
	}
	return 0
}

func (x *C2S) GetPriceType() int32 {
	if x != nil && x.PriceType != nil {
		return *x.PriceType
	}
	return 0
}

func (x *C2S) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *C2S) GetCurPriceMin() float64 {
	if x != nil && x.CurPriceMin != nil {
		return *x.CurPriceMin
	}
	return 0
}

func (x *C2S) GetCurPriceMax() float64 {
	if x != nil && x.CurPriceMax != nil {
		return *x.CurPriceMax
	}
	return 0
}

func (x *C2S) GetStrikePriceMin() float64 {
	if x != nil && x.StrikePriceMin != nil {
		return *x.StrikePriceMin
	}
	return 0
}

func (x *C2S) GetStrikePriceMax() float64 {
	if x != nil && x.StrikePriceMax != nil {
		return *x.StrikePriceMax
	}
	return 0
}

func (x *C2S) GetStreetMin() float64 {
	if x != nil && x.StreetMin != nil {
		return *x.StreetMin
	}
	return 0
}

func (x *C2S) GetStreetMax() float64 {
	if x != nil && x.StreetMax != nil {
		return *x.StreetMax
	}
	return 0
}

func (x *C2S) GetConversionMin() float64 {
	if x != nil && x.ConversionMin != nil {
		return *x.ConversionMin
	}
	return 0
}

func (x *C2S) GetConversionMax() float64 {
	if x != nil && x.ConversionMax != nil {
		return *x.ConversionMax
	}
	return 0
}

func (x *C2S) GetVolMin() uint64 {
	if x != nil && x.VolMin != nil {
		return *x.VolMin
	}
	return 0
}

func (x *C2S) GetVolMax() uint64 {
	if x != nil && x.VolMax != nil {
		return *x.VolMax
	}
	return 0
}

func (x *C2S) GetPremiumMin() float64 {
	if x != nil && x.PremiumMin != nil {
		return *x.PremiumMin
	}
	return 0
}

func (x *C2S) GetPremiumMax() float64 {
	if x != nil && x.PremiumMax != nil {
		return *x.PremiumMax
	}
	return 0
}

func (x *C2S) GetLeverageRatioMin() float64 {
	if x != nil && x.LeverageRatioMin != nil {
		return *x.LeverageRatioMin
	}
	return 0
}

func (x *C2S) GetLeverageRatioMax() float64 {
	if x != nil && x.LeverageRatioMax != nil {
		return *x.LeverageRatioMax
	}
	return 0
}

func (x *C2S) GetDeltaMin() float64 {
	if x != nil && x.DeltaMin != nil {
		return *x.DeltaMin
	}
	return 0
}

func (x *C2S) GetDeltaMax() float64 {
	if x != nil && x.DeltaMax != nil {
		return *x.DeltaMax
	}
	return 0
}

func (x *C2S) GetImpliedMin() float64 {
	if x != nil && x.ImpliedMin != nil {
		return *x.ImpliedMin
	}
	return 0
}

func (x *C2S) GetImpliedMax() float64 {
	if x != nil && x.ImpliedMax != nil {
		return *x.ImpliedMax
	}
	return 0
}

func (x *C2S) GetRecoveryPriceMin() float64 {
	if x != nil && x.RecoveryPriceMin != nil {
		return *x.RecoveryPriceMin
	}
	return 0
}

func (x *C2S) GetRecoveryPriceMax() float64 {
	if x != nil && x.RecoveryPriceMax != nil {
		return *x.RecoveryPriceMax
	}
	return 0
}

func (x *C2S) GetPriceRecoveryRatioMin() float64 {
	if x != nil && x.PriceRecoveryRatioMin != nil {
		return *x.PriceRecoveryRatioMin
	}
	return 0
}

func (x *C2S) GetPriceRecoveryRatioMax() float64 {
	if x != nil && x.PriceRecoveryRatioMax != nil {
		return *x.PriceRecoveryRatioMax
	}
	return 0
}

type WarrantData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 静态数据项
	Stock              *common.Security `protobuf:"bytes,1,req,name=stock" json:"stock,omitempty"`                              //股票
	Owner              *common.Security `protobuf:"bytes,2,req,name=owner" json:"owner,omitempty"`                              //所属正股
	Type               *int32           `protobuf:"varint,3,req,name=type" json:"type,omitempty"`                               //Qot_Common.WarrantType，窝轮类型
	Issuer             *int32           `protobuf:"varint,4,req,name=issuer" json:"issuer,omitempty"`                           //Qot_Common.Issuer，发行人
	MaturityTime       *string          `protobuf:"bytes,5,req,name=maturityTime" json:"maturityTime,omitempty"`                //到期日
	MaturityTimestamp  *float64         `protobuf:"fixed64,6,opt,name=maturityTimestamp" json:"maturityTimestamp,omitempty"`    //到期日时间戳
	ListTime           *string          `protobuf:"bytes,7,req,name=listTime" json:"listTime,omitempty"`                        //上市时间
	ListTimestamp      *float64         `protobuf:"fixed64,8,opt,name=listTimestamp" json:"listTimestamp,omitempty"`            //上市时间戳
	LastTradeTime      *string          `protobuf:"bytes,9,req,name=lastTradeTime" json:"lastTradeTime,omitempty"`              //最后交易日
	LastTradeTimestamp *float64         `protobuf:"fixed64,10,opt,name=lastTradeTimestamp" json:"lastTradeTimestamp,omitempty"` //最后交易日时间戳
	RecoveryPrice      *float64         `protobuf:"fixed64,11,opt,name=recoveryPrice" json:"recoveryPrice,omitempty"`           //收回价，仅牛熊证支持此字段
	ConversionRatio    *float64         `protobuf:"fixed64,12,req,name=conversionRatio" json:"conversionRatio,omitempty"`       //换股比率
	LotSize            *int32           `protobuf:"varint,13,req,name=lotSize" json:"lotSize,omitempty"`                        //每手数量
	StrikePrice        *float64         `protobuf:"fixed64,14,req,name=strikePrice" json:"strikePrice,omitempty"`               //行使价
	LastClosePrice     *float64         `protobuf:"fixed64,15,req,name=lastClosePrice" json:"lastClosePrice,omitempty"`         //昨收价
	Name               *string          `protobuf:"bytes,16,req,name=name" json:"name,omitempty"`                               //名称
	// 动态数据项
	CurPrice           *float64 `protobuf:"fixed64,17,req,name=curPrice" json:"curPrice,omitempty"`                     //当前价
	PriceChangeVal     *float64 `protobuf:"fixed64,18,req,name=priceChangeVal" json:"priceChangeVal,omitempty"`         //涨跌额
	ChangeRate         *float64 `protobuf:"fixed64,19,req,name=changeRate" json:"changeRate,omitempty"`                 //涨跌幅（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	Status             *int32   `protobuf:"varint,20,req,name=status" json:"status,omitempty"`                          //Qot_Common.WarrantStatus，窝轮状态
	BidPrice           *float64 `protobuf:"fixed64,21,req,name=bidPrice" json:"bidPrice,omitempty"`                     //买入价
	AskPrice           *float64 `protobuf:"fixed64,22,req,name=askPrice" json:"askPrice,omitempty"`                     //卖出价
	BidVol             *int64   `protobuf:"varint,23,req,name=bidVol" json:"bidVol,omitempty"`                          //买量
	AskVol             *int64   `protobuf:"varint,24,req,name=askVol" json:"askVol,omitempty"`                          //卖量
	Volume             *int64   `protobuf:"varint,25,req,name=volume" json:"volume,omitempty"`                          //成交量
	Turnover           *float64 `protobuf:"fixed64,26,req,name=turnover" json:"turnover,omitempty"`                     //成交额
	Score              *float64 `protobuf:"fixed64,27,req,name=score" json:"score,omitempty"`                           //综合评分
	Premium            *float64 `protobuf:"fixed64,28,req,name=premium" json:"premium,omitempty"`                       //溢价（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	BreakEvenPoint     *float64 `protobuf:"fixed64,29,req,name=breakEvenPoint" json:"breakEvenPoint,omitempty"`         //打和点
	Leverage           *float64 `protobuf:"fixed64,30,req,name=leverage" json:"leverage,omitempty"`                     //杠杆比率（倍）
	Ipop               *float64 `protobuf:"fixed64,31,req,name=ipop" json:"ipop,omitempty"`                             //价内/价外，正数表示价内，负数表示价外（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	PriceRecoveryRatio *float64 `protobuf:"fixed64,32,opt,name=priceRecoveryRatio" json:"priceRecoveryRatio,omitempty"` //正股距收回价，仅牛熊证支持此字段（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	ConversionPrice    *float64 `protobuf:"fixed64,33,req,name=conversionPrice" json:"conversionPrice,omitempty"`       //换股价
	StreetRate         *float64 `protobuf:"fixed64,34,req,name=streetRate" json:"streetRate,omitempty"`                 //街货占比（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	StreetVol          *int64   `protobuf:"varint,35,req,name=streetVol" json:"streetVol,omitempty"`                    //街货量
	Amplitude          *float64 `protobuf:"fixed64,36,req,name=amplitude" json:"amplitude,omitempty"`                   //振幅（该字段为百分比字段，默认不展示 %，如 20 实际对应 20%）
	IssueSize          *int64   `protobuf:"varint,37,req,name=issueSize" json:"issueSize,omitempty"`                    //发行量
	HighPrice          *float64 `protobuf:"fixed64,39,req,name=highPrice" json:"highPrice,omitempty"`                   //最高价
	LowPrice           *float64 `protobuf:"fixed64,40,req,name=lowPrice" json:"lowPrice,omitempty"`                     //最低价
	ImpliedVolatility  *float64 `protobuf:"fixed64,41,opt,name=impliedVolatility" json:"impliedVolatility,omitempty"`   //引申波幅，仅认购认沽支持此字段
	Delta              *float64 `protobuf:"fixed64,42,opt,name=delta" json:"delta,omitempty"`                           //对冲值，仅认购认沽支持此字段
	EffectiveLeverage  *float64 `protobuf:"fixed64,43,req,name=effectiveLeverage" json:"effectiveLeverage,omitempty"`   //有效杠杆
	UpperStrikePrice   *float64 `protobuf:"fixed64,44,opt,name=upperStrikePrice" json:"upperStrikePrice,omitempty"`     //上限价，仅界内证支持此字段
	LowerStrikePrice   *float64 `protobuf:"fixed64,45,opt,name=lowerStrikePrice" json:"lowerStrikePrice,omitempty"`     //下限价，仅界内证支持此字段
	InLinePriceStatus  *int32   `protobuf:"varint,46,opt,name=inLinePriceStatus" json:"inLinePriceStatus,omitempty"`    //Qot_Common.PriceType，界内界外，仅界内证支持此字段
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WarrantData) Reset() {
	*x = WarrantData{}
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarrantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarrantData) ProtoMessage() {}

func (x *WarrantData) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarrantData.ProtoReflect.Descriptor instead.
func (*WarrantData) Descriptor() ([]byte, []int) {
	return file_qot_Qot_GetWarrant_proto_rawDescGZIP(), []int{1}
}

func (x *WarrantData) GetStock() *common.Security {
	if x != nil {
		return x.Stock
	}
	return nil
}

func (x *WarrantData) GetOwner() *common.Security {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *WarrantData) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WarrantData) GetIssuer() int32 {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return 0
}

func (x *WarrantData) GetMaturityTime() string {
	if x != nil && x.MaturityTime != nil {
		return *x.MaturityTime
	}
	return ""
}

func (x *WarrantData) GetMaturityTimestamp() float64 {
	if x != nil && x.MaturityTimestamp != nil {
		return *x.MaturityTimestamp
	}
	return 0
}

func (x *WarrantData) GetListTime() string {
	if x != nil && x.ListTime != nil {
		return *x.ListTime
	}
	return ""
}

func (x *WarrantData) GetListTimestamp() float64 {
	if x != nil && x.ListTimestamp != nil {
		return *x.ListTimestamp
	}
	return 0
}

func (x *WarrantData) GetLastTradeTime() string {
	if x != nil && x.LastTradeTime != nil {
		return *x.LastTradeTime
	}
	return ""
}

func (x *WarrantData) GetLastTradeTimestamp() float64 {
	if x != nil && x.LastTradeTimestamp != nil {
		return *x.LastTradeTimestamp
	}
	return 0
}

func (x *WarrantData) GetRecoveryPrice() float64 {
	if x != nil && x.RecoveryPrice != nil {
		return *x.RecoveryPrice
	}
	return 0
}

func (x *WarrantData) GetConversionRatio() float64 {
	if x != nil && x.ConversionRatio != nil {
		return *x.ConversionRatio
	}
	return 0
}

func (x *WarrantData) GetLotSize() int32 {
	if x != nil && x.LotSize != nil {
		return *x.LotSize
	}
	return 0
}

func (x *WarrantData) GetStrikePrice() float64 {
	if x != nil && x.StrikePrice != nil {
		return *x.StrikePrice
	}
	return 0
}

func (x *WarrantData) GetLastClosePrice() float64 {
	if x != nil && x.LastClosePrice != nil {
		return *x.LastClosePrice
	}
	return 0
}

func (x *WarrantData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *WarrantData) GetCurPrice() float64 {
	if x != nil && x.CurPrice != nil {
		return *x.CurPrice
	}
	return 0
}

func (x *WarrantData) GetPriceChangeVal() float64 {
	if x != nil && x.PriceChangeVal != nil {
		return *x.PriceChangeVal
	}
	return 0
}

func (x *WarrantData) GetChangeRate() float64 {
	if x != nil && x.ChangeRate != nil {
		return *x.ChangeRate
	}
	return 0
}

func (x *WarrantData) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *WarrantData) GetBidPrice() float64 {
	if x != nil && x.BidPrice != nil {
		return *x.BidPrice
	}
	return 0
}

func (x *WarrantData) GetAskPrice() float64 {
	if x != nil && x.AskPrice != nil {
		return *x.AskPrice
	}
	return 0
}

func (x *WarrantData) GetBidVol() int64 {
	if x != nil && x.BidVol != nil {
		return *x.BidVol
	}
	return 0
}

func (x *WarrantData) GetAskVol() int64 {
	if x != nil && x.AskVol != nil {
		return *x.AskVol
	}
	return 0
}

func (x *WarrantData) GetVolume() int64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *WarrantData) GetTurnover() float64 {
	if x != nil && x.Turnover != nil {
		return *x.Turnover
	}
	return 0
}

func (x *WarrantData) GetScore() float64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *WarrantData) GetPremium() float64 {
	if x != nil && x.Premium != nil {
		return *x.Premium
	}
	return 0
}

func (x *WarrantData) GetBreakEvenPoint() float64 {
	if x != nil && x.BreakEvenPoint != nil {
		return *x.BreakEvenPoint
	}
	return 0
}

func (x *WarrantData) GetLeverage() float64 {
	if x != nil && x.Leverage != nil {
		return *x.Leverage
	}
	return 0
}

func (x *WarrantData) GetIpop() float64 {
	if x != nil && x.Ipop != nil {
		return *x.Ipop
	}
	return 0
}

func (x *WarrantData) GetPriceRecoveryRatio() float64 {
	if x != nil && x.PriceRecoveryRatio != nil {
		return *x.PriceRecoveryRatio
	}
	return 0
}

func (x *WarrantData) GetConversionPrice() float64 {
	if x != nil && x.ConversionPrice != nil {
		return *x.ConversionPrice
	}
	return 0
}

func (x *WarrantData) GetStreetRate() float64 {
	if x != nil && x.StreetRate != nil {
		return *x.StreetRate
	}
	return 0
}

func (x *WarrantData) GetStreetVol() int64 {
	if x != nil && x.StreetVol != nil {
		return *x.StreetVol
	}
	return 0
}

func (x *WarrantData) GetAmplitude() float64 {
	if x != nil && x.Amplitude != nil {
		return *x.Amplitude
	}
	return 0
}

func (x *WarrantData) GetIssueSize() int64 {
	if x != nil && x.IssueSize != nil {
		return *x.IssueSize
	}
	return 0
}

func (x *WarrantData) GetHighPrice() float64 {
	if x != nil && x.HighPrice != nil {
		return *x.HighPrice
	}
	return 0
}

func (x *WarrantData) GetLowPrice() float64 {
	if x != nil && x.LowPrice != nil {
		return *x.LowPrice
	}
	return 0
}

func (x *WarrantData) GetImpliedVolatility() float64 {
	if x != nil && x.ImpliedVolatility != nil {
		return *x.ImpliedVolatility
	}
	return 0
}

func (x *WarrantData) GetDelta() float64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *WarrantData) GetEffectiveLeverage() float64 {
	if x != nil && x.EffectiveLeverage != nil {
		return *x.EffectiveLeverage
	}
	return 0
}

func (x *WarrantData) GetUpperStrikePrice() float64 {
	if x != nil && x.UpperStrikePrice != nil {
		return *x.UpperStrikePrice
	}
	return 0
}

func (x *WarrantData) GetLowerStrikePrice() float64 {
	if x != nil && x.LowerStrikePrice != nil {
		return *x.LowerStrikePrice
	}
	return 0
}

func (x *WarrantData) GetInLinePriceStatus() int32 {
	if x != nil && x.InLinePriceStatus != nil {
		return *x.InLinePriceStatus
	}
	return 0
}

type S2C struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LastPage        *bool                  `protobuf:"varint,1,req,name=lastPage" json:"lastPage,omitempty"`              //是否最后一页了，false:非最后一页，还有窝轮记录未返回; true:已是最后一页
	AllCount        *int32                 `protobuf:"varint,2,req,name=allCount" json:"allCount,omitempty"`              //该条件请求所有数据的个数
	WarrantDataList []*WarrantData         `protobuf:"bytes,3,rep,name=warrantDataList" json:"warrantDataList,omitempty"` //窝轮数据
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *S2C) Reset() {
	*x = S2C{}
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2C) ProtoMessage() {}

func (x *S2C) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2C.ProtoReflect.Descriptor instead.
func (*S2C) Descriptor() ([]byte, []int) {
	return file_qot_Qot_GetWarrant_proto_rawDescGZIP(), []int{2}
}

func (x *S2C) GetLastPage() bool {
	if x != nil && x.LastPage != nil {
		return *x.LastPage
	}
	return false
}

func (x *S2C) GetAllCount() int32 {
	if x != nil && x.AllCount != nil {
		return *x.AllCount
	}
	return 0
}

func (x *S2C) GetWarrantDataList() []*WarrantData {
	if x != nil {
		return x.WarrantDataList
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	C2S           *C2S                   `protobuf:"bytes,1,req,name=c2s" json:"c2s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_qot_Qot_GetWarrant_proto_rawDescGZIP(), []int{3}
}

func (x *Request) GetC2S() *C2S {
	if x != nil {
		return x.C2S
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RetType       *int32                 `protobuf:"varint,1,req,name=retType,def=-400" json:"retType,omitempty"` //RetType，返回结果
	RetMsg        *string                `protobuf:"bytes,2,opt,name=retMsg" json:"retMsg,omitempty"`
	ErrCode       *int32                 `protobuf:"varint,3,opt,name=errCode" json:"errCode,omitempty"`
	S2C           *S2C                   `protobuf:"bytes,4,opt,name=s2c" json:"s2c,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for Response fields.
const (
	Default_Response_RetType = int32(-400)
)

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_qot_Qot_GetWarrant_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_qot_Qot_GetWarrant_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetRetType() int32 {
	if x != nil && x.RetType != nil {
		return *x.RetType
	}
	return Default_Response_RetType
}

func (x *Response) GetRetMsg() string {
	if x != nil && x.RetMsg != nil {
		return *x.RetMsg
	}
	return ""
}

func (x *Response) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *Response) GetS2C() *S2C {
	if x != nil {
		return x.S2C
	}
	return nil
}

var File_qot_Qot_GetWarrant_proto protoreflect.FileDescriptor

const file_qot_Qot_GetWarrant_proto_rawDesc = "" +
	"\n" +
	"\x18qot/Qot_GetWarrant.proto\x12\x0eQot_GetWarrant\x1a\x13common/Common.proto\x1a\x1bqot/common/Qot_Common.proto\"\x93\t\n" +
	"\x03C2S\x12\x14\n" +
	"\x05begin\x18\x01 \x02(\x05R\x05begin\x12\x10\n" +
	"\x03num\x18\x02 \x02(\x05R\x03num\x12\x1c\n" +
	"\tsortField\x18\x03 \x02(\x05R\tsortField\x12\x16\n" +
	"\x06ascend\x18\x04 \x02(\bR\x06ascend\x12*\n" +
	"\x05owner\x18\x05 \x01(\v2\x14.Qot_Common.SecurityR\x05owner\x12\x1a\n" +
	"\btypeList\x18\x06 \x03(\x05R\btypeList\x12\x1e\n" +
	"\n" +
	"issuerList\x18\a \x03(\x05R\n" +
	"issuerList\x12(\n" +
	"\x0fmaturityTimeMin\x18\b \x01(\tR\x0fmaturityTimeMin\x12(\n" +
	"\x0fmaturityTimeMax\x18\t \x01(\tR\x0fmaturityTimeMax\x12\x1c\n" +
	"\tipoPeriod\x18\n" +
	" \x01(\x05R\tipoPeriod\x12\x1c\n" +
	"\tpriceType\x18\v \x01(\x05R\tpriceType\x12\x16\n" +
	"\x06status\x18\f \x01(\x05R\x06status\x12 \n" +
	"\vcurPriceMin\x18\r \x01(\x01R\vcurPriceMin\x12 \n" +
	"\vcurPriceMax\x18\x0e \x01(\x01R\vcurPriceMax\x12&\n" +
	"\x0estrikePriceMin\x18\x0f \x01(\x01R\x0estrikePriceMin\x12&\n" +
	"\x0estrikePriceMax\x18\x10 \x01(\x01R\x0estrikePriceMax\x12\x1c\n" +
	"\tstreetMin\x18\x11 \x01(\x01R\tstreetMin\x12\x1c\n" +
	"\tstreetMax\x18\x12 \x01(\x01R\tstreetMax\x12$\n" +
	"\rconversionMin\x18\x13 \x01(\x01R\rconversionMin\x12$\n" +
	"\rconversionMax\x18\x14 \x01(\x01R\rconversionMax\x12\x16\n" +
	"\x06volMin\x18\x15 \x01(\x04R\x06volMin\x12\x16\n" +
	"\x06volMax\x18\x16 \x01(\x04R\x06volMax\x12\x1e\n" +
	"\n" +
	"premiumMin\x18\x17 \x01(\x01R\n" +
	"premiumMin\x12\x1e\n" +
	"\n" +
	"premiumMax\x18\x18 \x01(\x01R\n" +
	"premiumMax\x12*\n" +
	"\x10leverageRatioMin\x18\x19 \x01(\x01R\x10leverageRatioMin\x12*\n" +
	"\x10leverageRatioMax\x18\x1a \x01(\x01R\x10leverageRatioMax\x12\x1a\n" +
	"\bdeltaMin\x18\x1b \x01(\x01R\bdeltaMin\x12\x1a\n" +
	"\bdeltaMax\x18\x1c \x01(\x01R\bdeltaMax\x12\x1e\n" +
	"\n" +
	"impliedMin\x18\x1d \x01(\x01R\n" +
	"impliedMin\x12\x1e\n" +
	"\n" +
	"impliedMax\x18\x1e \x01(\x01R\n" +
	"impliedMax\x12*\n" +
	"\x10recoveryPriceMin\x18\x1f \x01(\x01R\x10recoveryPriceMin\x12*\n" +
	"\x10recoveryPriceMax\x18  \x01(\x01R\x10recoveryPriceMax\x124\n" +
	"\x15priceRecoveryRatioMin\x18! \x01(\x01R\x15priceRecoveryRatioMin\x124\n" +
	"\x15priceRecoveryRatioMax\x18\" \x01(\x01R\x15priceRecoveryRatioMax\"\xe9\v\n" +
	"\vWarrantData\x12*\n" +
	"\x05stock\x18\x01 \x02(\v2\x14.Qot_Common.SecurityR\x05stock\x12*\n" +
	"\x05owner\x18\x02 \x02(\v2\x14.Qot_Common.SecurityR\x05owner\x12\x12\n" +
	"\x04type\x18\x03 \x02(\x05R\x04type\x12\x16\n" +
	"\x06issuer\x18\x04 \x02(\x05R\x06issuer\x12\"\n" +
	"\fmaturityTime\x18\x05 \x02(\tR\fmaturityTime\x12,\n" +
	"\x11maturityTimestamp\x18\x06 \x01(\x01R\x11maturityTimestamp\x12\x1a\n" +
	"\blistTime\x18\a \x02(\tR\blistTime\x12$\n" +
	"\rlistTimestamp\x18\b \x01(\x01R\rlistTimestamp\x12$\n" +
	"\rlastTradeTime\x18\t \x02(\tR\rlastTradeTime\x12.\n" +
	"\x12lastTradeTimestamp\x18\n" +
	" \x01(\x01R\x12lastTradeTimestamp\x12$\n" +
	"\rrecoveryPrice\x18\v \x01(\x01R\rrecoveryPrice\x12(\n" +
	"\x0fconversionRatio\x18\f \x02(\x01R\x0fconversionRatio\x12\x18\n" +
	"\alotSize\x18\r \x02(\x05R\alotSize\x12 \n" +
	"\vstrikePrice\x18\x0e \x02(\x01R\vstrikePrice\x12&\n" +
	"\x0elastClosePrice\x18\x0f \x02(\x01R\x0elastClosePrice\x12\x12\n" +
	"\x04name\x18\x10 \x02(\tR\x04name\x12\x1a\n" +
	"\bcurPrice\x18\x11 \x02(\x01R\bcurPrice\x12&\n" +
	"\x0epriceChangeVal\x18\x12 \x02(\x01R\x0epriceChangeVal\x12\x1e\n" +
	"\n" +
	"changeRate\x18\x13 \x02(\x01R\n" +
	"changeRate\x12\x16\n" +
	"\x06status\x18\x14 \x02(\x05R\x06status\x12\x1a\n" +
	"\bbidPrice\x18\x15 \x02(\x01R\bbidPrice\x12\x1a\n" +
	"\baskPrice\x18\x16 \x02(\x01R\baskPrice\x12\x16\n" +
	"\x06bidVol\x18\x17 \x02(\x03R\x06bidVol\x12\x16\n" +
	"\x06askVol\x18\x18 \x02(\x03R\x06askVol\x12\x16\n" +
	"\x06volume\x18\x19 \x02(\x03R\x06volume\x12\x1a\n" +
	"\bturnover\x18\x1a \x02(\x01R\bturnover\x12\x14\n" +
	"\x05score\x18\x1b \x02(\x01R\x05score\x12\x18\n" +
	"\apremium\x18\x1c \x02(\x01R\apremium\x12&\n" +
	"\x0ebreakEvenPoint\x18\x1d \x02(\x01R\x0ebreakEvenPoint\x12\x1a\n" +
	"\bleverage\x18\x1e \x02(\x01R\bleverage\x12\x12\n" +
	"\x04ipop\x18\x1f \x02(\x01R\x04ipop\x12.\n" +
	"\x12priceRecoveryRatio\x18  \x01(\x01R\x12priceRecoveryRatio\x12(\n" +
	"\x0fconversionPrice\x18! \x02(\x01R\x0fconversionPrice\x12\x1e\n" +
	"\n" +
	"streetRate\x18\" \x02(\x01R\n" +
	"streetRate\x12\x1c\n" +
	"\tstreetVol\x18# \x02(\x03R\tstreetVol\x12\x1c\n" +
	"\tamplitude\x18$ \x02(\x01R\tamplitude\x12\x1c\n" +
	"\tissueSize\x18% \x02(\x03R\tissueSize\x12\x1c\n" +
	"\thighPrice\x18' \x02(\x01R\thighPrice\x12\x1a\n" +
	"\blowPrice\x18( \x02(\x01R\blowPrice\x12,\n" +
	"\x11impliedVolatility\x18) \x01(\x01R\x11impliedVolatility\x12\x14\n" +
	"\x05delta\x18* \x01(\x01R\x05delta\x12,\n" +
	"\x11effectiveLeverage\x18+ \x02(\x01R\x11effectiveLeverage\x12*\n" +
	"\x10upperStrikePrice\x18, \x01(\x01R\x10upperStrikePrice\x12*\n" +
	"\x10lowerStrikePrice\x18- \x01(\x01R\x10lowerStrikePrice\x12,\n" +
	"\x11inLinePriceStatus\x18. \x01(\x05R\x11inLinePriceStatus\"\x84\x01\n" +
	"\x03S2C\x12\x1a\n" +
	"\blastPage\x18\x01 \x02(\bR\blastPage\x12\x1a\n" +
	"\ballCount\x18\x02 \x02(\x05R\ballCount\x12E\n" +
	"\x0fwarrantDataList\x18\x03 \x03(\v2\x1b.Qot_GetWarrant.WarrantDataR\x0fwarrantDataList\"0\n" +
	"\aRequest\x12%\n" +
	"\x03c2s\x18\x01 \x02(\v2\x13.Qot_GetWarrant.C2SR\x03c2s\"\x83\x01\n" +
	"\bResponse\x12\x1e\n" +
	"\aretType\x18\x01 \x02(\x05:\x04-400R\aretType\x12\x16\n" +
	"\x06retMsg\x18\x02 \x01(\tR\x06retMsg\x12\x18\n" +
	"\aerrCode\x18\x03 \x01(\x05R\aerrCode\x12%\n" +
	"\x03s2c\x18\x04 \x01(\v2\x13.Qot_GetWarrant.S2CR\x03s2cBH\n" +
	"\x13com.futu.openapi.pbZ1github.com/qtopie/gofutuapi/gen/qot/qotgetwarrant"

var (
	file_qot_Qot_GetWarrant_proto_rawDescOnce sync.Once
	file_qot_Qot_GetWarrant_proto_rawDescData []byte
)

func file_qot_Qot_GetWarrant_proto_rawDescGZIP() []byte {
	file_qot_Qot_GetWarrant_proto_rawDescOnce.Do(func() {
		file_qot_Qot_GetWarrant_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_qot_Qot_GetWarrant_proto_rawDesc), len(file_qot_Qot_GetWarrant_proto_rawDesc)))
	})
	return file_qot_Qot_GetWarrant_proto_rawDescData
}

var file_qot_Qot_GetWarrant_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_qot_Qot_GetWarrant_proto_goTypes = []any{
	(*C2S)(nil),             // 0: Qot_GetWarrant.C2S
	(*WarrantData)(nil),     // 1: Qot_GetWarrant.WarrantData
	(*S2C)(nil),             // 2: Qot_GetWarrant.S2C
	(*Request)(nil),         // 3: Qot_GetWarrant.Request
	(*Response)(nil),        // 4: Qot_GetWarrant.Response
	(*common.Security)(nil), // 5: Qot_Common.Security
}
var file_qot_Qot_GetWarrant_proto_depIdxs = []int32{
	5, // 0: Qot_GetWarrant.C2S.owner:type_name -> Qot_Common.Security
	5, // 1: Qot_GetWarrant.WarrantData.stock:type_name -> Qot_Common.Security
	5, // 2: Qot_GetWarrant.WarrantData.owner:type_name -> Qot_Common.Security
	1, // 3: Qot_GetWarrant.S2C.warrantDataList:type_name -> Qot_GetWarrant.WarrantData
	0, // 4: Qot_GetWarrant.Request.c2s:type_name -> Qot_GetWarrant.C2S
	2, // 5: Qot_GetWarrant.Response.s2c:type_name -> Qot_GetWarrant.S2C
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_qot_Qot_GetWarrant_proto_init() }
func file_qot_Qot_GetWarrant_proto_init() {
	if File_qot_Qot_GetWarrant_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_qot_Qot_GetWarrant_proto_rawDesc), len(file_qot_Qot_GetWarrant_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qot_Qot_GetWarrant_proto_goTypes,
		DependencyIndexes: file_qot_Qot_GetWarrant_proto_depIdxs,
		MessageInfos:      file_qot_Qot_GetWarrant_proto_msgTypes,
	}.Build()
	File_qot_Qot_GetWarrant_proto = out.File
	file_qot_Qot_GetWarrant_proto_goTypes = nil
	file_qot_Qot_GetWarrant_proto_depIdxs = nil
}
